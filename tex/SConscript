import os
import sys

Import("env")
env = env.Clone()

# increase line length of LuaLaTeX error log lines by setting environment variables
env["ENV"]["max_print_line"] = "1000"
env["ENV"]["error_line"] = "254"
env["ENV"]["half_error_line"] = "238"

# use LuaLaTeX as compiler (successor of PDFLaTeX)
env.Replace(PDFLATEX="texfot lualatex")
# enable SyncTeX for GUI editors
env.Append(PDFLATEXFLAGS="--synctex=1")
# enable shell commands to display Git version
env.Append(PDFLATEXFLAGS="--shell-escape")

# don't call BibTeX on *.aux files of chapters
env.Replace(BIBTEXCOM="")
# quiet Biber output
env.Append(BIBERFLAGS="-q")

# use makeglossaries instead of directly calling makeindex
env.Replace(MAKEGLOSSARY="makeglossaries")
# quiet makeglossaries output
env.Replace(MAKEGLOSSARYFLAGS="-q")
# reorder arguments for makeglossaries
# (filename without extension has to be at the end)
env.Replace(MAKEGLOSSARYCOM=env["MAKEGLOSSARYCOM"].replace(
    "${SOURCE.filebase}.glo $MAKEGLOSSARYFLAGS -o ${SOURCE.filebase}.gls",
    "$MAKEGLOSSARYFLAGS -o ${SOURCE.filebase}.gls ${SOURCE.filebase}"))

# set TMPDIR to get texfot to work on Windows
if sys.platform == "win32": env["ENV"]["TMPDIR"] = env["ENV"]["TEMP"]

# remove temporary files created accidential run of LuaLaTeX instead of SCons
# (pressing the wrong button in TeXstudio)
for path in os.listdir("."):
  name, ext = os.path.splitext(path)
  
  if ext == ".tex":
    for extension in ["acn", "aux", "bbl", "bcf", "blg", "glo", "ist", "lof", "log", "lot", "nlo",
                      "out", "pdf", "run.xml", "synctex.gz", "thm", "toc", "uhy", "upa", "upb"]:
      path2 = "{}.{}".format(name, extension)
      if os.path.isfile(path2): os.remove(path2)

# set output directory
env.Append(PDFLATEXFLAGS="--output-directory={}".format(env["BUILD_DIR"]))

# compile PDF
pdf = env.PDF(target="{}/thesis.pdf".format(env["BUILD_DIR"]), source="thesis.tex")

# execute Lua SConscript
lua = env.SConscript("../lua/SConscript", exports="env")
env.Depends(pdf, lua)

# copy hyphenation whitelist (needed in check mode)
hyphenation_whitelist = env.Install(env["BUILD_DIR"], "hyphenation_whitelist.txt")
env.Depends(pdf, hyphenation_whitelist)

Return("pdf")
