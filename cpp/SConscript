import multiprocessing
import shlex
import os

Import("env")
Import("Helper")
env = env.Clone()


def buildSGpp(sgppModules):
  # set SCons flags for SG++
  sgppCppDir = Dir("sgpp")
  sgppSConsFlags = ["SG_ALL=0", "SG_PYTHON=1", "USE_PYTHON3_FOR_PYSGPP=1",
                    "USE_EIGEN=1", "USE_ARMADILLO=1", "USE_UMFPACK=1"]
  sgppArgs = (["scons", "-C", os.path.join("cpp", "sgpp"),
              "-j", str(multiprocessing.cpu_count())] + sgppSConsFlags +
              ["SG_{}=1".format(module.upper()) for module in sgppModules])

  sgppSourceFiles = []
  
  for module in sgppModules:
    moduleSourceDirs = [
      os.path.join(sgppCppDir.abspath, module, "build", "pysgpp"),
      os.path.join(sgppCppDir.abspath, module, "src"),
      os.path.join(sgppCppDir.abspath, module, "tests"),
    ]
    
    for moduleSourceDir in moduleSourceDirs:
      for root, dirs, files in os.walk(moduleSourceDir):
        for file_ in files:
          if os.path.splitext(file_)[1] in [".cpp", ".hpp", ".i"]:
            sgppSourceFiles.append(os.path.join(root, file_))
  
  sgppOutputFiles = [
    os.path.join("sgpp", "lib", "sgpp",
                 "libsgpp{}.so".format(module)) for module in sgppModules
  ] + [
    os.path.join("sgpp", "lib", "__init__.py"),
    os.path.join("sgpp", "lib", "pysgpp", "__init__.py"),
    os.path.join("sgpp", "lib", "pysgpp", "pysgpp_swig.py"),
    os.path.join("sgpp", "lib", "pysgpp", "_pysgpp_swig.so"),
  ]
  
  sgppCommandLine = " ".join([shlex.quote(arg) for arg in sgppArgs])
  sgppCommandLine += " && touch {}".format(" ".join(
      [shlex.quote(os.path.join("cpp", x)) for x in sgppOutputFiles]))
  env.Command(sgppOutputFiles, sgppSourceFiles, sgppCommandLine)
  sgppFiles = []
  
  for outputFile in sgppOutputFiles:
    installedFile = os.path.join(env["BUILD_DIR"].abspath, outputFile)
    env.InstallAs(installedFile, outputFile)
    sgppFiles.append(installedFile)
  
  return sgppCppDir, sgppFiles



def buildPrograms(sgppModules, sgppCppDir, sgppFiles):
  cppPath = [os.path.join(sgppCppDir.abspath, module, "src")
            for module in sgppModules]
  cppFlags = ["-fopenmp", "-g", "-std=c++11", "-Wall", "-Wextra",
              "-Wno-unused-parameter"]
  libPath = os.path.join(env["BUILD_DIR"].abspath, "sgpp", "lib", "sgpp")
  libs = ["sgpp{}".format(module) for module in sgppModules]
  linkFlags = ["-fopenmp"]
  
  env.VariantDir(env["BUILD_DIR"], ".", duplicate=False)
  
  cpps = env.Glob(os.path.join(env["BUILD_DIR"].abspath, "*.cpp"))
  programs = []
  
  for cpp in cpps:
    program = os.path.join(
        env["BUILD_DIR"].abspath,
        os.path.splitext(os.path.basename(cpp.abspath))[0])
    programs.append(env.Program(program, cpp,
        CPPPATH=cppPath, CPPFLAGS=cppFlags,
        LIBS=libs, LIBPATH=libPath, LINKFLAGS=linkFlags))
  
  env.Depends(programs, sgppFiles)
  
  return programs



# build SG++
sgppModules = ["base", "optimization"]
sgppCppDir, sgppFiles = buildSGpp(sgppModules)

# build programs
programs = buildPrograms(sgppModules, sgppCppDir, sgppFiles)

Return("sgppFiles", "programs")
