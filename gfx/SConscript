import os
import subprocess
import sys

Import("env")
env = env.Clone()

# install pre-made graphics
pre = env.Glob(os.path.join("pre", "*.pdf"))
env.Install(env["BUILD_DIR"], pre)

# set output directory
env.Append(PDFLATEXFLAGS="--output-directory={}".format(env["BUILD_DIR"]))

# search for Python scripts
pys = env.Glob(os.path.join("py", "*.py"))
pdfs = []
pgfs = []
helperPys = []

# home or Documents directory
homeDir = (os.environ["HOME"] if sys.platform.startswith("linux") else
           os.path.join(os.environ["HOMEDRIVE"], os.environ["HOMEPATH"],
                        "Documents"))

# search for helper Python scripts
pyDir = env.Dir(os.path.join("..", "py")).abspath
for root, dirs, files in os.walk(os.path.join(pyDir, "helper")):
  helperPys.extend([os.path.join(root, x) for x in files
                    if x.endswith(".py")])

# set environment variables
sgppDir = os.path.join(homeDir, "sgpp", "sgopt")
pyEnv = env.Clone()
pyEnv["ENV"]["BUILD_DIR"] = env["BUILD_DIR"].abspath
pyEnv["ENV"]["LD_LIBRARY_PATH"] = ":".join(
  [pyEnv["ENV"].get("LD_LIBRARY_PATH", ""),
   os.path.join(sgppDir, "lib", "sgpp")])
pyEnv["ENV"]["PYTHONPATH"] = ":".join(
  [pyEnv["ENV"].get("PYTHONPATH", ""), pyDir,
   os.path.join(sgppDir, "lib"), os.path.join(sgppDir, "lib", "pysgpp")])

for py in pys:
  # determine number of generated images by script
  name = os.path.splitext(py.name)[0]
  with open(py.abspath, "r") as f: pyCode = f.readlines()
  pdfCount = 1
  
  for line in pyCode:
    if "number of output figures" in line.lower():
      number = line.split()[-1]
      if len(number.strip("0123456789")) == 0: pdfCount = int(number)
      break
  
  # generate list of *.pdf files
  curPDFs = [os.path.join(env["BUILD_DIR"].abspath, "{}_{}.pdf".format(name, i))
             for i in range(1, pdfCount + 1)]
  
  # generate *.pdf files
  pyEnv.Command(curPDFs, py, "python3 $SOURCE")
  pdfs.extend(curPDFs)
  
  pgfs.extend([x[:-4] + ".pgf" for x in curPDFs])

# *.pdf files depend on helper scripts (local helper *.py files and global tools)
env.Depends(pdfs, helperPys)

# don't delete PDFs before calling Python scripts
env.Precious(pdfs)

# clean *.xz data files as well
env.Clean(pdfs, [pgfs, env.Glob(os.path.join(env["BUILD_DIR"].abspath, "*.xz"))])

Return("pdfs")
