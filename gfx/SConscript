import os
import sys

Import("env")
Import("Helper")
env = env.Clone()

# install pre-made graphics
pre = (env.Glob(os.path.join("pre", "*.pdf")) +
       env.Glob(os.path.join("pre", "*.png")))
pre = env.Install(env["BUILD_DIR"], pre)

# search for Python scripts
pys = env.Glob(os.path.join("py", "*.py"))
pdfs = []
pgfs = []
helperPys = []

# search for helper Python scripts
pyDir = env.Dir(os.path.join("..", "py")).abspath
for root, dirs, files in os.walk(os.path.join(pyDir, "helper")):
  helperPys.extend([os.path.join(root, x) for x in files
                    if x.endswith(".py")])

# cpp directory
cppDir = os.path.join(env["BUILD_DIR"].abspath, "..", "cpp")

# set environment variables
env["ENV"]["BUILD_DIR"] = env["BUILD_DIR"].abspath
env["ENV"]["LD_LIBRARY_PATH"] = ":".join(
  [env["ENV"].get("LD_LIBRARY_PATH", ""),
   os.path.join(cppDir, "sgpp", "lib", "sgpp")])
env["ENV"]["PYTHONPATH"] = ":".join(
  [env["ENV"].get("PYTHONPATH", ""), pyDir,
   os.path.join(cppDir, "sgpp", "lib"),
   os.path.join(cppDir, "sgpp", "lib", "pysgpp")])

# check for dependencies
Helper.checkProgramInstalled(env, "pdfcrop", fail=True)
Helper.checkProgramInstalled(env, "python3", fail=True)

for py in pys:
  # determine number of generated images for this *.py file
  # for this, we need a special comment of the form
  # "# number of output figures: 3" in the Python file
  # (SCons needs the number for its dependency graph;
  # however, this is impossible to determine with SCons alone...)
  name = os.path.splitext(py.name)[0]
  if name.startswith("helper"): continue
  with open(py.abspath, "r") as f: pyCode = f.readlines()
  pdfCount = 1
  
  # graphics scripts depend on notation
  dependencies = [os.path.join("..", "tex", "preamble", "notation.tex")]
  
  for line in pyCode:
    if line.startswith("# number of output figures = "):
      number = line.split("=")[-1].strip()
      if len(number.strip("0123456789")) == 0: pdfCount = int(number)
    elif line.startswith("# dependencies = "):
      dependencyNames = line.split("=")[-1].strip().split(",")
      
      for dependencyName in dependencyNames:
        dependencyName = dependencyName.strip()
        
        if dependencyName == "SG++":
          dependencies.extend(env["SGPP_FILES"])
        elif dependencyName.startswith("cpp"):
          dependencies.append(
              os.path.join(cppDir, os.path.basename(dependencyName)))
        else:
          raise ValueError("Unknown dependency \"{}\".".format(
              dependencyName))
    elif not line.startswith("#"):
      break
  
  # generate list of *.pdf files
  curPDFs = [os.path.join(env["BUILD_DIR"].abspath, "{}_{}.pdf".format(name, i))
             for i in range(1, pdfCount + 1)]
  
  # generate *.pdf files
  env.Command(curPDFs, py, "python3 $SOURCE")
  pdfs.extend(curPDFs)
  env.Depends(curPDFs, dependencies)
  
  # save list of *.pgf files
  pgfs.extend([x[:-4] + ".pgf" for x in curPDFs])

# *.pdf files depend on helper scripts (local helper *.py files and global tools)
env.Depends(pdfs, helperPys)

# don't delete PDFs before calling Python scripts
env.Precious(pdfs)

# LuaLaTeX depends on pre-made graphics as well
pdfs.extend(pre)

# check dependencies for rasterization of book cover
Helper.checkProgramInstalled(env, "inkscape", fail=True)
Helper.checkProgramInstalled(env, "convert", fail=True)

# cover DPI settings
coverPrintDPI  = 500
coverScreenDPI = 100

# cover file paths
coverSVG = os.path.join("pre", "cover.svgz")
coverPrintPNG  = os.path.join(env["BUILD_DIR"].abspath, "coverPrint.png")
coverScreenPNG = os.path.join(env["BUILD_DIR"].abspath, "coverScreen.png")
coverPrintPDF  = os.path.join(env["BUILD_DIR"].abspath, "coverPrint.pdf")
coverScreenPDF = os.path.join(env["BUILD_DIR"].abspath, "coverScreen.pdf")

for coverDPI, coverPNG, coverPDF in \
      [(coverPrintDPI,  coverPrintPNG,  coverPrintPDF),
       (coverScreenDPI, coverScreenPNG, coverScreenPDF)]:
  # rasterize cover
  env.Command(coverPNG, coverSVG,
              "inkscape --export-png=$TARGET --export-area-page "
              "--export-dpi={} $SOURCE".format(coverDPI))
  # convert from PNG to PDF with ImageMagick
  env.Command(coverPDF, coverPNG,
              "convert $SOURCE -density {} -units pixelsperinch "
              "-rotate 270 -flatten $TARGET".format(coverDPI))
  # compress resulting PDF
  env.AddPostAction(coverPDF, Helper.compressPDFs)

# make LaTeX depend on coverScreenPDF
pdfs.append(coverScreenPDF)

Return("pdfs")
