# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pysgpp_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pysgpp_swig')
    _pysgpp_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pysgpp_swig', [dirname(__file__)])
        except ImportError:
            import _pysgpp_swig
            return _pysgpp_swig
        try:
            _mod = imp.load_module('_pysgpp_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pysgpp_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pysgpp_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


M_E = _pysgpp_swig.M_E
M_LOG2E = _pysgpp_swig.M_LOG2E
M_LOG10E = _pysgpp_swig.M_LOG10E
M_LN2 = _pysgpp_swig.M_LN2
M_LN10 = _pysgpp_swig.M_LN10
M_PI = _pysgpp_swig.M_PI
M_PI_2 = _pysgpp_swig.M_PI_2
M_PI_4 = _pysgpp_swig.M_PI_4
M_1_PI = _pysgpp_swig.M_1_PI
M_2_PI = _pysgpp_swig.M_2_PI
M_2_SQRTPI = _pysgpp_swig.M_2_SQRTPI
M_SQRT2 = _pysgpp_swig.M_SQRT2
M_SQRT1_2 = _pysgpp_swig.M_SQRT1_2
M_1_SQRT2PI = _pysgpp_swig.M_1_SQRT2PI
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _pysgpp_swig.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _pysgpp_swig.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pysgpp_swig.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _pysgpp_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _pysgpp_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pysgpp_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pysgpp_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pysgpp_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pysgpp_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pysgpp_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _pysgpp_swig.SHARED_PTR_DISOWN
class unsignedIntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unsignedIntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unsignedIntArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        this = _pysgpp_swig.new_unsignedIntArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_unsignedIntArray
    __del__ = lambda self: None

    def __getitem__(self, index: 'size_t') -> "unsigned int":
        return _pysgpp_swig.unsignedIntArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'unsigned int') -> "void":
        return _pysgpp_swig.unsignedIntArray___setitem__(self, index, value)

    def cast(self) -> "unsigned int *":
        return _pysgpp_swig.unsignedIntArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_pysgpp_swig.unsignedIntArray_frompointer)
    else:
        frompointer = _pysgpp_swig.unsignedIntArray_frompointer
unsignedIntArray_swigregister = _pysgpp_swig.unsignedIntArray_swigregister
unsignedIntArray_swigregister(unsignedIntArray)

def unsignedIntArray_frompointer(t: 'unsigned int *') -> "unsignedIntArray *":
    return _pysgpp_swig.unsignedIntArray_frompointer(t)
unsignedIntArray_frompointer = _pysgpp_swig.unsignedIntArray_frompointer

class BoolArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        this = _pysgpp_swig.new_BoolArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BoolArray
    __del__ = lambda self: None

    def __getitem__(self, index: 'size_t') -> "bool":
        return _pysgpp_swig.BoolArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'bool') -> "void":
        return _pysgpp_swig.BoolArray___setitem__(self, index, value)

    def cast(self) -> "bool *":
        return _pysgpp_swig.BoolArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_pysgpp_swig.BoolArray_frompointer)
    else:
        frompointer = _pysgpp_swig.BoolArray_frompointer
BoolArray_swigregister = _pysgpp_swig.BoolArray_swigregister
BoolArray_swigregister(BoolArray)

def BoolArray_frompointer(t: 'bool *') -> "BoolArray *":
    return _pysgpp_swig.BoolArray_frompointer(t)
BoolArray_frompointer = _pysgpp_swig.BoolArray_frompointer

class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        this = _pysgpp_swig.new_IntArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_IntArray
    __del__ = lambda self: None

    def __getitem__(self, index: 'size_t') -> "int":
        return _pysgpp_swig.IntArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'int') -> "void":
        return _pysgpp_swig.IntArray___setitem__(self, index, value)

    def cast(self) -> "int *":
        return _pysgpp_swig.IntArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_pysgpp_swig.IntArray_frompointer)
    else:
        frompointer = _pysgpp_swig.IntArray_frompointer
IntArray_swigregister = _pysgpp_swig.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(t: 'int *') -> "IntArray *":
    return _pysgpp_swig.IntArray_frompointer(t)
IntArray_frompointer = _pysgpp_swig.IntArray_frompointer

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _pysgpp_swig.IntVector___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _pysgpp_swig.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.IntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _pysgpp_swig.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _pysgpp_swig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _pysgpp_swig.IntVector_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _pysgpp_swig.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _pysgpp_swig.IntVector_size(self)

    def swap(self, v: 'IntVector') -> "void":
        return _pysgpp_swig.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _pysgpp_swig.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _pysgpp_swig.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _pysgpp_swig.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _pysgpp_swig.IntVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _pysgpp_swig.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _pysgpp_swig.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _pysgpp_swig.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _pysgpp_swig.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _pysgpp_swig.IntVector_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _pysgpp_swig.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.IntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _pysgpp_swig.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _pysgpp_swig.IntVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pysgpp_swig.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.IntIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.IntIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.IntIntVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _pysgpp_swig.IntIntVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::vector< int > >::difference_type', j: 'std::vector< std::vector< int > >::difference_type') -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _pysgpp_swig.IntIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.IntIntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::vector< int > >::difference_type', j: 'std::vector< std::vector< int > >::difference_type') -> "void":
        return _pysgpp_swig.IntIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.IntIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _pysgpp_swig.IntIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.IntIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _pysgpp_swig.IntIntVector_pop(self)

    def append(self, x: 'IntVector') -> "void":
        return _pysgpp_swig.IntIntVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.IntIntVector_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _pysgpp_swig.IntIntVector_size(self)

    def swap(self, v: 'IntIntVector') -> "void":
        return _pysgpp_swig.IntIntVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _pysgpp_swig.IntIntVector_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _pysgpp_swig.IntIntVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _pysgpp_swig.IntIntVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _pysgpp_swig.IntIntVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.IntIntVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _pysgpp_swig.IntIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.IntIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _pysgpp_swig.IntIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_IntIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'IntVector') -> "void":
        return _pysgpp_swig.IntIntVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _pysgpp_swig.IntIntVector_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _pysgpp_swig.IntIntVector_back(self)

    def assign(self, n: 'std::vector< std::vector< int > >::size_type', x: 'IntVector') -> "void":
        return _pysgpp_swig.IntIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.IntIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.IntIntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::vector< int > >::size_type') -> "void":
        return _pysgpp_swig.IntIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _pysgpp_swig.IntIntVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_IntIntVector
    __del__ = lambda self: None
IntIntVector_swigregister = _pysgpp_swig.IntIntVector_swigregister
IntIntVector_swigregister(IntIntVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _pysgpp_swig.BoolVector___len__(self)

    def __getslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "std::vector< bool,std::allocator< bool > > *":
        return _pysgpp_swig.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "void":
        return _pysgpp_swig.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector_pop(self)

    def append(self, x: 'std::vector< bool >::value_type') -> "void":
        return _pysgpp_swig.BoolVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _pysgpp_swig.BoolVector_size(self)

    def swap(self, v: 'BoolVector') -> "void":
        return _pysgpp_swig.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _pysgpp_swig.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _pysgpp_swig.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _pysgpp_swig.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _pysgpp_swig.BoolVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _pysgpp_swig.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _pysgpp_swig.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_BoolVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< bool >::value_type') -> "void":
        return _pysgpp_swig.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _pysgpp_swig.BoolVector_back(self)

    def assign(self, n: 'std::vector< bool >::size_type', x: 'std::vector< bool >::value_type') -> "void":
        return _pysgpp_swig.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.BoolVector_insert(self, *args)

    def reserve(self, n: 'std::vector< bool >::size_type') -> "void":
        return _pysgpp_swig.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _pysgpp_swig.BoolVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _pysgpp_swig.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _pysgpp_swig.DoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _pysgpp_swig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _pysgpp_swig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _pysgpp_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _pysgpp_swig.DoubleVector_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _pysgpp_swig.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _pysgpp_swig.DoubleVector_size(self)

    def swap(self, v: 'DoubleVector') -> "void":
        return _pysgpp_swig.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _pysgpp_swig.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _pysgpp_swig.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _pysgpp_swig.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _pysgpp_swig.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _pysgpp_swig.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _pysgpp_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _pysgpp_swig.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _pysgpp_swig.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _pysgpp_swig.DoubleVector_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _pysgpp_swig.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.DoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _pysgpp_swig.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _pysgpp_swig.DoubleVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pysgpp_swig.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.FloatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.FloatVector___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _pysgpp_swig.FloatVector___len__(self)

    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        return _pysgpp_swig.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.FloatVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        return _pysgpp_swig.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _pysgpp_swig.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.FloatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _pysgpp_swig.FloatVector_pop(self)

    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _pysgpp_swig.FloatVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.FloatVector_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _pysgpp_swig.FloatVector_size(self)

    def swap(self, v: 'FloatVector') -> "void":
        return _pysgpp_swig.FloatVector_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _pysgpp_swig.FloatVector_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _pysgpp_swig.FloatVector_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _pysgpp_swig.FloatVector_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _pysgpp_swig.FloatVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.FloatVector_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _pysgpp_swig.FloatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.FloatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _pysgpp_swig.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _pysgpp_swig.FloatVector_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _pysgpp_swig.FloatVector_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _pysgpp_swig.FloatVector_back(self)

    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        return _pysgpp_swig.FloatVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.FloatVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.FloatVector_insert(self, *args)

    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        return _pysgpp_swig.FloatVector_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _pysgpp_swig.FloatVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _pysgpp_swig.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class IndexVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.IndexVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.IndexVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.IndexVector___bool__(self)

    def __len__(self) -> "std::vector< size_t >::size_type":
        return _pysgpp_swig.IndexVector___len__(self)

    def __getslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "std::vector< size_t,std::allocator< size_t > > *":
        return _pysgpp_swig.IndexVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.IndexVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "void":
        return _pysgpp_swig.IndexVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.IndexVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< size_t >::value_type const &":
        return _pysgpp_swig.IndexVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.IndexVector___setitem__(self, *args)

    def pop(self) -> "std::vector< size_t >::value_type":
        return _pysgpp_swig.IndexVector_pop(self)

    def append(self, x: 'std::vector< size_t >::value_type const &') -> "void":
        return _pysgpp_swig.IndexVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.IndexVector_empty(self)

    def size(self) -> "std::vector< size_t >::size_type":
        return _pysgpp_swig.IndexVector_size(self)

    def swap(self, v: 'IndexVector') -> "void":
        return _pysgpp_swig.IndexVector_swap(self, v)

    def begin(self) -> "std::vector< size_t >::iterator":
        return _pysgpp_swig.IndexVector_begin(self)

    def end(self) -> "std::vector< size_t >::iterator":
        return _pysgpp_swig.IndexVector_end(self)

    def rbegin(self) -> "std::vector< size_t >::reverse_iterator":
        return _pysgpp_swig.IndexVector_rbegin(self)

    def rend(self) -> "std::vector< size_t >::reverse_iterator":
        return _pysgpp_swig.IndexVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.IndexVector_clear(self)

    def get_allocator(self) -> "std::vector< size_t >::allocator_type":
        return _pysgpp_swig.IndexVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.IndexVector_pop_back(self)

    def erase(self, *args) -> "std::vector< size_t >::iterator":
        return _pysgpp_swig.IndexVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_IndexVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< size_t >::value_type const &') -> "void":
        return _pysgpp_swig.IndexVector_push_back(self, x)

    def front(self) -> "std::vector< size_t >::value_type const &":
        return _pysgpp_swig.IndexVector_front(self)

    def back(self) -> "std::vector< size_t >::value_type const &":
        return _pysgpp_swig.IndexVector_back(self)

    def assign(self, n: 'std::vector< size_t >::size_type', x: 'std::vector< size_t >::value_type const &') -> "void":
        return _pysgpp_swig.IndexVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.IndexVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.IndexVector_insert(self, *args)

    def reserve(self, n: 'std::vector< size_t >::size_type') -> "void":
        return _pysgpp_swig.IndexVector_reserve(self, n)

    def capacity(self) -> "std::vector< size_t >::size_type":
        return _pysgpp_swig.IndexVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_IndexVector
    __del__ = lambda self: None
IndexVector_swigregister = _pysgpp_swig.IndexVector_swigregister
IndexVector_swigregister(IndexVector)

class IndexValPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_IndexValPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _pysgpp_swig.IndexValPair_first_set
    __swig_getmethods__["first"] = _pysgpp_swig.IndexValPair_first_get
    if _newclass:
        first = _swig_property(_pysgpp_swig.IndexValPair_first_get, _pysgpp_swig.IndexValPair_first_set)
    __swig_setmethods__["second"] = _pysgpp_swig.IndexValPair_second_set
    __swig_getmethods__["second"] = _pysgpp_swig.IndexValPair_second_get
    if _newclass:
        second = _swig_property(_pysgpp_swig.IndexValPair_second_get, _pysgpp_swig.IndexValPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pysgpp_swig.delete_IndexValPair
    __del__ = lambda self: None
IndexValPair_swigregister = _pysgpp_swig.IndexValPair_swigregister
IndexValPair_swigregister(IndexValPair)

class IndexValVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexValVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexValVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.IndexValVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.IndexValVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.IndexValVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< size_t,double > >::size_type":
        return _pysgpp_swig.IndexValVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::pair< size_t,double > >::difference_type', j: 'std::vector< std::pair< size_t,double > >::difference_type') -> "std::vector< std::pair< size_t,double >,std::allocator< std::pair< size_t,double > > > *":
        return _pysgpp_swig.IndexValVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.IndexValVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::pair< size_t,double > >::difference_type', j: 'std::vector< std::pair< size_t,double > >::difference_type') -> "void":
        return _pysgpp_swig.IndexValVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.IndexValVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< size_t,double > >::value_type const &":
        return _pysgpp_swig.IndexValVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.IndexValVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< size_t,double > >::value_type":
        return _pysgpp_swig.IndexValVector_pop(self)

    def append(self, x: 'IndexValPair') -> "void":
        return _pysgpp_swig.IndexValVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.IndexValVector_empty(self)

    def size(self) -> "std::vector< std::pair< size_t,double > >::size_type":
        return _pysgpp_swig.IndexValVector_size(self)

    def swap(self, v: 'IndexValVector') -> "void":
        return _pysgpp_swig.IndexValVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< size_t,double > >::iterator":
        return _pysgpp_swig.IndexValVector_begin(self)

    def end(self) -> "std::vector< std::pair< size_t,double > >::iterator":
        return _pysgpp_swig.IndexValVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< size_t,double > >::reverse_iterator":
        return _pysgpp_swig.IndexValVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< size_t,double > >::reverse_iterator":
        return _pysgpp_swig.IndexValVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.IndexValVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< size_t,double > >::allocator_type":
        return _pysgpp_swig.IndexValVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.IndexValVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< size_t,double > >::iterator":
        return _pysgpp_swig.IndexValVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_IndexValVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'IndexValPair') -> "void":
        return _pysgpp_swig.IndexValVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< size_t,double > >::value_type const &":
        return _pysgpp_swig.IndexValVector_front(self)

    def back(self) -> "std::vector< std::pair< size_t,double > >::value_type const &":
        return _pysgpp_swig.IndexValVector_back(self)

    def assign(self, n: 'std::vector< std::pair< size_t,double > >::size_type', x: 'IndexValPair') -> "void":
        return _pysgpp_swig.IndexValVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.IndexValVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.IndexValVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::pair< size_t,double > >::size_type') -> "void":
        return _pysgpp_swig.IndexValVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< size_t,double > >::size_type":
        return _pysgpp_swig.IndexValVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_IndexValVector
    __del__ = lambda self: None
IndexValVector_swigregister = _pysgpp_swig.IndexValVector_swigregister
IndexValVector_swigregister(IndexValVector)

class IndexList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexList, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.IndexList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.IndexList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.IndexList___bool__(self)

    def __len__(self) -> "std::list< size_t >::size_type":
        return _pysgpp_swig.IndexList___len__(self)

    def __getslice__(self, i: 'std::list< size_t >::difference_type', j: 'std::list< size_t >::difference_type') -> "std::list< size_t,std::allocator< size_t > > *":
        return _pysgpp_swig.IndexList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.IndexList___setslice__(self, *args)

    def __delslice__(self, i: 'std::list< size_t >::difference_type', j: 'std::list< size_t >::difference_type') -> "void":
        return _pysgpp_swig.IndexList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.IndexList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::list< size_t >::value_type const &":
        return _pysgpp_swig.IndexList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.IndexList___setitem__(self, *args)

    def pop(self) -> "std::list< size_t >::value_type":
        return _pysgpp_swig.IndexList_pop(self)

    def append(self, x: 'std::list< size_t >::value_type const &') -> "void":
        return _pysgpp_swig.IndexList_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.IndexList_empty(self)

    def size(self) -> "std::list< size_t >::size_type":
        return _pysgpp_swig.IndexList_size(self)

    def swap(self, v: 'IndexList') -> "void":
        return _pysgpp_swig.IndexList_swap(self, v)

    def begin(self) -> "std::list< size_t >::iterator":
        return _pysgpp_swig.IndexList_begin(self)

    def end(self) -> "std::list< size_t >::iterator":
        return _pysgpp_swig.IndexList_end(self)

    def rbegin(self) -> "std::list< size_t >::reverse_iterator":
        return _pysgpp_swig.IndexList_rbegin(self)

    def rend(self) -> "std::list< size_t >::reverse_iterator":
        return _pysgpp_swig.IndexList_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.IndexList_clear(self)

    def get_allocator(self) -> "std::list< size_t >::allocator_type":
        return _pysgpp_swig.IndexList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.IndexList_pop_back(self)

    def erase(self, *args) -> "std::list< size_t >::iterator":
        return _pysgpp_swig.IndexList_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_IndexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::list< size_t >::value_type const &') -> "void":
        return _pysgpp_swig.IndexList_push_back(self, x)

    def front(self) -> "std::list< size_t >::value_type const &":
        return _pysgpp_swig.IndexList_front(self)

    def back(self) -> "std::list< size_t >::value_type const &":
        return _pysgpp_swig.IndexList_back(self)

    def assign(self, n: 'std::list< size_t >::size_type', x: 'std::list< size_t >::value_type const &') -> "void":
        return _pysgpp_swig.IndexList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.IndexList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.IndexList_insert(self, *args)

    def pop_front(self) -> "void":
        return _pysgpp_swig.IndexList_pop_front(self)

    def push_front(self, x: 'std::list< size_t >::value_type const &') -> "void":
        return _pysgpp_swig.IndexList_push_front(self, x)

    def reverse(self) -> "void":
        return _pysgpp_swig.IndexList_reverse(self)
    __swig_destroy__ = _pysgpp_swig.delete_IndexList
    __del__ = lambda self: None
IndexList_swigregister = _pysgpp_swig.IndexList_swigregister
IndexList_swigregister(IndexList)

class refinement_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, refinement_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, refinement_key, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_refinement_key(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _pysgpp_swig.refinement_key_first_set
    __swig_getmethods__["first"] = _pysgpp_swig.refinement_key_first_get
    if _newclass:
        first = _swig_property(_pysgpp_swig.refinement_key_first_get, _pysgpp_swig.refinement_key_first_set)
    __swig_setmethods__["second"] = _pysgpp_swig.refinement_key_second_set
    __swig_getmethods__["second"] = _pysgpp_swig.refinement_key_second_get
    if _newclass:
        second = _swig_property(_pysgpp_swig.refinement_key_second_get, _pysgpp_swig.refinement_key_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pysgpp_swig.delete_refinement_key
    __del__ = lambda self: None
refinement_key_swigregister = _pysgpp_swig.refinement_key_swigregister
refinement_key_swigregister(refinement_key)

class refinement_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, refinement_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, refinement_map, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.refinement_map_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.refinement_map___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.refinement_map___bool__(self)

    def __len__(self) -> "std::map< std::pair< size_t,unsigned int >,double >::size_type":
        return _pysgpp_swig.refinement_map___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'refinement_key') -> "std::map< std::pair< size_t,unsigned int >,double >::mapped_type const &":
        return _pysgpp_swig.refinement_map___getitem__(self, key)

    def __delitem__(self, key: 'refinement_key') -> "void":
        return _pysgpp_swig.refinement_map___delitem__(self, key)

    def has_key(self, key: 'refinement_key') -> "bool":
        return _pysgpp_swig.refinement_map_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_keys(self)

    def values(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_values(self)

    def items(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_items(self)

    def __contains__(self, key: 'refinement_key') -> "bool":
        return _pysgpp_swig.refinement_map___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.refinement_map_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.refinement_map_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.refinement_map___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _pysgpp_swig.refinement_map_asdict(self)

    def __init__(self, *args):
        this = _pysgpp_swig.new_refinement_map(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _pysgpp_swig.refinement_map_empty(self)

    def size(self) -> "std::map< std::pair< size_t,unsigned int >,double >::size_type":
        return _pysgpp_swig.refinement_map_size(self)

    def swap(self, v: 'refinement_map') -> "void":
        return _pysgpp_swig.refinement_map_swap(self, v)

    def begin(self) -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_begin(self)

    def end(self) -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_end(self)

    def rbegin(self) -> "std::map< std::pair< size_t,unsigned int >,double >::reverse_iterator":
        return _pysgpp_swig.refinement_map_rbegin(self)

    def rend(self) -> "std::map< std::pair< size_t,unsigned int >,double >::reverse_iterator":
        return _pysgpp_swig.refinement_map_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.refinement_map_clear(self)

    def get_allocator(self) -> "std::map< std::pair< size_t,unsigned int >,double >::allocator_type":
        return _pysgpp_swig.refinement_map_get_allocator(self)

    def count(self, x: 'refinement_key') -> "std::map< std::pair< size_t,unsigned int >,double >::size_type":
        return _pysgpp_swig.refinement_map_count(self, x)

    def erase(self, *args) -> "void":
        return _pysgpp_swig.refinement_map_erase(self, *args)

    def find(self, x: 'refinement_key') -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_find(self, x)

    def lower_bound(self, x: 'refinement_key') -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_lower_bound(self, x)

    def upper_bound(self, x: 'refinement_key') -> "std::map< std::pair< size_t,unsigned int >,double >::iterator":
        return _pysgpp_swig.refinement_map_upper_bound(self, x)
    __swig_destroy__ = _pysgpp_swig.delete_refinement_map
    __del__ = lambda self: None
refinement_map_swigregister = _pysgpp_swig.refinement_map_swigregister
refinement_map_swigregister(refinement_map)

class VecVecSizeT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecSizeT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecSizeT, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.VecVecSizeT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.VecVecSizeT___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.VecVecSizeT___bool__(self)

    def __len__(self) -> "std::vector< std::vector< size_t > >::size_type":
        return _pysgpp_swig.VecVecSizeT___len__(self)

    def __getslice__(self, i: 'std::vector< std::vector< size_t > >::difference_type', j: 'std::vector< std::vector< size_t > >::difference_type') -> "std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > *":
        return _pysgpp_swig.VecVecSizeT___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.VecVecSizeT___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::vector< size_t > >::difference_type', j: 'std::vector< std::vector< size_t > >::difference_type') -> "void":
        return _pysgpp_swig.VecVecSizeT___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.VecVecSizeT___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< size_t > >::value_type const &":
        return _pysgpp_swig.VecVecSizeT___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.VecVecSizeT___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< size_t > >::value_type":
        return _pysgpp_swig.VecVecSizeT_pop(self)

    def append(self, x: 'IndexVector') -> "void":
        return _pysgpp_swig.VecVecSizeT_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.VecVecSizeT_empty(self)

    def size(self) -> "std::vector< std::vector< size_t > >::size_type":
        return _pysgpp_swig.VecVecSizeT_size(self)

    def swap(self, v: 'VecVecSizeT') -> "void":
        return _pysgpp_swig.VecVecSizeT_swap(self, v)

    def begin(self) -> "std::vector< std::vector< size_t > >::iterator":
        return _pysgpp_swig.VecVecSizeT_begin(self)

    def end(self) -> "std::vector< std::vector< size_t > >::iterator":
        return _pysgpp_swig.VecVecSizeT_end(self)

    def rbegin(self) -> "std::vector< std::vector< size_t > >::reverse_iterator":
        return _pysgpp_swig.VecVecSizeT_rbegin(self)

    def rend(self) -> "std::vector< std::vector< size_t > >::reverse_iterator":
        return _pysgpp_swig.VecVecSizeT_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.VecVecSizeT_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< size_t > >::allocator_type":
        return _pysgpp_swig.VecVecSizeT_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.VecVecSizeT_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< size_t > >::iterator":
        return _pysgpp_swig.VecVecSizeT_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_VecVecSizeT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'IndexVector') -> "void":
        return _pysgpp_swig.VecVecSizeT_push_back(self, x)

    def front(self) -> "std::vector< std::vector< size_t > >::value_type const &":
        return _pysgpp_swig.VecVecSizeT_front(self)

    def back(self) -> "std::vector< std::vector< size_t > >::value_type const &":
        return _pysgpp_swig.VecVecSizeT_back(self)

    def assign(self, n: 'std::vector< std::vector< size_t > >::size_type', x: 'IndexVector') -> "void":
        return _pysgpp_swig.VecVecSizeT_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.VecVecSizeT_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.VecVecSizeT_insert(self, *args)

    def reserve(self, n: 'std::vector< std::vector< size_t > >::size_type') -> "void":
        return _pysgpp_swig.VecVecSizeT_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< size_t > >::size_type":
        return _pysgpp_swig.VecVecSizeT_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_VecVecSizeT
    __del__ = lambda self: None
VecVecSizeT_swigregister = _pysgpp_swig.VecVecSizeT_swigregister
VecVecSizeT_swigregister(VecVecSizeT)

class DataVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.DataVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.DataVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.DataVectorVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::DataVector >::size_type":
        return _pysgpp_swig.DataVectorVector___len__(self)

    def __getslice__(self, i: 'std::vector< sgpp::base::DataVector >::difference_type', j: 'std::vector< sgpp::base::DataVector >::difference_type') -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > *":
        return _pysgpp_swig.DataVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< sgpp::base::DataVector >::difference_type', j: 'std::vector< sgpp::base::DataVector >::difference_type') -> "void":
        return _pysgpp_swig.DataVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::DataVector >::value_type const &":
        return _pysgpp_swig.DataVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::DataVector >::value_type":
        return _pysgpp_swig.DataVectorVector_pop(self)

    def append(self, x: 'DataVector') -> "void":
        return _pysgpp_swig.DataVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.DataVectorVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::DataVector >::size_type":
        return _pysgpp_swig.DataVectorVector_size(self)

    def swap(self, v: 'DataVectorVector') -> "void":
        return _pysgpp_swig.DataVectorVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::DataVector >::iterator":
        return _pysgpp_swig.DataVectorVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::DataVector >::iterator":
        return _pysgpp_swig.DataVectorVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::DataVector >::reverse_iterator":
        return _pysgpp_swig.DataVectorVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::DataVector >::reverse_iterator":
        return _pysgpp_swig.DataVectorVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.DataVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::DataVector >::allocator_type":
        return _pysgpp_swig.DataVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.DataVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::DataVector >::iterator":
        return _pysgpp_swig.DataVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_DataVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'DataVector') -> "void":
        return _pysgpp_swig.DataVectorVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::DataVector >::value_type const &":
        return _pysgpp_swig.DataVectorVector_front(self)

    def back(self) -> "std::vector< sgpp::base::DataVector >::value_type const &":
        return _pysgpp_swig.DataVectorVector_back(self)

    def assign(self, n: 'std::vector< sgpp::base::DataVector >::size_type', x: 'DataVector') -> "void":
        return _pysgpp_swig.DataVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.DataVectorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< sgpp::base::DataVector >::size_type') -> "void":
        return _pysgpp_swig.DataVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::DataVector >::size_type":
        return _pysgpp_swig.DataVectorVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_DataVectorVector
    __del__ = lambda self: None
DataVectorVector_swigregister = _pysgpp_swig.DataVectorVector_swigregister
DataVectorVector_swigregister(DataVectorVector)

class SBasis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBasis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBasis, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def eval(self, level: 'unsigned int', index: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBasis_eval(self, level, index, x)

    def getDegree(self) -> "size_t":
        return _pysgpp_swig.SBasis_getDegree(self)

    def getIntegral(self, level: 'unsigned int', index: 'unsigned int') -> "double":
        return _pysgpp_swig.SBasis_getIntegral(self, level, index)
    __swig_destroy__ = _pysgpp_swig.delete_SBasis
    __del__ = lambda self: None
SBasis_swigregister = _pysgpp_swig.SBasis_swigregister
SBasis_swigregister(SBasis)


def free_array(ptr: 'PyObject *') -> "void":
    return _pysgpp_swig.free_array(ptr)
free_array = _pysgpp_swig.free_array
class DataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_DataVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resize(self, size: 'size_t') -> "void":
        return _pysgpp_swig.DataVector_resize(self, size)

    def resizeZero(self, size: 'size_t') -> "void":
        return _pysgpp_swig.DataVector_resizeZero(self, size)

    def append(self, *args) -> "size_t":
        return _pysgpp_swig.DataVector_append(self, *args)

    def restructure(self, arg2: 'IndexVector') -> "void":
        return _pysgpp_swig.DataVector_restructure(self, arg2)

    def setAll(self, value: 'double') -> "void":
        return _pysgpp_swig.DataVector_setAll(self, value)

    def copyFrom(self, vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataVector_copyFrom(self, vec)

    def assign(self, vec: 'DataVector') -> "sgpp::base::DataVector &":
        return _pysgpp_swig.DataVector_assign(self, vec)

    def get(self, i: 'size_t') -> "double":
        return _pysgpp_swig.DataVector_get(self, i)

    def set(self, i: 'size_t', value: 'double') -> "void":
        return _pysgpp_swig.DataVector_set(self, i, value)

    def add(self, vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataVector_add(self, vec)

    def sub(self, vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataVector_sub(self, vec)

    def componentwise_mult(self, vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataVector_componentwise_mult(self, vec)

    def componentwise_div(self, vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataVector_componentwise_div(self, vec)

    def mult(self, scalar: 'double') -> "void":
        return _pysgpp_swig.DataVector_mult(self, scalar)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataVector_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataVector_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataVector_abs(self)

    def sum(self) -> "double":
        return _pysgpp_swig.DataVector_sum(self)

    def min(self) -> "double":
        return _pysgpp_swig.DataVector_min(self)

    def max(self) -> "double":
        return _pysgpp_swig.DataVector_max(self)

    def minmax(self) -> "void":
        return _pysgpp_swig.DataVector_minmax(self)

    def maxNorm(self) -> "double":
        return _pysgpp_swig.DataVector_maxNorm(self)

    def RMSNorm(self) -> "double":
        return _pysgpp_swig.DataVector_RMSNorm(self)

    def l2Norm(self) -> "double":
        return _pysgpp_swig.DataVector_l2Norm(self)

    def dotProduct(self, vec: 'DataVector') -> "double":
        return _pysgpp_swig.DataVector_dotProduct(self, vec)

    def axpy(self, alpha: 'double', x: 'DataVector') -> "void":
        return _pysgpp_swig.DataVector_axpy(self, alpha, x)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataVector_getSize(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataVector_getNumberNonZero(self)

    def partitionClasses(self, border: 'double') -> "void":
        return _pysgpp_swig.DataVector_partitionClasses(self, border)

    def normalize(self, *args) -> "void":
        return _pysgpp_swig.DataVector_normalize(self, *args)

    def toString(self) -> "std::string":
        return _pysgpp_swig.DataVector_toString(self)

    def toFile(self, fileName: 'std::string const &') -> "void":
        return _pysgpp_swig.DataVector_toFile(self, fileName)
    if _newclass:
        fromFile = staticmethod(_pysgpp_swig.DataVector_fromFile)
    else:
        fromFile = _pysgpp_swig.DataVector_fromFile

    def __array(self, datavector: 'PyObject *') -> "PyObject *":
        return _pysgpp_swig.DataVector___array(self, datavector)

    def array(self):   
      return self.__array(self)

    def __len__(self):
        return self.getSize()

    def __getitem__(self, i):
        return self.get(i)

    def __setitem__(self, i, value):
        self.set(i, value)

    def __str__(self):
        return self.toString()

    __swig_destroy__ = _pysgpp_swig.delete_DataVector
    __del__ = lambda self: None
DataVector_swigregister = _pysgpp_swig.DataVector_swigregister
DataVector_swigregister(DataVector)

def DataVector_fromFile(fileName: 'std::string const &') -> "sgpp::base::DataVector":
    return _pysgpp_swig.DataVector_fromFile(fileName)
DataVector_fromFile = _pysgpp_swig.DataVector_fromFile

class DataMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_DataMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resizeRows(self, nrows: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrix_resizeRows(self, nrows)

    def resizeRowsCols(self, nrows: 'size_t', ncols: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrix_resizeRowsCols(self, nrows, ncols)

    def resizeQuadratic(self, size: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrix_resizeQuadratic(self, size)

    def resizeZero(self, nrows: 'size_t', ncols: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrix_resizeZero(self, nrows, ncols)

    def resizeToSubMatrix(self, row_1: 'size_t', col_1: 'size_t', row_2: 'size_t', col_2: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrix_resizeToSubMatrix(self, row_1, col_1, row_2, col_2)

    def reserveAdditionalRows(self, inc_nrows: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrix_reserveAdditionalRows(self, inc_nrows)

    def appendRow(self, *args) -> "size_t":
        return _pysgpp_swig.DataMatrix_appendRow(self, *args)

    def appendCol(self, vec: 'DataVector') -> "size_t":
        return _pysgpp_swig.DataMatrix_appendCol(self, vec)

    def setAll(self, value: 'double') -> "void":
        return _pysgpp_swig.DataMatrix_setAll(self, value)

    def copyFrom(self, matr: 'DataMatrix') -> "void":
        return _pysgpp_swig.DataMatrix_copyFrom(self, matr)

    def transpose(self) -> "void":
        return _pysgpp_swig.DataMatrix_transpose(self)

    def get(self, row: 'size_t', col: 'size_t') -> "double":
        return _pysgpp_swig.DataMatrix_get(self, row, col)

    def set(self, row: 'size_t', col: 'size_t', value: 'double') -> "void":
        return _pysgpp_swig.DataMatrix_set(self, row, col, value)

    def getRow(self, row: 'size_t', vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataMatrix_getRow(self, row, vec)

    def setRow(self, row: 'size_t', vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataMatrix_setRow(self, row, vec)

    def getColumn(self, col: 'size_t', vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataMatrix_getColumn(self, col, vec)

    def setColumn(self, col: 'size_t', vec: 'DataVector') -> "void":
        return _pysgpp_swig.DataMatrix_setColumn(self, col, vec)

    def getPointer(self) -> "double *":
        return _pysgpp_swig.DataMatrix_getPointer(self)

    def add(self, matr: 'DataMatrix') -> "void":
        return _pysgpp_swig.DataMatrix_add(self, matr)

    def sub(self, matr: 'DataMatrix') -> "void":
        return _pysgpp_swig.DataMatrix_sub(self, matr)

    def componentwise_mult(self, matr: 'DataMatrix') -> "void":
        return _pysgpp_swig.DataMatrix_componentwise_mult(self, matr)

    def componentwise_div(self, matr: 'DataMatrix') -> "void":
        return _pysgpp_swig.DataMatrix_componentwise_div(self, matr)

    def mult(self, scalar: 'double') -> "void":
        return _pysgpp_swig.DataMatrix_mult(self, scalar)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataMatrix_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataMatrix_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataMatrix_abs(self)

    def sum(self) -> "double":
        return _pysgpp_swig.DataMatrix_sum(self)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getSize(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getNumberNonZero(self)

    def getNrows(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getNrows(self)

    def getNcols(self) -> "size_t":
        return _pysgpp_swig.DataMatrix_getNcols(self)

    def normalizeDimension(self, *args) -> "void":
        return _pysgpp_swig.DataMatrix_normalizeDimension(self, *args)

    def min(self, *args) -> "double":
        return _pysgpp_swig.DataMatrix_min(self, *args)

    def max(self, *args) -> "double":
        return _pysgpp_swig.DataMatrix_max(self, *args)

    def minmax(self, *args) -> "void":
        return _pysgpp_swig.DataMatrix_minmax(self, *args)

    def __str__(self) -> "std::string":
        return _pysgpp_swig.DataMatrix___str__(self)

    def toFile(self, fileName: 'std::string const &') -> "void":
        return _pysgpp_swig.DataMatrix_toFile(self, fileName)
    if _newclass:
        fromFile = staticmethod(_pysgpp_swig.DataMatrix_fromFile)
    else:
        fromFile = _pysgpp_swig.DataMatrix_fromFile

    def __array(self, datavector: 'PyObject *') -> "PyObject *":
        return _pysgpp_swig.DataMatrix___array(self, datavector)

    def array(self):
      return self.__array(self)

    __swig_destroy__ = _pysgpp_swig.delete_DataMatrix
    __del__ = lambda self: None
DataMatrix_swigregister = _pysgpp_swig.DataMatrix_swigregister
DataMatrix_swigregister(DataMatrix)

def DataMatrix_fromFile(fileName: 'std::string const &') -> "sgpp::base::DataMatrix":
    return _pysgpp_swig.DataMatrix_fromFile(fileName)
DataMatrix_fromFile = _pysgpp_swig.DataMatrix_fromFile

class RegularGridConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegularGridConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegularGridConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_"] = _pysgpp_swig.RegularGridConfiguration_type__set
    __swig_getmethods__["type_"] = _pysgpp_swig.RegularGridConfiguration_type__get
    if _newclass:
        type_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_type__get, _pysgpp_swig.RegularGridConfiguration_type__set)
    __swig_setmethods__["dim_"] = _pysgpp_swig.RegularGridConfiguration_dim__set
    __swig_getmethods__["dim_"] = _pysgpp_swig.RegularGridConfiguration_dim__get
    if _newclass:
        dim_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_dim__get, _pysgpp_swig.RegularGridConfiguration_dim__set)
    __swig_setmethods__["level_"] = _pysgpp_swig.RegularGridConfiguration_level__set
    __swig_getmethods__["level_"] = _pysgpp_swig.RegularGridConfiguration_level__get
    if _newclass:
        level_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_level__get, _pysgpp_swig.RegularGridConfiguration_level__set)
    __swig_setmethods__["maxDegree_"] = _pysgpp_swig.RegularGridConfiguration_maxDegree__set
    __swig_getmethods__["maxDegree_"] = _pysgpp_swig.RegularGridConfiguration_maxDegree__get
    if _newclass:
        maxDegree_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_maxDegree__get, _pysgpp_swig.RegularGridConfiguration_maxDegree__set)
    __swig_setmethods__["boundaryLevel_"] = _pysgpp_swig.RegularGridConfiguration_boundaryLevel__set
    __swig_getmethods__["boundaryLevel_"] = _pysgpp_swig.RegularGridConfiguration_boundaryLevel__get
    if _newclass:
        boundaryLevel_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_boundaryLevel__get, _pysgpp_swig.RegularGridConfiguration_boundaryLevel__set)
    __swig_setmethods__["filename_"] = _pysgpp_swig.RegularGridConfiguration_filename__set
    __swig_getmethods__["filename_"] = _pysgpp_swig.RegularGridConfiguration_filename__get
    if _newclass:
        filename_ = _swig_property(_pysgpp_swig.RegularGridConfiguration_filename__get, _pysgpp_swig.RegularGridConfiguration_filename__set)

    def __init__(self):
        this = _pysgpp_swig.new_RegularGridConfiguration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_RegularGridConfiguration
    __del__ = lambda self: None
RegularGridConfiguration_swigregister = _pysgpp_swig.RegularGridConfiguration_swigregister
RegularGridConfiguration_swigregister(RegularGridConfiguration)

class AdaptivityConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdaptivityConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdaptivityConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numRefinements_"] = _pysgpp_swig.AdaptivityConfiguration_numRefinements__set
    __swig_getmethods__["numRefinements_"] = _pysgpp_swig.AdaptivityConfiguration_numRefinements__get
    if _newclass:
        numRefinements_ = _swig_property(_pysgpp_swig.AdaptivityConfiguration_numRefinements__get, _pysgpp_swig.AdaptivityConfiguration_numRefinements__set)
    __swig_setmethods__["threshold_"] = _pysgpp_swig.AdaptivityConfiguration_threshold__set
    __swig_getmethods__["threshold_"] = _pysgpp_swig.AdaptivityConfiguration_threshold__get
    if _newclass:
        threshold_ = _swig_property(_pysgpp_swig.AdaptivityConfiguration_threshold__get, _pysgpp_swig.AdaptivityConfiguration_threshold__set)
    __swig_setmethods__["maxLevelType_"] = _pysgpp_swig.AdaptivityConfiguration_maxLevelType__set
    __swig_getmethods__["maxLevelType_"] = _pysgpp_swig.AdaptivityConfiguration_maxLevelType__get
    if _newclass:
        maxLevelType_ = _swig_property(_pysgpp_swig.AdaptivityConfiguration_maxLevelType__get, _pysgpp_swig.AdaptivityConfiguration_maxLevelType__set)
    __swig_setmethods__["noPoints_"] = _pysgpp_swig.AdaptivityConfiguration_noPoints__set
    __swig_getmethods__["noPoints_"] = _pysgpp_swig.AdaptivityConfiguration_noPoints__get
    if _newclass:
        noPoints_ = _swig_property(_pysgpp_swig.AdaptivityConfiguration_noPoints__get, _pysgpp_swig.AdaptivityConfiguration_noPoints__set)
    __swig_setmethods__["percent_"] = _pysgpp_swig.AdaptivityConfiguration_percent__set
    __swig_getmethods__["percent_"] = _pysgpp_swig.AdaptivityConfiguration_percent__get
    if _newclass:
        percent_ = _swig_property(_pysgpp_swig.AdaptivityConfiguration_percent__get, _pysgpp_swig.AdaptivityConfiguration_percent__set)
    __swig_setmethods__["errorBasedRefinement"] = _pysgpp_swig.AdaptivityConfiguration_errorBasedRefinement_set
    __swig_getmethods__["errorBasedRefinement"] = _pysgpp_swig.AdaptivityConfiguration_errorBasedRefinement_get
    if _newclass:
        errorBasedRefinement = _swig_property(_pysgpp_swig.AdaptivityConfiguration_errorBasedRefinement_get, _pysgpp_swig.AdaptivityConfiguration_errorBasedRefinement_set)

    def __init__(self):
        this = _pysgpp_swig.new_AdaptivityConfiguration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_AdaptivityConfiguration
    __del__ = lambda self: None
AdaptivityConfiguration_swigregister = _pysgpp_swig.AdaptivityConfiguration_swigregister
AdaptivityConfiguration_swigregister(AdaptivityConfiguration)

GridType_Linear = _pysgpp_swig.GridType_Linear
GridType_LinearStretched = _pysgpp_swig.GridType_LinearStretched
GridType_LinearL0Boundary = _pysgpp_swig.GridType_LinearL0Boundary
GridType_LinearBoundary = _pysgpp_swig.GridType_LinearBoundary
GridType_LinearStretchedBoundary = _pysgpp_swig.GridType_LinearStretchedBoundary
GridType_LinearTruncatedBoundary = _pysgpp_swig.GridType_LinearTruncatedBoundary
GridType_ModLinear = _pysgpp_swig.GridType_ModLinear
GridType_Poly = _pysgpp_swig.GridType_Poly
GridType_PolyBoundary = _pysgpp_swig.GridType_PolyBoundary
GridType_ModPoly = _pysgpp_swig.GridType_ModPoly
GridType_ModWavelet = _pysgpp_swig.GridType_ModWavelet
GridType_ModBspline = _pysgpp_swig.GridType_ModBspline
GridType_Prewavelet = _pysgpp_swig.GridType_Prewavelet
GridType_SquareRoot = _pysgpp_swig.GridType_SquareRoot
GridType_Periodic = _pysgpp_swig.GridType_Periodic
GridType_LinearClenshawCurtisBoundary = _pysgpp_swig.GridType_LinearClenshawCurtisBoundary
GridType_Bspline = _pysgpp_swig.GridType_Bspline
GridType_BsplineBoundary = _pysgpp_swig.GridType_BsplineBoundary
GridType_BsplineClenshawCurtis = _pysgpp_swig.GridType_BsplineClenshawCurtis
GridType_Wavelet = _pysgpp_swig.GridType_Wavelet
GridType_WaveletBoundary = _pysgpp_swig.GridType_WaveletBoundary
GridType_FundamentalSpline = _pysgpp_swig.GridType_FundamentalSpline
GridType_ModFundamentalSpline = _pysgpp_swig.GridType_ModFundamentalSpline
GridType_ModBsplineClenshawCurtis = _pysgpp_swig.GridType_ModBsplineClenshawCurtis
GridType_LinearStencil = _pysgpp_swig.GridType_LinearStencil
GridType_ModLinearStencil = _pysgpp_swig.GridType_ModLinearStencil
GridType_PolyClenshawCurtisBoundary = _pysgpp_swig.GridType_PolyClenshawCurtisBoundary
GridType_PolyClenshawCurtis = _pysgpp_swig.GridType_PolyClenshawCurtis
GridType_LinearClenshawCurtis = _pysgpp_swig.GridType_LinearClenshawCurtis
GridType_ModPolyClenshawCurtis = _pysgpp_swig.GridType_ModPolyClenshawCurtis
GridType_ModLinearClenshawCurtis = _pysgpp_swig.GridType_ModLinearClenshawCurtis
GridType_NakBsplineBoundaryCombigrid = _pysgpp_swig.GridType_NakBsplineBoundaryCombigrid
GridType_NaturalBsplineBoundary = _pysgpp_swig.GridType_NaturalBsplineBoundary
GridType_NotAKnotBsplineBoundary = _pysgpp_swig.GridType_NotAKnotBsplineBoundary
GridType_ModNotAKnotBspline = _pysgpp_swig.GridType_ModNotAKnotBspline
GridType_WeaklyFundamentalSplineBoundary = _pysgpp_swig.GridType_WeaklyFundamentalSplineBoundary
GridType_WeaklyFundamentalNotAKnotSplineBoundary = _pysgpp_swig.GridType_WeaklyFundamentalNotAKnotSplineBoundary
GridType_ModWeaklyFundamentalNotAKnotSpline = _pysgpp_swig.GridType_ModWeaklyFundamentalNotAKnotSpline
GridType_FundamentalSplineBoundary = _pysgpp_swig.GridType_FundamentalSplineBoundary
GridType_FundamentalNotAKnotSplineBoundary = _pysgpp_swig.GridType_FundamentalNotAKnotSplineBoundary
class Grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        createGrid = staticmethod(_pysgpp_swig.Grid_createGrid)
    else:
        createGrid = _pysgpp_swig.Grid_createGrid
    if _newclass:
        createLinearGrid = staticmethod(_pysgpp_swig.Grid_createLinearGrid)
    else:
        createLinearGrid = _pysgpp_swig.Grid_createLinearGrid
    if _newclass:
        createLinearStretchedGrid = staticmethod(_pysgpp_swig.Grid_createLinearStretchedGrid)
    else:
        createLinearStretchedGrid = _pysgpp_swig.Grid_createLinearStretchedGrid
    if _newclass:
        createLinearBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createLinearBoundaryGrid)
    else:
        createLinearBoundaryGrid = _pysgpp_swig.Grid_createLinearBoundaryGrid
    if _newclass:
        createLinearClenshawCurtisGrid = staticmethod(_pysgpp_swig.Grid_createLinearClenshawCurtisGrid)
    else:
        createLinearClenshawCurtisGrid = _pysgpp_swig.Grid_createLinearClenshawCurtisGrid
    if _newclass:
        createLinearClenshawCurtisBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createLinearClenshawCurtisBoundaryGrid)
    else:
        createLinearClenshawCurtisBoundaryGrid = _pysgpp_swig.Grid_createLinearClenshawCurtisBoundaryGrid
    if _newclass:
        createLinearStretchedBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createLinearStretchedBoundaryGrid)
    else:
        createLinearStretchedBoundaryGrid = _pysgpp_swig.Grid_createLinearStretchedBoundaryGrid
    if _newclass:
        createModLinearGrid = staticmethod(_pysgpp_swig.Grid_createModLinearGrid)
    else:
        createModLinearGrid = _pysgpp_swig.Grid_createModLinearGrid
    if _newclass:
        createPolyGrid = staticmethod(_pysgpp_swig.Grid_createPolyGrid)
    else:
        createPolyGrid = _pysgpp_swig.Grid_createPolyGrid
    if _newclass:
        createPolyBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createPolyBoundaryGrid)
    else:
        createPolyBoundaryGrid = _pysgpp_swig.Grid_createPolyBoundaryGrid
    if _newclass:
        createModPolyGrid = staticmethod(_pysgpp_swig.Grid_createModPolyGrid)
    else:
        createModPolyGrid = _pysgpp_swig.Grid_createModPolyGrid
    if _newclass:
        createWaveletGrid = staticmethod(_pysgpp_swig.Grid_createWaveletGrid)
    else:
        createWaveletGrid = _pysgpp_swig.Grid_createWaveletGrid
    if _newclass:
        createWaveletBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createWaveletBoundaryGrid)
    else:
        createWaveletBoundaryGrid = _pysgpp_swig.Grid_createWaveletBoundaryGrid
    if _newclass:
        createModWaveletGrid = staticmethod(_pysgpp_swig.Grid_createModWaveletGrid)
    else:
        createModWaveletGrid = _pysgpp_swig.Grid_createModWaveletGrid
    if _newclass:
        createBsplineGrid = staticmethod(_pysgpp_swig.Grid_createBsplineGrid)
    else:
        createBsplineGrid = _pysgpp_swig.Grid_createBsplineGrid
    if _newclass:
        createBsplineBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createBsplineBoundaryGrid)
    else:
        createBsplineBoundaryGrid = _pysgpp_swig.Grid_createBsplineBoundaryGrid
    if _newclass:
        createBsplineClenshawCurtisGrid = staticmethod(_pysgpp_swig.Grid_createBsplineClenshawCurtisGrid)
    else:
        createBsplineClenshawCurtisGrid = _pysgpp_swig.Grid_createBsplineClenshawCurtisGrid
    if _newclass:
        createModBsplineGrid = staticmethod(_pysgpp_swig.Grid_createModBsplineGrid)
    else:
        createModBsplineGrid = _pysgpp_swig.Grid_createModBsplineGrid
    if _newclass:
        createModBsplineClenshawCurtisGrid = staticmethod(_pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid)
    else:
        createModBsplineClenshawCurtisGrid = _pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid
    if _newclass:
        createFundamentalSplineGrid = staticmethod(_pysgpp_swig.Grid_createFundamentalSplineGrid)
    else:
        createFundamentalSplineGrid = _pysgpp_swig.Grid_createFundamentalSplineGrid
    if _newclass:
        createModFundamentalSplineGrid = staticmethod(_pysgpp_swig.Grid_createModFundamentalSplineGrid)
    else:
        createModFundamentalSplineGrid = _pysgpp_swig.Grid_createModFundamentalSplineGrid
    if _newclass:
        createSquareRootGrid = staticmethod(_pysgpp_swig.Grid_createSquareRootGrid)
    else:
        createSquareRootGrid = _pysgpp_swig.Grid_createSquareRootGrid
    if _newclass:
        createLinearTruncatedBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid)
    else:
        createLinearTruncatedBoundaryGrid = _pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid
    if _newclass:
        createPrewaveletGrid = staticmethod(_pysgpp_swig.Grid_createPrewaveletGrid)
    else:
        createPrewaveletGrid = _pysgpp_swig.Grid_createPrewaveletGrid
    if _newclass:
        createLinearGridStencil = staticmethod(_pysgpp_swig.Grid_createLinearGridStencil)
    else:
        createLinearGridStencil = _pysgpp_swig.Grid_createLinearGridStencil
    if _newclass:
        createModLinearGridStencil = staticmethod(_pysgpp_swig.Grid_createModLinearGridStencil)
    else:
        createModLinearGridStencil = _pysgpp_swig.Grid_createModLinearGridStencil
    if _newclass:
        createPeriodicGrid = staticmethod(_pysgpp_swig.Grid_createPeriodicGrid)
    else:
        createPeriodicGrid = _pysgpp_swig.Grid_createPeriodicGrid
    if _newclass:
        createPolyClenshawCurtisBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createPolyClenshawCurtisBoundaryGrid)
    else:
        createPolyClenshawCurtisBoundaryGrid = _pysgpp_swig.Grid_createPolyClenshawCurtisBoundaryGrid
    if _newclass:
        createPolyClenshawCurtisGrid = staticmethod(_pysgpp_swig.Grid_createPolyClenshawCurtisGrid)
    else:
        createPolyClenshawCurtisGrid = _pysgpp_swig.Grid_createPolyClenshawCurtisGrid
    if _newclass:
        createModPolyClenshawCurtisGrid = staticmethod(_pysgpp_swig.Grid_createModPolyClenshawCurtisGrid)
    else:
        createModPolyClenshawCurtisGrid = _pysgpp_swig.Grid_createModPolyClenshawCurtisGrid
    if _newclass:
        createNakBsplineBoundaryCombigridGrid = staticmethod(_pysgpp_swig.Grid_createNakBsplineBoundaryCombigridGrid)
    else:
        createNakBsplineBoundaryCombigridGrid = _pysgpp_swig.Grid_createNakBsplineBoundaryCombigridGrid
    if _newclass:
        createNaturalBsplineBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createNaturalBsplineBoundaryGrid)
    else:
        createNaturalBsplineBoundaryGrid = _pysgpp_swig.Grid_createNaturalBsplineBoundaryGrid
    if _newclass:
        createNotAKnotBsplineBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createNotAKnotBsplineBoundaryGrid)
    else:
        createNotAKnotBsplineBoundaryGrid = _pysgpp_swig.Grid_createNotAKnotBsplineBoundaryGrid
    if _newclass:
        createModNotAKnotBsplineGrid = staticmethod(_pysgpp_swig.Grid_createModNotAKnotBsplineGrid)
    else:
        createModNotAKnotBsplineGrid = _pysgpp_swig.Grid_createModNotAKnotBsplineGrid
    if _newclass:
        createWeaklyFundamentalSplineBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createWeaklyFundamentalSplineBoundaryGrid)
    else:
        createWeaklyFundamentalSplineBoundaryGrid = _pysgpp_swig.Grid_createWeaklyFundamentalSplineBoundaryGrid
    if _newclass:
        createWeaklyFundamentalNotAKnotSplineBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createWeaklyFundamentalNotAKnotSplineBoundaryGrid)
    else:
        createWeaklyFundamentalNotAKnotSplineBoundaryGrid = _pysgpp_swig.Grid_createWeaklyFundamentalNotAKnotSplineBoundaryGrid
    if _newclass:
        createFundamentalSplineBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createFundamentalSplineBoundaryGrid)
    else:
        createFundamentalSplineBoundaryGrid = _pysgpp_swig.Grid_createFundamentalSplineBoundaryGrid
    if _newclass:
        createFundamentalNotAKnotSplineBoundaryGrid = staticmethod(_pysgpp_swig.Grid_createFundamentalNotAKnotSplineBoundaryGrid)
    else:
        createFundamentalNotAKnotSplineBoundaryGrid = _pysgpp_swig.Grid_createFundamentalNotAKnotSplineBoundaryGrid
    if _newclass:
        unserialize = staticmethod(_pysgpp_swig.Grid_unserialize)
    else:
        unserialize = _pysgpp_swig.Grid_unserialize
    if _newclass:
        stringToGridType = staticmethod(_pysgpp_swig.Grid_stringToGridType)
    else:
        stringToGridType = _pysgpp_swig.Grid_stringToGridType
    __swig_destroy__ = _pysgpp_swig.delete_Grid
    __del__ = lambda self: None

    def getStorage(self) -> "sgpp::base::GridStorage &":
        return _pysgpp_swig.Grid_getStorage(self)

    def getBoundingBox(self) -> "sgpp::base::BoundingBox &":
        return _pysgpp_swig.Grid_getBoundingBox(self)

    def getStretching(self) -> "sgpp::base::Stretching &":
        return _pysgpp_swig.Grid_getStretching(self)

    def getGenerator(self) -> "sgpp::base::GridGenerator &":
        return _pysgpp_swig.Grid_getGenerator(self)

    def getType(self) -> "sgpp::base::GridType":
        return _pysgpp_swig.Grid_getType(self)

    def getBasis(self) -> "sgpp::base::SBasis const &":
        return _pysgpp_swig.Grid_getBasis(self)

    def serialize(self) -> "void":
        return _pysgpp_swig.Grid_serialize(self)

    def refine(self, vector: 'DataVector', num: 'int') -> "void":
        return _pysgpp_swig.Grid_refine(self, vector, num)

    def insertPoint(self, dim: 'size_t', levels: 'unsigned int []', indeces: 'unsigned int []', isLeaf: 'bool') -> "void":
        return _pysgpp_swig.Grid_insertPoint(self, dim, levels, indeces, isLeaf)

    def getSize(self) -> "int":
        return _pysgpp_swig.Grid_getSize(self)

    def getTypeAsString(self) -> "std::string":
        return _pysgpp_swig.Grid_getTypeAsString(self)

    def createGridOfEquivalentType(self, numDims: 'size_t') -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createGridOfEquivalentType(self, numDims)

    def clone(self) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_clone(self)

    def createMemento(self) -> "sgpp::base::Grid *":
        return _pysgpp_swig.Grid_createMemento(self)
    if _newclass:
        setMemento = staticmethod(_pysgpp_swig.Grid_setMemento)
    else:
        setMemento = _pysgpp_swig.Grid_setMemento

    def getDegree(self) -> "size_t":
        return _pysgpp_swig.Grid_getDegree(self)

    def hash_hexdigest(self):
      import hashlib

      gs = self.getStorage()
      gps = [None] * gs.getSize()
      for i in xrange(gs.getSize()):
        gps[i] = gs.getPoint(i).getHash()
      return hashlib.sha512(str(gps)).hexdigest()

Grid_swigregister = _pysgpp_swig.Grid_swigregister
Grid_swigregister(Grid)

def Grid_createGrid(gridConfig: 'RegularGridConfiguration') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createGrid(gridConfig)
Grid_createGrid = _pysgpp_swig.Grid_createGrid

def Grid_createLinearGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearGrid(dim)
Grid_createLinearGrid = _pysgpp_swig.Grid_createLinearGrid

def Grid_createLinearStretchedGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearStretchedGrid(dim)
Grid_createLinearStretchedGrid = _pysgpp_swig.Grid_createLinearStretchedGrid

def Grid_createLinearBoundaryGrid(*args) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearBoundaryGrid(*args)
Grid_createLinearBoundaryGrid = _pysgpp_swig.Grid_createLinearBoundaryGrid

def Grid_createLinearClenshawCurtisGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearClenshawCurtisGrid(dim)
Grid_createLinearClenshawCurtisGrid = _pysgpp_swig.Grid_createLinearClenshawCurtisGrid

def Grid_createLinearClenshawCurtisBoundaryGrid(dim: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearClenshawCurtisBoundaryGrid(dim, boundaryLevel)
Grid_createLinearClenshawCurtisBoundaryGrid = _pysgpp_swig.Grid_createLinearClenshawCurtisBoundaryGrid

def Grid_createLinearStretchedBoundaryGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearStretchedBoundaryGrid(dim)
Grid_createLinearStretchedBoundaryGrid = _pysgpp_swig.Grid_createLinearStretchedBoundaryGrid

def Grid_createModLinearGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModLinearGrid(dim)
Grid_createModLinearGrid = _pysgpp_swig.Grid_createModLinearGrid

def Grid_createPolyGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyGrid(dim, degree)
Grid_createPolyGrid = _pysgpp_swig.Grid_createPolyGrid

def Grid_createPolyBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyBoundaryGrid(dim, degree, boundaryLevel)
Grid_createPolyBoundaryGrid = _pysgpp_swig.Grid_createPolyBoundaryGrid

def Grid_createModPolyGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModPolyGrid(dim, degree)
Grid_createModPolyGrid = _pysgpp_swig.Grid_createModPolyGrid

def Grid_createWaveletGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWaveletGrid(dim)
Grid_createWaveletGrid = _pysgpp_swig.Grid_createWaveletGrid

def Grid_createWaveletBoundaryGrid(*args) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWaveletBoundaryGrid(*args)
Grid_createWaveletBoundaryGrid = _pysgpp_swig.Grid_createWaveletBoundaryGrid

def Grid_createModWaveletGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModWaveletGrid(dim)
Grid_createModWaveletGrid = _pysgpp_swig.Grid_createModWaveletGrid

def Grid_createBsplineGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createBsplineGrid(dim, degree)
Grid_createBsplineGrid = _pysgpp_swig.Grid_createBsplineGrid

def Grid_createBsplineBoundaryGrid(*args) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createBsplineBoundaryGrid(*args)
Grid_createBsplineBoundaryGrid = _pysgpp_swig.Grid_createBsplineBoundaryGrid

def Grid_createBsplineClenshawCurtisGrid(*args) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createBsplineClenshawCurtisGrid(*args)
Grid_createBsplineClenshawCurtisGrid = _pysgpp_swig.Grid_createBsplineClenshawCurtisGrid

def Grid_createModBsplineGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModBsplineGrid(dim, degree)
Grid_createModBsplineGrid = _pysgpp_swig.Grid_createModBsplineGrid

def Grid_createModBsplineClenshawCurtisGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid(dim, degree)
Grid_createModBsplineClenshawCurtisGrid = _pysgpp_swig.Grid_createModBsplineClenshawCurtisGrid

def Grid_createFundamentalSplineGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createFundamentalSplineGrid(dim, degree)
Grid_createFundamentalSplineGrid = _pysgpp_swig.Grid_createFundamentalSplineGrid

def Grid_createModFundamentalSplineGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModFundamentalSplineGrid(dim, degree)
Grid_createModFundamentalSplineGrid = _pysgpp_swig.Grid_createModFundamentalSplineGrid

def Grid_createSquareRootGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createSquareRootGrid(dim)
Grid_createSquareRootGrid = _pysgpp_swig.Grid_createSquareRootGrid

def Grid_createLinearTruncatedBoundaryGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid(dim)
Grid_createLinearTruncatedBoundaryGrid = _pysgpp_swig.Grid_createLinearTruncatedBoundaryGrid

def Grid_createPrewaveletGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPrewaveletGrid(dim)
Grid_createPrewaveletGrid = _pysgpp_swig.Grid_createPrewaveletGrid

def Grid_createLinearGridStencil(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createLinearGridStencil(dim)
Grid_createLinearGridStencil = _pysgpp_swig.Grid_createLinearGridStencil

def Grid_createModLinearGridStencil(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModLinearGridStencil(dim)
Grid_createModLinearGridStencil = _pysgpp_swig.Grid_createModLinearGridStencil

def Grid_createPeriodicGrid(dim: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPeriodicGrid(dim)
Grid_createPeriodicGrid = _pysgpp_swig.Grid_createPeriodicGrid

def Grid_createPolyClenshawCurtisBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t'=1) -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyClenshawCurtisBoundaryGrid(dim, degree, boundaryLevel)
Grid_createPolyClenshawCurtisBoundaryGrid = _pysgpp_swig.Grid_createPolyClenshawCurtisBoundaryGrid

def Grid_createPolyClenshawCurtisGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createPolyClenshawCurtisGrid(dim, degree)
Grid_createPolyClenshawCurtisGrid = _pysgpp_swig.Grid_createPolyClenshawCurtisGrid

def Grid_createModPolyClenshawCurtisGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModPolyClenshawCurtisGrid(dim, degree)
Grid_createModPolyClenshawCurtisGrid = _pysgpp_swig.Grid_createModPolyClenshawCurtisGrid

def Grid_createNakBsplineBoundaryCombigridGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createNakBsplineBoundaryCombigridGrid(dim, degree)
Grid_createNakBsplineBoundaryCombigridGrid = _pysgpp_swig.Grid_createNakBsplineBoundaryCombigridGrid

def Grid_createNaturalBsplineBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createNaturalBsplineBoundaryGrid(dim, degree, boundaryLevel)
Grid_createNaturalBsplineBoundaryGrid = _pysgpp_swig.Grid_createNaturalBsplineBoundaryGrid

def Grid_createNotAKnotBsplineBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createNotAKnotBsplineBoundaryGrid(dim, degree, boundaryLevel)
Grid_createNotAKnotBsplineBoundaryGrid = _pysgpp_swig.Grid_createNotAKnotBsplineBoundaryGrid

def Grid_createModNotAKnotBsplineGrid(dim: 'size_t', degree: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createModNotAKnotBsplineGrid(dim, degree)
Grid_createModNotAKnotBsplineGrid = _pysgpp_swig.Grid_createModNotAKnotBsplineGrid

def Grid_createWeaklyFundamentalSplineBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWeaklyFundamentalSplineBoundaryGrid(dim, degree, boundaryLevel)
Grid_createWeaklyFundamentalSplineBoundaryGrid = _pysgpp_swig.Grid_createWeaklyFundamentalSplineBoundaryGrid

def Grid_createWeaklyFundamentalNotAKnotSplineBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createWeaklyFundamentalNotAKnotSplineBoundaryGrid(dim, degree, boundaryLevel)
Grid_createWeaklyFundamentalNotAKnotSplineBoundaryGrid = _pysgpp_swig.Grid_createWeaklyFundamentalNotAKnotSplineBoundaryGrid

def Grid_createFundamentalSplineBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createFundamentalSplineBoundaryGrid(dim, degree, boundaryLevel)
Grid_createFundamentalSplineBoundaryGrid = _pysgpp_swig.Grid_createFundamentalSplineBoundaryGrid

def Grid_createFundamentalNotAKnotSplineBoundaryGrid(dim: 'size_t', degree: 'size_t', boundaryLevel: 'size_t') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_createFundamentalNotAKnotSplineBoundaryGrid(dim, degree, boundaryLevel)
Grid_createFundamentalNotAKnotSplineBoundaryGrid = _pysgpp_swig.Grid_createFundamentalNotAKnotSplineBoundaryGrid

def Grid_unserialize(istr: 'std::string &') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_unserialize(istr)
Grid_unserialize = _pysgpp_swig.Grid_unserialize

def Grid_stringToGridType(gridType: 'std::string const &') -> "sgpp::base::GridType":
    return _pysgpp_swig.Grid_stringToGridType(gridType)
Grid_stringToGridType = _pysgpp_swig.Grid_stringToGridType

def Grid_setMemento(istr: 'std::string &') -> "sgpp::base::Grid *":
    return _pysgpp_swig.Grid_setMemento(istr)
Grid_setMemento = _pysgpp_swig.Grid_setMemento


def createOperationDiagonal(grid: 'Grid', multiplicationFactor: 'double'=0.25) -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationDiagonal(grid, multiplicationFactor)
createOperationDiagonal = _pysgpp_swig.createOperationDiagonal

def createOperationHierarchisation(grid: 'Grid') -> "sgpp::base::OperationHierarchisation *":
    return _pysgpp_swig.createOperationHierarchisation(grid)
createOperationHierarchisation = _pysgpp_swig.createOperationHierarchisation

def createOperationArbitraryBoundaryHierarchisation(grid: 'Grid') -> "sgpp::base::OperationHierarchisation *":
    return _pysgpp_swig.createOperationArbitraryBoundaryHierarchisation(grid)
createOperationArbitraryBoundaryHierarchisation = _pysgpp_swig.createOperationArbitraryBoundaryHierarchisation

def createOperationQuadrature(grid: 'Grid') -> "sgpp::base::OperationQuadrature *":
    return _pysgpp_swig.createOperationQuadrature(grid)
createOperationQuadrature = _pysgpp_swig.createOperationQuadrature

def createOperationFirstMoment(grid: 'Grid') -> "sgpp::base::OperationFirstMoment *":
    return _pysgpp_swig.createOperationFirstMoment(grid)
createOperationFirstMoment = _pysgpp_swig.createOperationFirstMoment

def createOperationSecondMoment(grid: 'Grid') -> "sgpp::base::OperationSecondMoment *":
    return _pysgpp_swig.createOperationSecondMoment(grid)
createOperationSecondMoment = _pysgpp_swig.createOperationSecondMoment

def createOperationConvert(grid: 'Grid') -> "sgpp::base::OperationConvert *":
    return _pysgpp_swig.createOperationConvert(grid)
createOperationConvert = _pysgpp_swig.createOperationConvert

def createOperationIdentity(grid: 'Grid') -> "sgpp::base::OperationMatrix *":
    return _pysgpp_swig.createOperationIdentity(grid)
createOperationIdentity = _pysgpp_swig.createOperationIdentity

def createOperationEval(grid: 'Grid') -> "sgpp::base::OperationEval *":
    return _pysgpp_swig.createOperationEval(grid)
createOperationEval = _pysgpp_swig.createOperationEval

def createOperationMultipleEval(grid: 'Grid', dataset: 'DataMatrix') -> "sgpp::base::OperationMultipleEval *":
    return _pysgpp_swig.createOperationMultipleEval(grid, dataset)
createOperationMultipleEval = _pysgpp_swig.createOperationMultipleEval

def createOperationMultipleEvalInter(grid: 'Grid', dataset: 'DataMatrix', interactions: 'VecVecSizeT') -> "sgpp::base::OperationMultipleEval *":
    return _pysgpp_swig.createOperationMultipleEvalInter(grid, dataset, interactions)
createOperationMultipleEvalInter = _pysgpp_swig.createOperationMultipleEvalInter

def createOperationMultipleEvalNaive(grid: 'Grid', dataset: 'DataMatrix') -> "sgpp::base::OperationMultipleEval *":
    return _pysgpp_swig.createOperationMultipleEvalNaive(grid, dataset)
createOperationMultipleEvalNaive = _pysgpp_swig.createOperationMultipleEvalNaive

def createOperationEvalNaive(grid: 'Grid') -> "sgpp::base::OperationEval *":
    return _pysgpp_swig.createOperationEvalNaive(grid)
createOperationEvalNaive = _pysgpp_swig.createOperationEvalNaive

def createOperationEvalGradientNaive(grid: 'Grid') -> "sgpp::base::OperationEvalGradient *":
    return _pysgpp_swig.createOperationEvalGradientNaive(grid)
createOperationEvalGradientNaive = _pysgpp_swig.createOperationEvalGradientNaive

def createOperationEvalHessianNaive(grid: 'Grid') -> "sgpp::base::OperationEvalHessian *":
    return _pysgpp_swig.createOperationEvalHessianNaive(grid)
createOperationEvalHessianNaive = _pysgpp_swig.createOperationEvalHessianNaive

def createOperationEvalPartialDerivativeNaive(grid: 'Grid') -> "sgpp::base::OperationEvalPartialDerivative *":
    return _pysgpp_swig.createOperationEvalPartialDerivativeNaive(grid)
createOperationEvalPartialDerivativeNaive = _pysgpp_swig.createOperationEvalPartialDerivativeNaive
class DataVectorSP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataVectorSP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataVectorSP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_DataVectorSP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resize(self, size: 'size_t') -> "void":
        return _pysgpp_swig.DataVectorSP_resize(self, size)

    def resizeZero(self, nrows: 'size_t') -> "void":
        return _pysgpp_swig.DataVectorSP_resizeZero(self, nrows)

    def restructure(self, remainingIndex: 'IndexVector') -> "void":
        return _pysgpp_swig.DataVectorSP_restructure(self, remainingIndex)

    def addSize(self, inc_elems: 'size_t') -> "void":
        return _pysgpp_swig.DataVectorSP_addSize(self, inc_elems)

    def append(self, *args) -> "size_t":
        return _pysgpp_swig.DataVectorSP_append(self, *args)

    def insert(self, index: 'size_t', value: 'float') -> "void":
        return _pysgpp_swig.DataVectorSP_insert(self, index, value)

    def setAll(self, value: 'float') -> "void":
        return _pysgpp_swig.DataVectorSP_setAll(self, value)

    def copyFrom(self, vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataVectorSP_copyFrom(self, vec)

    def get(self, i: 'size_t') -> "float":
        return _pysgpp_swig.DataVectorSP_get(self, i)

    def set(self, i: 'size_t', value: 'float') -> "void":
        return _pysgpp_swig.DataVectorSP_set(self, i, value)

    def add(self, vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataVectorSP_add(self, vec)

    def sub(self, vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataVectorSP_sub(self, vec)

    def componentwise_mult(self, vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataVectorSP_componentwise_mult(self, vec)

    def componentwise_div(self, vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataVectorSP_componentwise_div(self, vec)

    def mult(self, scalar: 'float') -> "void":
        return _pysgpp_swig.DataVectorSP_mult(self, scalar)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataVectorSP_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataVectorSP_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataVectorSP_abs(self)

    def sum(self) -> "float":
        return _pysgpp_swig.DataVectorSP_sum(self)

    def maxNorm(self) -> "float":
        return _pysgpp_swig.DataVectorSP_maxNorm(self)

    def RMSNorm(self) -> "float":
        return _pysgpp_swig.DataVectorSP_RMSNorm(self)

    def l2Norm(self) -> "float":
        return _pysgpp_swig.DataVectorSP_l2Norm(self)

    def min(self) -> "float":
        return _pysgpp_swig.DataVectorSP_min(self)

    def max(self) -> "float":
        return _pysgpp_swig.DataVectorSP_max(self)

    def minmax(self, min: 'float *', max: 'float *') -> "void":
        return _pysgpp_swig.DataVectorSP_minmax(self, min, max)

    def axpy(self, a: 'float', x: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataVectorSP_axpy(self, a, x)

    def dotProduct(self, vec: 'DataVectorSP') -> "float":
        return _pysgpp_swig.DataVectorSP_dotProduct(self, vec)

    def getPointer(self, *args) -> "float const *":
        return _pysgpp_swig.DataVectorSP_getPointer(self, *args)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataVectorSP_getSize(self)

    def getUnused(self) -> "size_t":
        return _pysgpp_swig.DataVectorSP_getUnused(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataVectorSP_getNumberNonZero(self)

    def getInc(self) -> "size_t":
        return _pysgpp_swig.DataVectorSP_getInc(self)

    def setInc(self, inc_elems: 'size_t') -> "void":
        return _pysgpp_swig.DataVectorSP_setInc(self, inc_elems)

    def partitionClasses(self, threshold: 'float') -> "void":
        return _pysgpp_swig.DataVectorSP_partitionClasses(self, threshold)

    def normalize(self, *args) -> "void":
        return _pysgpp_swig.DataVectorSP_normalize(self, *args)

    def toString(self) -> "std::string":
        return _pysgpp_swig.DataVectorSP_toString(self)
    __swig_destroy__ = _pysgpp_swig.delete_DataVectorSP
    __del__ = lambda self: None
DataVectorSP_swigregister = _pysgpp_swig.DataVectorSP_swigregister
DataVectorSP_swigregister(DataVectorSP)

class DataMatrixSP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMatrixSP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMatrixSP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_DataMatrixSP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resize(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_resize(self, *args)

    def resizeZero(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_resizeZero(self, *args)

    def addSize(self, inc_nrows: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrixSP_addSize(self, inc_nrows)

    def appendRow(self, *args) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_appendRow(self, *args)

    def setAll(self, value: 'float') -> "void":
        return _pysgpp_swig.DataMatrixSP_setAll(self, value)

    def copyFrom(self, matr: 'DataMatrixSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_copyFrom(self, matr)

    def transpose(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_transpose(self)

    def __call__(self, *args) -> "float const &":
        return _pysgpp_swig.DataMatrixSP___call__(self, *args)

    def get(self, row: 'size_t', col: 'size_t') -> "float":
        return _pysgpp_swig.DataMatrixSP_get(self, row, col)

    def set(self, row: 'size_t', col: 'size_t', value: 'float') -> "void":
        return _pysgpp_swig.DataMatrixSP_set(self, row, col, value)

    def getRow(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_getRow(self, *args)

    def setRow(self, row: 'size_t', vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_setRow(self, row, vec)

    def getColumn(self, col: 'size_t', vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_getColumn(self, col, vec)

    def setColumn(self, col: 'size_t', vec: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_setColumn(self, col, vec)

    def add(self, matr: 'DataMatrixSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_add(self, matr)

    def sub(self, matr: 'DataMatrixSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_sub(self, matr)

    def addReduce(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_addReduce(self, *args)

    def expand(self, expand: 'DataVectorSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_expand(self, expand)

    def componentwise_mult(self, matr: 'DataMatrixSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_componentwise_mult(self, matr)

    def componentwise_div(self, matr: 'DataMatrixSP') -> "void":
        return _pysgpp_swig.DataMatrixSP_componentwise_div(self, matr)

    def mult(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_mult(self, *args)

    def sqr(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_sqr(self)

    def sqrt(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_sqrt(self)

    def abs(self) -> "void":
        return _pysgpp_swig.DataMatrixSP_abs(self)

    def sum(self) -> "float":
        return _pysgpp_swig.DataMatrixSP_sum(self)

    def min(self, *args) -> "float":
        return _pysgpp_swig.DataMatrixSP_min(self, *args)

    def max(self, *args) -> "float":
        return _pysgpp_swig.DataMatrixSP_max(self, *args)

    def minmax(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_minmax(self, *args)

    def getPointer(self, *args) -> "float const *":
        return _pysgpp_swig.DataMatrixSP_getPointer(self, *args)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getSize(self)

    def getUnused(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getUnused(self)

    def getNumberNonZero(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getNumberNonZero(self)

    def getNrows(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getNrows(self)

    def getNcols(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getNcols(self)

    def getInc(self) -> "size_t":
        return _pysgpp_swig.DataMatrixSP_getInc(self)

    def setInc(self, inc_rows: 'size_t') -> "void":
        return _pysgpp_swig.DataMatrixSP_setInc(self, inc_rows)

    def normalizeDimension(self, *args) -> "void":
        return _pysgpp_swig.DataMatrixSP_normalizeDimension(self, *args)

    def toString(self) -> "std::string":
        return _pysgpp_swig.DataMatrixSP_toString(self)
    __swig_destroy__ = _pysgpp_swig.delete_DataMatrixSP
    __del__ = lambda self: None
DataMatrixSP_swigregister = _pysgpp_swig.DataMatrixSP_swigregister
DataMatrixSP_swigregister(DataMatrixSP)

class BoundingBox1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox1D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leftBoundary"] = _pysgpp_swig.BoundingBox1D_leftBoundary_set
    __swig_getmethods__["leftBoundary"] = _pysgpp_swig.BoundingBox1D_leftBoundary_get
    if _newclass:
        leftBoundary = _swig_property(_pysgpp_swig.BoundingBox1D_leftBoundary_get, _pysgpp_swig.BoundingBox1D_leftBoundary_set)
    __swig_setmethods__["rightBoundary"] = _pysgpp_swig.BoundingBox1D_rightBoundary_set
    __swig_getmethods__["rightBoundary"] = _pysgpp_swig.BoundingBox1D_rightBoundary_get
    if _newclass:
        rightBoundary = _swig_property(_pysgpp_swig.BoundingBox1D_rightBoundary_get, _pysgpp_swig.BoundingBox1D_rightBoundary_set)
    __swig_setmethods__["bDirichletLeft"] = _pysgpp_swig.BoundingBox1D_bDirichletLeft_set
    __swig_getmethods__["bDirichletLeft"] = _pysgpp_swig.BoundingBox1D_bDirichletLeft_get
    if _newclass:
        bDirichletLeft = _swig_property(_pysgpp_swig.BoundingBox1D_bDirichletLeft_get, _pysgpp_swig.BoundingBox1D_bDirichletLeft_set)
    __swig_setmethods__["bDirichletRight"] = _pysgpp_swig.BoundingBox1D_bDirichletRight_set
    __swig_getmethods__["bDirichletRight"] = _pysgpp_swig.BoundingBox1D_bDirichletRight_get
    if _newclass:
        bDirichletRight = _swig_property(_pysgpp_swig.BoundingBox1D_bDirichletRight_get, _pysgpp_swig.BoundingBox1D_bDirichletRight_set)

    def __init__(self, *args):
        this = _pysgpp_swig.new_BoundingBox1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BoundingBox1D
    __del__ = lambda self: None
BoundingBox1D_swigregister = _pysgpp_swig.BoundingBox1D_swigregister
BoundingBox1D_swigregister(BoundingBox1D)

class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_BoundingBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BoundingBox
    __del__ = lambda self: None

    def setBoundary(self, d: 'size_t', boundingBox1D: 'BoundingBox1D') -> "void":
        return _pysgpp_swig.BoundingBox_setBoundary(self, d, boundingBox1D)

    def getBoundary(self, d: 'size_t') -> "sgpp::base::BoundingBox1D const &":
        return _pysgpp_swig.BoundingBox_getBoundary(self, d)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.BoundingBox_getDimension(self)

    def getIntervalWidth(self, d: 'size_t') -> "double":
        return _pysgpp_swig.BoundingBox_getIntervalWidth(self, d)

    def getIntervalOffset(self, d: 'size_t') -> "double":
        return _pysgpp_swig.BoundingBox_getIntervalOffset(self, d)

    def isUnitCube(self) -> "bool":
        return _pysgpp_swig.BoundingBox_isUnitCube(self)

    def transformPointsToBoundingBox(self, points: 'DataMatrix') -> "void":
        return _pysgpp_swig.BoundingBox_transformPointsToBoundingBox(self, points)

    def transformPointToBoundingBox(self, *args) -> "double":
        return _pysgpp_swig.BoundingBox_transformPointToBoundingBox(self, *args)

    def transformPointsToUnitCube(self, points: 'DataMatrix') -> "void":
        return _pysgpp_swig.BoundingBox_transformPointsToUnitCube(self, points)

    def transformPointToUnitCube(self, *args) -> "double":
        return _pysgpp_swig.BoundingBox_transformPointToUnitCube(self, *args)

    def isContainingPoint(self, *args) -> "bool":
        return _pysgpp_swig.BoundingBox_isContainingPoint(self, *args)

    def hasDirichletBoundaryLeft(self, d: 'size_t') -> "bool":
        return _pysgpp_swig.BoundingBox_hasDirichletBoundaryLeft(self, d)

    def hasDirichletBoundaryRight(self, d: 'size_t') -> "bool":
        return _pysgpp_swig.BoundingBox_hasDirichletBoundaryRight(self, d)

    def serialize(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox_serialize(self, *args)

    def unserialize(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox_unserialize(self, *args)

    def toString(self) -> "std::string":
        return _pysgpp_swig.BoundingBox_toString(self)
BoundingBox_swigregister = _pysgpp_swig.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

LOOKUPSIZE = _pysgpp_swig.LOOKUPSIZE
LOOKUPMAX = _pysgpp_swig.LOOKUPMAX
class Stretching1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stretching1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stretching1D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pysgpp_swig.Stretching1D_type_set
    __swig_getmethods__["type"] = _pysgpp_swig.Stretching1D_type_get
    if _newclass:
        type = _swig_property(_pysgpp_swig.Stretching1D_type_get, _pysgpp_swig.Stretching1D_type_set)
    __swig_setmethods__["x_0"] = _pysgpp_swig.Stretching1D_x_0_set
    __swig_getmethods__["x_0"] = _pysgpp_swig.Stretching1D_x_0_get
    if _newclass:
        x_0 = _swig_property(_pysgpp_swig.Stretching1D_x_0_get, _pysgpp_swig.Stretching1D_x_0_set)
    __swig_setmethods__["xsi"] = _pysgpp_swig.Stretching1D_xsi_set
    __swig_getmethods__["xsi"] = _pysgpp_swig.Stretching1D_xsi_get
    if _newclass:
        xsi = _swig_property(_pysgpp_swig.Stretching1D_xsi_get, _pysgpp_swig.Stretching1D_xsi_set)
    __swig_setmethods__["lookup"] = _pysgpp_swig.Stretching1D_lookup_set
    __swig_getmethods__["lookup"] = _pysgpp_swig.Stretching1D_lookup_get
    if _newclass:
        lookup = _swig_property(_pysgpp_swig.Stretching1D_lookup_get, _pysgpp_swig.Stretching1D_lookup_set)

    def __init__(self, *args):
        this = _pysgpp_swig.new_Stretching1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_Stretching1D
    __del__ = lambda self: None
Stretching1D_swigregister = _pysgpp_swig.Stretching1D_swigregister
Stretching1D_swigregister(Stretching1D)

class Stretching(BoundingBox):
    __swig_setmethods__ = {}
    for _s in [BoundingBox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stretching, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundingBox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stretching, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_Stretching(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_Stretching
    __del__ = lambda self: None

    def getCoordinate(self, level: 'sgpp::base::level_t', index: 'sgpp::base::index_t', d: 'size_t') -> "double":
        return _pysgpp_swig.Stretching_getCoordinate(self, level, index, d)

    def getStretching1D(self, d: 'size_t') -> "sgpp::base::Stretching1D const &":
        return _pysgpp_swig.Stretching_getStretching1D(self, d)

    def printLookupTable(self) -> "void":
        return _pysgpp_swig.Stretching_printLookupTable(self)

    def getAdjacentPositions(self, level: 'sgpp::base::level_t', index: 'sgpp::base::index_t', d: 'size_t', posc: 'double &', posl: 'double &', posr: 'double &') -> "void":
        return _pysgpp_swig.Stretching_getAdjacentPositions(self, level, index, d, posc, posl, posr)

    def getStretchingMode(self) -> "std::string":
        return _pysgpp_swig.Stretching_getStretchingMode(self)

    def getDiscreteVector(self, bSort: 'bool') -> "std::vector< double,std::allocator< double > > *":
        return _pysgpp_swig.Stretching_getDiscreteVector(self, bSort)

    def getDiscreteVectorLevel(self) -> "std::vector< sgpp::base::level_t,std::allocator< sgpp::base::level_t > >":
        return _pysgpp_swig.Stretching_getDiscreteVectorLevel(self)

    def calculateNeighborLookup(self, maxlevel: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.Stretching_calculateNeighborLookup(self, maxlevel)

    def serialize(self, *args) -> "void":
        return _pysgpp_swig.Stretching_serialize(self, *args)

    def unserialize(self, *args) -> "void":
        return _pysgpp_swig.Stretching_unserialize(self, *args)
Stretching_swigregister = _pysgpp_swig.Stretching_swigregister
Stretching_swigregister(Stretching)

SERIALIZATION_VERSION = _pysgpp_swig.SERIALIZATION_VERSION
class HashGridPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_HashGridPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPoint
    __del__ = lambda self: None

    def serialize(self, ostream: 'std::ostream &', version: 'int') -> "void":
        return _pysgpp_swig.HashGridPoint_serialize(self, ostream, version)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.HashGridPoint_getDimension(self)

    def set(self, *args) -> "void":
        return _pysgpp_swig.HashGridPoint_set(self, *args)

    def push(self, *args) -> "void":
        return _pysgpp_swig.HashGridPoint_push(self, *args)

    def get(self, d: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_get(self, d)

    def getLevel(self, d: 'size_t') -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevel(self, d)

    def getIndex(self, d: 'size_t') -> "sgpp::base::HashGridPoint::index_type":
        return _pysgpp_swig.HashGridPoint_getIndex(self, d)

    def setLeaf(self, isLeaf: 'bool') -> "void":
        return _pysgpp_swig.HashGridPoint_setLeaf(self, isLeaf)

    def isLeaf(self) -> "bool":
        return _pysgpp_swig.HashGridPoint_isLeaf(self)

    def getStandardCoordinate(self, d: 'size_t') -> "double":
        return _pysgpp_swig.HashGridPoint_getStandardCoordinate(self, d)

    def getStandardCoordinates(self, coordinates: 'DataVector') -> "void":
        return _pysgpp_swig.HashGridPoint_getStandardCoordinates(self, coordinates)

    def isInnerPoint(self) -> "bool":
        return _pysgpp_swig.HashGridPoint_isInnerPoint(self)

    def rehash(self) -> "void":
        return _pysgpp_swig.HashGridPoint_rehash(self)

    def getHash(self) -> "size_t":
        return _pysgpp_swig.HashGridPoint_getHash(self)

    def equals(self, rhs: 'HashGridPoint') -> "bool":
        return _pysgpp_swig.HashGridPoint_equals(self, rhs)

    def assign(self, rhs: 'HashGridPoint') -> "sgpp::base::HashGridPoint &":
        return _pysgpp_swig.HashGridPoint_assign(self, rhs)

    def toString(self, *args) -> "void":
        return _pysgpp_swig.HashGridPoint_toString(self, *args)

    def getLevelSum(self) -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevelSum(self)

    def getLevelMax(self) -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevelMax(self)

    def getLevelMin(self) -> "sgpp::base::HashGridPoint::level_type":
        return _pysgpp_swig.HashGridPoint_getLevelMin(self)

    def getLeftLevelZero(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getLeftLevelZero(self, dim)

    def getRightLevelZero(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getRightLevelZero(self, dim)

    def getLeftChild(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getLeftChild(self, dim)

    def getRightChild(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getRightChild(self, dim)

    def getRoot(self, d: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getRoot(self, d)

    def getParent(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getParent(self, dim)

    def getRightBoundaryPoint(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getRightBoundaryPoint(self, dim)

    def getLeftBoundaryPoint(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridPoint_getLeftBoundaryPoint(self, dim)

    def setAsHierarchicalGridPoint(self, dim: 'size_t', level: 'sgpp::base::HashGridPoint::level_type', index: 'sgpp::base::HashGridPoint::index_type') -> "void":
        return _pysgpp_swig.HashGridPoint_setAsHierarchicalGridPoint(self, dim, level, index)

    def isHierarchicalAncestor(self, *args) -> "bool":
        return _pysgpp_swig.HashGridPoint_isHierarchicalAncestor(self, *args)
HashGridPoint_swigregister = _pysgpp_swig.HashGridPoint_swigregister
HashGridPoint_swigregister(HashGridPoint)

class HashGridPointPointerHashFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridPointPointerHashFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridPointPointerHashFunctor, name)
    __repr__ = _swig_repr

    def __call__(self, index: 'HashGridPoint') -> "size_t":
        return _pysgpp_swig.HashGridPointPointerHashFunctor___call__(self, index)

    def __init__(self):
        this = _pysgpp_swig.new_HashGridPointPointerHashFunctor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointPointerHashFunctor
    __del__ = lambda self: None
HashGridPointPointerHashFunctor_swigregister = _pysgpp_swig.HashGridPointPointerHashFunctor_swigregister
HashGridPointPointerHashFunctor_swigregister(HashGridPointPointerHashFunctor)

class HashGridPointPointerEqualityFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridPointPointerEqualityFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridPointPointerEqualityFunctor, name)
    __repr__ = _swig_repr

    def __call__(self, s1: 'HashGridPoint', s2: 'HashGridPoint') -> "size_t":
        return _pysgpp_swig.HashGridPointPointerEqualityFunctor___call__(self, s1, s2)

    def __init__(self):
        this = _pysgpp_swig.new_HashGridPointPointerEqualityFunctor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointPointerEqualityFunctor
    __del__ = lambda self: None
HashGridPointPointerEqualityFunctor_swigregister = _pysgpp_swig.HashGridPointPointerEqualityFunctor_swigregister
HashGridPointPointerEqualityFunctor_swigregister(HashGridPointPointerEqualityFunctor)

class HashGridPointHashFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridPointHashFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridPointHashFunctor, name)
    __repr__ = _swig_repr

    def __call__(self, index: 'HashGridPoint') -> "size_t":
        return _pysgpp_swig.HashGridPointHashFunctor___call__(self, index)

    def __init__(self):
        this = _pysgpp_swig.new_HashGridPointHashFunctor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointHashFunctor
    __del__ = lambda self: None
HashGridPointHashFunctor_swigregister = _pysgpp_swig.HashGridPointHashFunctor_swigregister
HashGridPointHashFunctor_swigregister(HashGridPointHashFunctor)

class HashGridPointEqualityFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridPointEqualityFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridPointEqualityFunctor, name)
    __repr__ = _swig_repr

    def __call__(self, s1: 'HashGridPoint', s2: 'HashGridPoint') -> "size_t":
        return _pysgpp_swig.HashGridPointEqualityFunctor___call__(self, s1, s2)

    def __init__(self):
        this = _pysgpp_swig.new_HashGridPointEqualityFunctor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridPointEqualityFunctor
    __del__ = lambda self: None
HashGridPointEqualityFunctor_swigregister = _pysgpp_swig.HashGridPointEqualityFunctor_swigregister
HashGridPointEqualityFunctor_swigregister(HashGridPointEqualityFunctor)

class HashGridStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridStorage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_HashGridStorage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridStorage
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _pysgpp_swig.HashGridStorage_clear(self)

    def deletePoints(self, removePoints: 'IndexList') -> "std::vector< size_t,std::allocator< size_t > >":
        return _pysgpp_swig.HashGridStorage_deletePoints(self, removePoints)

    def unserializeNoAlgoDims(self, istr: 'std::string &') -> "void":
        return _pysgpp_swig.HashGridStorage_unserializeNoAlgoDims(self, istr)

    def serialize(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_serialize(self, *args)

    def toString(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_toString(self, *args)

    def getSize(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getSize(self)

    def getNumberOfInnerPoints(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getNumberOfInnerPoints(self)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getDimension(self)

    def getPoint(self, seq: 'size_t') -> "sgpp::base::HashGridPoint &":
        return _pysgpp_swig.HashGridStorage_getPoint(self, seq)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_insert(self, *args)

    def update(self, index: 'HashGridPoint', pos: 'size_t') -> "void":
        return _pysgpp_swig.HashGridStorage_update(self, index, pos)

    def deleteLast(self) -> "void":
        return _pysgpp_swig.HashGridStorage_deleteLast(self)

    def create(self, index: 'HashGridPoint') -> "sgpp::base::HashGridStorage::point_pointer":
        return _pysgpp_swig.HashGridStorage_create(self, index)

    def destroy(self, index: 'HashGridPoint') -> "void":
        return _pysgpp_swig.HashGridStorage_destroy(self, index)

    def store(self, index: 'HashGridPoint') -> "unsigned int":
        return _pysgpp_swig.HashGridStorage_store(self, index)

    def find(self, index: 'HashGridPoint') -> "sgpp::base::HashGridStorage::grid_map_iterator":
        return _pysgpp_swig.HashGridStorage_find(self, index)

    def begin(self) -> "sgpp::base::HashGridStorage::grid_map_iterator":
        return _pysgpp_swig.HashGridStorage_begin(self)

    def end(self) -> "sgpp::base::HashGridStorage::grid_map_iterator":
        return _pysgpp_swig.HashGridStorage_end(self)

    def isContaining(self, index: 'HashGridPoint') -> "bool":
        return _pysgpp_swig.HashGridStorage_isContaining(self, index)

    def getSequenceNumber(self, index: 'HashGridPoint') -> "size_t":
        return _pysgpp_swig.HashGridStorage_getSequenceNumber(self, index)

    def isInvalidSequenceNumber(self, s: 'size_t') -> "bool":
        return _pysgpp_swig.HashGridStorage_isInvalidSequenceNumber(self, s)

    def getAlgorithmicDimensions(self) -> "std::vector< size_t,std::allocator< size_t > >":
        return _pysgpp_swig.HashGridStorage_getAlgorithmicDimensions(self)

    def setAlgorithmicDimensions(self, newAlgoDims: 'IndexVector') -> "void":
        return _pysgpp_swig.HashGridStorage_setAlgorithmicDimensions(self, newAlgoDims)

    def recalcLeafProperty(self) -> "void":
        return _pysgpp_swig.HashGridStorage_recalcLeafProperty(self)

    def getBoundingBox(self) -> "sgpp::base::BoundingBox *":
        return _pysgpp_swig.HashGridStorage_getBoundingBox(self)

    def getStretching(self) -> "sgpp::base::Stretching *":
        return _pysgpp_swig.HashGridStorage_getStretching(self)

    def setBoundingBox(self, boundingBox: 'BoundingBox') -> "void":
        return _pysgpp_swig.HashGridStorage_setBoundingBox(self, boundingBox)

    def setStretching(self, stretching: 'Stretching') -> "void":
        return _pysgpp_swig.HashGridStorage_setStretching(self, stretching)

    def getLevelIndexArraysForEval(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_getLevelIndexArraysForEval(self, *args)

    def getLevelForIntegral(self, level: 'DataMatrix') -> "void":
        return _pysgpp_swig.HashGridStorage_getLevelForIntegral(self, level)

    def getCoordinateArrays(self, coordinates: 'DataMatrix') -> "void":
        return _pysgpp_swig.HashGridStorage_getCoordinateArrays(self, coordinates)

    def getMaxLevel(self) -> "size_t":
        return _pysgpp_swig.HashGridStorage_getMaxLevel(self)

    def getLevelIndexMaskArraysForModEval(self, *args) -> "void":
        return _pysgpp_swig.HashGridStorage_getLevelIndexMaskArraysForModEval(self, *args)

    def getCoordinate(self, point: 'HashGridPoint', d: 'size_t') -> "double":
        return _pysgpp_swig.HashGridStorage_getCoordinate(self, point, d)

    def getUnitCoordinate(self, point: 'HashGridPoint', d: 'size_t') -> "double":
        return _pysgpp_swig.HashGridStorage_getUnitCoordinate(self, point, d)

    def getCoordinates(self, *args) -> "sgpp::base::DataVector":
        return _pysgpp_swig.HashGridStorage_getCoordinates(self, *args)
HashGridStorage_swigregister = _pysgpp_swig.HashGridStorage_swigregister
HashGridStorage_swigregister(HashGridStorage)

class HashGridIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGridIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGridIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_HashGridIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGridIterator
    __del__ = lambda self: None

    def resetToLevelZero(self) -> "void":
        return _pysgpp_swig.HashGridIterator_resetToLevelZero(self)

    def resetToLeftLevelZero(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_resetToLeftLevelZero(self, dim)

    def resetToRightLevelZero(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_resetToRightLevelZero(self, dim)

    def resetToLevelOne(self, d: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_resetToLevelOne(self, d)

    def leftChild(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_leftChild(self, dim)

    def rightChild(self, dim: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_rightChild(self, dim)

    def up(self, d: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_up(self, d)

    def stepLeft(self, d: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_stepLeft(self, d)

    def stepRight(self, d: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_stepRight(self, d)

    def isInnerPoint(self) -> "bool":
        return _pysgpp_swig.HashGridIterator_isInnerPoint(self)

    def hint(self) -> "bool":
        return _pysgpp_swig.HashGridIterator_hint(self)

    def hintLeft(self, d: 'size_t') -> "bool":
        return _pysgpp_swig.HashGridIterator_hintLeft(self, d)

    def hintRight(self, d: 'size_t') -> "bool":
        return _pysgpp_swig.HashGridIterator_hintRight(self, d)

    def get(self, d: 'size_t') -> "void":
        return _pysgpp_swig.HashGridIterator_get(self, d)

    def set(self, *args) -> "void":
        return _pysgpp_swig.HashGridIterator_set(self, *args)

    def push(self, d: 'size_t', l: 'sgpp::base::HashGridIterator::index_type::level_type', i: 'sgpp::base::HashGridIterator::index_type::index_type') -> "void":
        return _pysgpp_swig.HashGridIterator_push(self, d, l, i)

    def seq(self) -> "size_t":
        return _pysgpp_swig.HashGridIterator_seq(self)

    def getGridDepth(self, dim: 'size_t') -> "sgpp::base::HashGridIterator::level_t":
        return _pysgpp_swig.HashGridIterator_getGridDepth(self, dim)

    def toString(self) -> "std::string":
        return _pysgpp_swig.HashGridIterator_toString(self)
HashGridIterator_swigregister = _pysgpp_swig.HashGridIterator_swigregister
HashGridIterator_swigregister(HashGridIterator)

class RefinementFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementFunctor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_RefinementFunctor
    __del__ = lambda self: None

    def __call__(self, storage: 'HashGridStorage', seq: 'size_t') -> "double":
        return _pysgpp_swig.RefinementFunctor___call__(self, storage, seq)

    def start(self) -> "double":
        return _pysgpp_swig.RefinementFunctor_start(self)

    def getRefinementsNum(self) -> "size_t":
        return _pysgpp_swig.RefinementFunctor_getRefinementsNum(self)

    def getRefinementThreshold(self) -> "double":
        return _pysgpp_swig.RefinementFunctor_getRefinementThreshold(self)

    def getTotalRefinementValue(self, storage: 'HashGridStorage') -> "double":
        return _pysgpp_swig.RefinementFunctor_getTotalRefinementValue(self, storage)
RefinementFunctor_swigregister = _pysgpp_swig.RefinementFunctor_swigregister
RefinementFunctor_swigregister(RefinementFunctor)

class SurplusRefinementFunctor(RefinementFunctor):
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurplusRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurplusRefinementFunctor, name)
    __repr__ = _swig_repr

    def __init__(self, alpha: 'DataVector', refinements_num: 'size_t'=1, threshold: 'double'=0.0):
        this = _pysgpp_swig.new_SurplusRefinementFunctor(alpha, refinements_num, threshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SurplusRefinementFunctor
    __del__ = lambda self: None
SurplusRefinementFunctor_swigregister = _pysgpp_swig.SurplusRefinementFunctor_swigregister
SurplusRefinementFunctor_swigregister(SurplusRefinementFunctor)

class CoarseningFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoarseningFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoarseningFunctor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_CoarseningFunctor
    __del__ = lambda self: None

    def __call__(self, storage: 'HashGridStorage', seq: 'size_t') -> "double":
        return _pysgpp_swig.CoarseningFunctor___call__(self, storage, seq)

    def start(self) -> "double":
        return _pysgpp_swig.CoarseningFunctor_start(self)

    def getRemovementsNum(self) -> "size_t":
        return _pysgpp_swig.CoarseningFunctor_getRemovementsNum(self)

    def getCoarseningThreshold(self) -> "double":
        return _pysgpp_swig.CoarseningFunctor_getCoarseningThreshold(self)
CoarseningFunctor_swigregister = _pysgpp_swig.CoarseningFunctor_swigregister
CoarseningFunctor_swigregister(CoarseningFunctor)

class GridGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridGenerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_GridGenerator
    __del__ = lambda self: None

    def regular(self, *args) -> "void":
        return _pysgpp_swig.GridGenerator_regular(self, *args)

    def regularInter(self, level: 'size_t', terms: 'VecVecSizeT', T: 'double') -> "void":
        return _pysgpp_swig.GridGenerator_regularInter(self, level, terms, T)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.GridGenerator_cliques(self, *args)

    def full(self, level: 'size_t') -> "void":
        return _pysgpp_swig.GridGenerator_full(self, level)

    def truncated(self, level: 'size_t', l_user: 'size_t') -> "void":
        return _pysgpp_swig.GridGenerator_truncated(self, level, l_user)

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.GridGenerator_refine(self, func, addedPoints)

    def refineInter(self, func: 'RefinementFunctor', interactions: 'VecVecSizeT') -> "void":
        return _pysgpp_swig.GridGenerator_refineInter(self, func, interactions)

    def coarsen(self, func: 'CoarseningFunctor', alpha: 'DataVector') -> "void":
        return _pysgpp_swig.GridGenerator_coarsen(self, func, alpha)

    def coarsenNFirstOnly(self, func: 'CoarseningFunctor', alpha: 'DataVector', numFirstOnly: 'size_t') -> "void":
        return _pysgpp_swig.GridGenerator_coarsenNFirstOnly(self, func, alpha, numFirstOnly)

    def getNumberOfRefinablePoints(self) -> "size_t":
        return _pysgpp_swig.GridGenerator_getNumberOfRefinablePoints(self)

    def getNumberOfRemovablePoints(self) -> "size_t":
        return _pysgpp_swig.GridGenerator_getNumberOfRemovablePoints(self)

    def refineMaxLevel(self, func: 'RefinementFunctor', maxLevel: 'size_t') -> "void":
        return _pysgpp_swig.GridGenerator_refineMaxLevel(self, func, maxLevel)

    def getNumberOfRefinablePointsToMaxLevel(self, maxLevel: 'size_t') -> "size_t":
        return _pysgpp_swig.GridGenerator_getNumberOfRefinablePointsToMaxLevel(self, maxLevel)
GridGenerator_swigregister = _pysgpp_swig.GridGenerator_swigregister
GridGenerator_swigregister(GridGenerator)

class OperationMultipleEval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMultipleEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMultipleEval, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleEval
    __del__ = lambda self: None

    def mult(self, *args) -> "void":
        return _pysgpp_swig.OperationMultipleEval_mult(self, *args)

    def multTranspose(self, *args) -> "void":
        return _pysgpp_swig.OperationMultipleEval_multTranspose(self, *args)

    def eval(self, alpha: 'DataVector', result: 'DataVector') -> "void":
        return _pysgpp_swig.OperationMultipleEval_eval(self, alpha, result)

    def prepare(self) -> "void":
        return _pysgpp_swig.OperationMultipleEval_prepare(self)

    def getDuration(self) -> "double":
        return _pysgpp_swig.OperationMultipleEval_getDuration(self)

    def getImplementationName(self) -> "std::string":
        return _pysgpp_swig.OperationMultipleEval_getImplementationName(self)
OperationMultipleEval_swigregister = _pysgpp_swig.OperationMultipleEval_swigregister
OperationMultipleEval_swigregister(OperationMultipleEval)

class OperationMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMatrix, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMatrix
    __del__ = lambda self: None

    def mult(self, alpha: 'DataVector', result: 'DataVector') -> "void":
        return _pysgpp_swig.OperationMatrix_mult(self, alpha, result)
OperationMatrix_swigregister = _pysgpp_swig.OperationMatrix_swigregister
OperationMatrix_swigregister(OperationMatrix)

class OperationIdentity(OperationMatrix):
    __swig_setmethods__ = {}
    for _s in [OperationMatrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationIdentity, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMatrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationIdentity, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OperationIdentity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationIdentity
    __del__ = lambda self: None
OperationIdentity_swigregister = _pysgpp_swig.OperationIdentity_swigregister
OperationIdentity_swigregister(OperationIdentity)

class OperationConvert(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationConvert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationConvert, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationConvert
    __del__ = lambda self: None

    def doConvertToLinear(self, alpha: 'DataVector') -> "void":
        return _pysgpp_swig.OperationConvert_doConvertToLinear(self, alpha)

    def doConvertFromLinear(self, alpha: 'DataVector') -> "void":
        return _pysgpp_swig.OperationConvert_doConvertFromLinear(self, alpha)
OperationConvert_swigregister = _pysgpp_swig.OperationConvert_swigregister
OperationConvert_swigregister(OperationConvert)

class OperationEval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEval, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEval
    __del__ = lambda self: None

    def eval(self, *args) -> "void":
        return _pysgpp_swig.OperationEval_eval(self, *args)
OperationEval_swigregister = _pysgpp_swig.OperationEval_swigregister
OperationEval_swigregister(OperationEval)

class OperationEvalGradient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEvalGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEvalGradient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalGradient
    __del__ = lambda self: None

    def evalGradient(self, *args) -> "void":
        return _pysgpp_swig.OperationEvalGradient_evalGradient(self, *args)
    __swig_setmethods__["pointInUnitCube"] = _pysgpp_swig.OperationEvalGradient_pointInUnitCube_set
    __swig_getmethods__["pointInUnitCube"] = _pysgpp_swig.OperationEvalGradient_pointInUnitCube_get
    if _newclass:
        pointInUnitCube = _swig_property(_pysgpp_swig.OperationEvalGradient_pointInUnitCube_get, _pysgpp_swig.OperationEvalGradient_pointInUnitCube_set)
OperationEvalGradient_swigregister = _pysgpp_swig.OperationEvalGradient_swigregister
OperationEvalGradient_swigregister(OperationEvalGradient)

class OperationEvalHessian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEvalHessian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEvalHessian, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalHessian
    __del__ = lambda self: None

    def evalHessian(self, *args) -> "void":
        return _pysgpp_swig.OperationEvalHessian_evalHessian(self, *args)
    __swig_setmethods__["pointInUnitCube"] = _pysgpp_swig.OperationEvalHessian_pointInUnitCube_set
    __swig_getmethods__["pointInUnitCube"] = _pysgpp_swig.OperationEvalHessian_pointInUnitCube_get
    if _newclass:
        pointInUnitCube = _swig_property(_pysgpp_swig.OperationEvalHessian_pointInUnitCube_get, _pysgpp_swig.OperationEvalHessian_pointInUnitCube_set)
OperationEvalHessian_swigregister = _pysgpp_swig.OperationEvalHessian_swigregister
OperationEvalHessian_swigregister(OperationEvalHessian)

class OperationEvalPartialDerivative(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEvalPartialDerivative, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEvalPartialDerivative, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalPartialDerivative
    __del__ = lambda self: None

    def evalPartialDerivative(self, *args) -> "void":
        return _pysgpp_swig.OperationEvalPartialDerivative_evalPartialDerivative(self, *args)
    __swig_setmethods__["pointInUnitCube"] = _pysgpp_swig.OperationEvalPartialDerivative_pointInUnitCube_set
    __swig_getmethods__["pointInUnitCube"] = _pysgpp_swig.OperationEvalPartialDerivative_pointInUnitCube_get
    if _newclass:
        pointInUnitCube = _swig_property(_pysgpp_swig.OperationEvalPartialDerivative_pointInUnitCube_get, _pysgpp_swig.OperationEvalPartialDerivative_pointInUnitCube_set)
OperationEvalPartialDerivative_swigregister = _pysgpp_swig.OperationEvalPartialDerivative_swigregister
OperationEvalPartialDerivative_swigregister(OperationEvalPartialDerivative)

class OperationHierarchisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationHierarchisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationHierarchisation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationHierarchisation
    __del__ = lambda self: None

    def doHierarchisation(self, node_values: 'DataVector') -> "void":
        return _pysgpp_swig.OperationHierarchisation_doHierarchisation(self, node_values)

    def doDehierarchisation(self, alpha: 'DataVector') -> "void":
        return _pysgpp_swig.OperationHierarchisation_doDehierarchisation(self, alpha)
OperationHierarchisation_swigregister = _pysgpp_swig.OperationHierarchisation_swigregister
OperationHierarchisation_swigregister(OperationHierarchisation)

class OperationQuadrature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationQuadrature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationQuadrature, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationQuadrature
    __del__ = lambda self: None

    def doQuadrature(self, alpha: 'DataVector') -> "double":
        return _pysgpp_swig.OperationQuadrature_doQuadrature(self, alpha)
OperationQuadrature_swigregister = _pysgpp_swig.OperationQuadrature_swigregister
OperationQuadrature_swigregister(OperationQuadrature)

class OperationQuadratureMC(OperationQuadrature):
    __swig_setmethods__ = {}
    for _s in [OperationQuadrature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationQuadratureMC, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationQuadrature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationQuadratureMC, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', mcPaths: 'int'):
        this = _pysgpp_swig.new_OperationQuadratureMC(grid, mcPaths)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationQuadratureMC
    __del__ = lambda self: None

    def doQuadratureFunc(self, *args) -> "double":
        return _pysgpp_swig.OperationQuadratureMC_doQuadratureFunc(self, *args)

    def doQuadratureL2Error(self, *args) -> "double":
        return _pysgpp_swig.OperationQuadratureMC_doQuadratureL2Error(self, *args)
OperationQuadratureMC_swigregister = _pysgpp_swig.OperationQuadratureMC_swigregister
OperationQuadratureMC_swigregister(OperationQuadratureMC)

class DirichletUpdateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirichletUpdateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirichletUpdateVector, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_DirichletUpdateVector(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_DirichletUpdateVector
    __del__ = lambda self: None

    def applyDirichletConditions(self, updateVector: 'DataVector', sourceVector: 'DataVector') -> "void":
        return _pysgpp_swig.DirichletUpdateVector_applyDirichletConditions(self, updateVector, sourceVector)

    def setBoundariesToZero(self, updateVector: 'DataVector') -> "void":
        return _pysgpp_swig.DirichletUpdateVector_setBoundariesToZero(self, updateVector)

    def setInnerPointsToZero(self, updateVector: 'DataVector') -> "void":
        return _pysgpp_swig.DirichletUpdateVector_setInnerPointsToZero(self, updateVector)

    def multiplyBoundaryVector(self, updateVector: 'DataVector', factor: 'DataVector') -> "void":
        return _pysgpp_swig.DirichletUpdateVector_multiplyBoundaryVector(self, updateVector, factor)

    def multiplyBoundary(self, updateVector: 'DataVector', value: 'double') -> "void":
        return _pysgpp_swig.DirichletUpdateVector_multiplyBoundary(self, updateVector, value)

    def multiply(self, updateVector: 'DataVector', value: 'double', predicate: 'bool (*)(sgpp::base::GridPoint *,sgpp::base::GridStorage &)') -> "void":
        return _pysgpp_swig.DirichletUpdateVector_multiply(self, updateVector, value, predicate)
DirichletUpdateVector_swigregister = _pysgpp_swig.DirichletUpdateVector_swigregister
DirichletUpdateVector_swigregister(DirichletUpdateVector)

class HashGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGenerator, name)
    __repr__ = _swig_repr

    def regular(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t', T: 'double'=0) -> "void":
        return _pysgpp_swig.HashGenerator_regular(self, storage, level, T)

    def regularInter(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t', terms: 'VecVecSizeT', T: 'double'=0) -> "void":
        return _pysgpp_swig.HashGenerator_regularInter(self, storage, level, terms, T)

    def regular_inter(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t', terms: 'std::unordered_set< std::vector< bool,std::allocator< bool > > > const &', T: 'double'=0) -> "void":
        return _pysgpp_swig.HashGenerator_regular_inter(self, storage, level, terms, T)

    def cliques(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t', clique_size: 'size_t', T: 'double'=0) -> "void":
        return _pysgpp_swig.HashGenerator_cliques(self, storage, level, clique_size, T)

    def full(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.HashGenerator_full(self, storage, level)

    def fullWithBoundary(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.HashGenerator_fullWithBoundary(self, storage, level)

    def regularWithBoundaries(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t', boundaryLevel: 'sgpp::base::level_t'=1) -> "void":
        return _pysgpp_swig.HashGenerator_regularWithBoundaries(self, storage, level, boundaryLevel)

    def regularWithPeriodicBoundaries(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t', T: 'double'=0) -> "void":
        return _pysgpp_swig.HashGenerator_regularWithPeriodicBoundaries(self, storage, level, T)

    def squareRoot(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.HashGenerator_squareRoot(self, storage, level)

    def truncated(self, storage: 'HashGridStorage', level: 'sgpp::base::level_t', k: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.HashGenerator_truncated(self, storage, level, k)

    def __init__(self):
        this = _pysgpp_swig.new_HashGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashGenerator
    __del__ = lambda self: None
HashGenerator_swigregister = _pysgpp_swig.HashGenerator_swigregister
HashGenerator_swigregister(HashGenerator)

class AbstractRefinement_refinement_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractRefinement_refinement_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractRefinement_refinement_key, name)
    __repr__ = _swig_repr

    def __init__(self, point: 'HashGridPoint', seq: 'size_t'):
        this = _pysgpp_swig.new_AbstractRefinement_refinement_key(point, seq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_AbstractRefinement_refinement_key
    __del__ = lambda self: None

    def getLevelVector(self) -> "std::vector< sgpp::base::level_t,std::allocator< sgpp::base::level_t > > const":
        return _pysgpp_swig.AbstractRefinement_refinement_key_getLevelVector(self)

    def getPoint(self) -> "sgpp::base::GridPoint &":
        return _pysgpp_swig.AbstractRefinement_refinement_key_getPoint(self)

    def getSeq(self) -> "size_t":
        return _pysgpp_swig.AbstractRefinement_refinement_key_getSeq(self)
AbstractRefinement_refinement_key_swigregister = _pysgpp_swig.AbstractRefinement_refinement_key_swigregister
AbstractRefinement_refinement_key_swigregister(AbstractRefinement_refinement_key)

class AbstractRefinement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractRefinement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractRefinement, name)
    __repr__ = _swig_repr
    if _newclass:
        compare_pairs = staticmethod(_pysgpp_swig.AbstractRefinement_compare_pairs)
    else:
        compare_pairs = _pysgpp_swig.AbstractRefinement_compare_pairs

    def free_refine(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.AbstractRefinement_free_refine(self, storage, functor, addedPoints)

    def getNumberOfRefinablePoints(self, storage: 'HashGridStorage') -> "size_t":
        return _pysgpp_swig.AbstractRefinement_getNumberOfRefinablePoints(self, storage)

    def refineGridpoint1D(self, *args) -> "void":
        return _pysgpp_swig.AbstractRefinement_refineGridpoint1D(self, *args)

    def isRefinable(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "bool":
        return _pysgpp_swig.AbstractRefinement_isRefinable(self, storage, point)
    __swig_destroy__ = _pysgpp_swig.delete_AbstractRefinement
    __del__ = lambda self: None

    def getIndexOfMin(self, array: 'sgpp::base::RefinementFunctor::value_type *', length: 'size_t') -> "size_t":
        return _pysgpp_swig.AbstractRefinement_getIndexOfMin(self, array, length)

    def refineGridpoint(self, storage: 'HashGridStorage', refine_index: 'size_t') -> "void":
        return _pysgpp_swig.AbstractRefinement_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.AbstractRefinement_createGridpoint(self, storage, point)

    def createGridpointSubroutine(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.AbstractRefinement_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: 'HashGridPoint', d: 'size_t', storage: 'HashGridStorage', source_index: 'sgpp::base::index_t &', source_level: 'sgpp::base::level_t &') -> "void":
        return _pysgpp_swig.AbstractRefinement_createGridpoint1D(self, point, d, storage, source_index, source_level)

    def collectRefinablePoints(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.AbstractRefinement_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.AbstractRefinement_refineGridpointsCollection(self, storage, functor, collection)

    def getIndicator(self, storage: 'HashGridStorage', iter: 'sgpp::base::GridStorage::grid_map_iterator const &', functor: 'RefinementFunctor') -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.AbstractRefinement_getIndicator(self, storage, iter, functor)

    def __init__(self):
        if self.__class__ == AbstractRefinement:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_AbstractRefinement(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_AbstractRefinement(self)
        return weakref_proxy(self)
AbstractRefinement_swigregister = _pysgpp_swig.AbstractRefinement_swigregister
AbstractRefinement_swigregister(AbstractRefinement)

def AbstractRefinement_compare_pairs(lhs: 'sgpp::base::AbstractRefinement::refinement_pair_type const &', rhs: 'sgpp::base::AbstractRefinement::refinement_pair_type const &') -> "bool":
    return _pysgpp_swig.AbstractRefinement_compare_pairs(lhs, rhs)
AbstractRefinement_compare_pairs = _pysgpp_swig.AbstractRefinement_compare_pairs

class RefinementDecorator(AbstractRefinement):
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementDecorator, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementDecorator, name)
    __repr__ = _swig_repr

    def __init__(self, refinement: 'AbstractRefinement'):
        if self.__class__ == RefinementDecorator:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_RefinementDecorator(_self, refinement)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_RefinementDecorator
    __del__ = lambda self: None

    def free_refine(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.RefinementDecorator_free_refine(self, storage, functor, addedPoints)

    def getNumberOfRefinablePoints(self, storage: 'HashGridStorage') -> "size_t":
        return _pysgpp_swig.RefinementDecorator_getNumberOfRefinablePoints(self, storage)

    def refineGridpoint1D(self, storage: 'HashGridStorage', point: 'HashGridPoint', d: 'size_t') -> "void":
        return _pysgpp_swig.RefinementDecorator_refineGridpoint1D(self, storage, point, d)

    def checkAdmissibility(self, storage: 'HashGridStorage', subspace: 'HashGridPoint') -> "bool":
        return _pysgpp_swig.RefinementDecorator_checkAdmissibility(self, storage, subspace)

    def refineGridpoint(self, storage: 'HashGridStorage', refine_index: 'size_t') -> "void":
        return _pysgpp_swig.RefinementDecorator_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.RefinementDecorator_createGridpoint(self, storage, point)

    def collectRefinablePoints(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.RefinementDecorator_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.RefinementDecorator_refineGridpointsCollection(self, storage, functor, collection)

    def getIndicator(self, storage: 'HashGridStorage', iter: 'sgpp::base::GridStorage::grid_map_iterator const &', functor: 'RefinementFunctor') -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.RefinementDecorator_getIndicator(self, storage, iter, functor)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_RefinementDecorator(self)
        return weakref_proxy(self)

    def createGridpointSubroutine(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.RefinementDecorator_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: 'HashGridPoint', d: 'size_t', storage: 'HashGridStorage', source_index: 'sgpp::base::index_t &', source_level: 'sgpp::base::level_t &') -> "void":
        return _pysgpp_swig.RefinementDecorator_createGridpoint1D(self, point, d, storage, source_index, source_level)
RefinementDecorator_swigregister = _pysgpp_swig.RefinementDecorator_swigregister
RefinementDecorator_swigregister(RefinementDecorator)

class HashRefinement(AbstractRefinement):
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinement, name)
    __repr__ = _swig_repr

    def free_refine(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.HashRefinement_free_refine(self, storage, functor, addedPoints)

    def getNumberOfRefinablePoints(self, storage: 'HashGridStorage') -> "size_t":
        return _pysgpp_swig.HashRefinement_getNumberOfRefinablePoints(self, storage)

    def refineGridpoint1D(self, *args) -> "void":
        return _pysgpp_swig.HashRefinement_refineGridpoint1D(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_HashRefinement
    __del__ = lambda self: None

    def refineGridpoint(self, storage: 'HashGridStorage', refine_index: 'size_t') -> "void":
        return _pysgpp_swig.HashRefinement_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.HashRefinement_createGridpoint(self, storage, point)

    def collectRefinablePoints(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.HashRefinement_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.HashRefinement_refineGridpointsCollection(self, storage, functor, collection)

    def addElementToCollection(self, iter: 'sgpp::base::GridStorage::grid_map_iterator const &', current_value_list: 'sgpp::base::AbstractRefinement::refinement_list_type', refinements_num: 'size_t', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.HashRefinement_addElementToCollection(self, iter, current_value_list, refinements_num, collection)

    def getIndicator(self, storage: 'HashGridStorage', iter: 'sgpp::base::GridStorage::grid_map_iterator const &', functor: 'RefinementFunctor') -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.HashRefinement_getIndicator(self, storage, iter, functor)

    def __init__(self):
        if self.__class__ == HashRefinement:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_HashRefinement(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_HashRefinement(self)
        return weakref_proxy(self)

    def createGridpointSubroutine(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.HashRefinement_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: 'HashGridPoint', d: 'size_t', storage: 'HashGridStorage', source_index: 'sgpp::base::index_t &', source_level: 'sgpp::base::level_t &') -> "void":
        return _pysgpp_swig.HashRefinement_createGridpoint1D(self, point, d, storage, source_index, source_level)
HashRefinement_swigregister = _pysgpp_swig.HashRefinement_swigregister
HashRefinement_swigregister(HashRefinement)

class HashCoarsening(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashCoarsening, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashCoarsening, name)
    __repr__ = _swig_repr

    def free_coarsen_NFirstOnly(self, storage: 'HashGridStorage', functor: 'CoarseningFunctor', alpha: 'DataVector', numFirstPoints: 'size_t', minIndexConsidered: 'size_t'=0, removedPoints: 'std::vector< sgpp::base::HashGridPoint,std::allocator< sgpp::base::HashGridPoint > > *'=None, removedSeq: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.HashCoarsening_free_coarsen_NFirstOnly(self, storage, functor, alpha, numFirstPoints, minIndexConsidered, removedPoints, removedSeq)

    def free_coarsen(self, storage: 'HashGridStorage', functor: 'CoarseningFunctor', alpha: 'DataVector', removedPoints: 'std::vector< sgpp::base::HashGridPoint,std::allocator< sgpp::base::HashGridPoint > > *'=None, removedSeq: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.HashCoarsening_free_coarsen(self, storage, functor, alpha, removedPoints, removedSeq)

    def getNumberOfRemovablePoints(self, storage: 'HashGridStorage') -> "size_t":
        return _pysgpp_swig.HashCoarsening_getNumberOfRemovablePoints(self, storage)

    def __init__(self):
        this = _pysgpp_swig.new_HashCoarsening()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashCoarsening
    __del__ = lambda self: None
HashCoarsening_swigregister = _pysgpp_swig.HashCoarsening_swigregister
HashCoarsening_swigregister(HashCoarsening)

class HashRefinementBoundaries(AbstractRefinement):
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashRefinementBoundaries, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HashRefinementBoundaries, name)
    __repr__ = _swig_repr

    def free_refine(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.HashRefinementBoundaries_free_refine(self, storage, functor, addedPoints)

    def __init__(self):
        this = _pysgpp_swig.new_HashRefinementBoundaries()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_HashRefinementBoundaries
    __del__ = lambda self: None
HashRefinementBoundaries_swigregister = _pysgpp_swig.HashRefinementBoundaries_swigregister
HashRefinementBoundaries_swigregister(HashRefinementBoundaries)

class ANOVAHashRefinement(HashRefinement):
    __swig_setmethods__ = {}
    for _s in [HashRefinement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANOVAHashRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [HashRefinement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ANOVAHashRefinement, name)
    __repr__ = _swig_repr

    def refineGridpoint(self, storage: 'HashGridStorage', refine_index: 'size_t') -> "void":
        return _pysgpp_swig.ANOVAHashRefinement_refineGridpoint(self, storage, refine_index)

    def __init__(self):
        this = _pysgpp_swig.new_ANOVAHashRefinement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ANOVAHashRefinement
    __del__ = lambda self: None
ANOVAHashRefinement_swigregister = _pysgpp_swig.ANOVAHashRefinement_swigregister
ANOVAHashRefinement_swigregister(ANOVAHashRefinement)

class SubspaceRefinement(RefinementDecorator):
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubspaceRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubspaceRefinement, name)
    __repr__ = _swig_repr

    def __init__(self, refinement: 'AbstractRefinement'):
        if self.__class__ == SubspaceRefinement:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_SubspaceRefinement(_self, refinement)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def free_refine(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.SubspaceRefinement_free_refine(self, storage, functor, addedPoints)
    __swig_destroy__ = _pysgpp_swig.delete_SubspaceRefinement
    __del__ = lambda self: None

    def collectRefinablePoints(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.SubspaceRefinement_collectRefinablePoints(self, storage, functor, collection)

    def refineGridpointsCollection(self, storage: 'HashGridStorage', functor: 'RefinementFunctor', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.SubspaceRefinement_refineGridpointsCollection(self, storage, functor, collection)

    def addElementToCollection(self, iter: 'sgpp::base::GridStorage::grid_map_iterator const &', current_value_list: 'sgpp::base::AbstractRefinement::refinement_list_type', refinement_num: 'size_t', collection: 'sgpp::base::AbstractRefinement::refinement_container_type &') -> "void":
        return _pysgpp_swig.SubspaceRefinement_addElementToCollection(self, iter, current_value_list, refinement_num, collection)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_SubspaceRefinement(self)
        return weakref_proxy(self)

    def refineGridpoint(self, storage: 'HashGridStorage', refine_index: 'size_t') -> "void":
        return _pysgpp_swig.SubspaceRefinement_refineGridpoint(self, storage, refine_index)

    def createGridpoint(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.SubspaceRefinement_createGridpoint(self, storage, point)

    def createGridpointSubroutine(self, storage: 'HashGridStorage', point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.SubspaceRefinement_createGridpointSubroutine(self, storage, point)

    def createGridpoint1D(self, point: 'HashGridPoint', d: 'size_t', storage: 'HashGridStorage', source_index: 'sgpp::base::index_t &', source_level: 'sgpp::base::level_t &') -> "void":
        return _pysgpp_swig.SubspaceRefinement_createGridpoint1D(self, point, d, storage, source_index, source_level)

    def getIndicator(self, storage: 'HashGridStorage', iter: 'sgpp::base::GridStorage::grid_map_iterator const &', functor: 'RefinementFunctor') -> "sgpp::base::AbstractRefinement::refinement_list_type":
        return _pysgpp_swig.SubspaceRefinement_getIndicator(self, storage, iter, functor)
SubspaceRefinement_swigregister = _pysgpp_swig.SubspaceRefinement_swigregister
SubspaceRefinement_swigregister(SubspaceRefinement)

class PredictiveRefinementIndicator(RefinementFunctor):
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictiveRefinementIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PredictiveRefinementIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', dataSet: 'DataMatrix', errorVector: 'DataVector', refinements_num: 'size_t'=1, threshold: 'double'=0.0, minSupportPoints: 'uint64_t'=0):
        this = _pysgpp_swig.new_PredictiveRefinementIndicator(grid, dataSet, errorVector, refinements_num, threshold, minSupportPoints)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinementIndicator
    __del__ = lambda self: None

    def runOperator(self, storage: 'HashGridStorage', seq: 'size_t') -> "double":
        return _pysgpp_swig.PredictiveRefinementIndicator_runOperator(self, storage, seq)

    def getMinSupportPoints(self) -> "uint64_t":
        return _pysgpp_swig.PredictiveRefinementIndicator_getMinSupportPoints(self)

    def setMinSupportPoints(self, minSupportPoints: 'uint64_t') -> "void":
        return _pysgpp_swig.PredictiveRefinementIndicator_setMinSupportPoints(self, minSupportPoints)

    def __call__(self, *args) -> "double":
        return _pysgpp_swig.PredictiveRefinementIndicator___call__(self, *args)
PredictiveRefinementIndicator_swigregister = _pysgpp_swig.PredictiveRefinementIndicator_swigregister
PredictiveRefinementIndicator_swigregister(PredictiveRefinementIndicator)

class PredictiveRefinement_refinement_key(AbstractRefinement_refinement_key):
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement_refinement_key]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictiveRefinement_refinement_key, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement_refinement_key]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PredictiveRefinement_refinement_key, name)
    __repr__ = _swig_repr

    def __init__(self, point: 'HashGridPoint', seq: 'size_t', dim: 'size_t'):
        this = _pysgpp_swig.new_PredictiveRefinement_refinement_key(point, seq, dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDim(self) -> "size_t":
        return _pysgpp_swig.PredictiveRefinement_refinement_key_getDim(self)
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinement_refinement_key
    __del__ = lambda self: None
PredictiveRefinement_refinement_key_swigregister = _pysgpp_swig.PredictiveRefinement_refinement_key_swigregister
PredictiveRefinement_refinement_key_swigregister(PredictiveRefinement_refinement_key)

class PredictiveRefinement(RefinementDecorator):
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictiveRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PredictiveRefinement, name)
    __repr__ = _swig_repr

    def __init__(self, refinement: 'AbstractRefinement'):
        this = _pysgpp_swig.new_PredictiveRefinement(refinement)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def free_refine(self, *args) -> "void":
        return _pysgpp_swig.PredictiveRefinement_free_refine(self, *args)

    def setAlpha(self, alpha: 'DataVector') -> "void":
        return _pysgpp_swig.PredictiveRefinement_setAlpha(self, alpha)
    __swig_destroy__ = _pysgpp_swig.delete_PredictiveRefinement
    __del__ = lambda self: None
PredictiveRefinement_swigregister = _pysgpp_swig.PredictiveRefinement_swigregister
PredictiveRefinement_swigregister(PredictiveRefinement)

class ForwardSelectorRefinementIndicator(RefinementFunctor):
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardSelectorRefinementIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardSelectorRefinementIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', svs: 'DataMatrix', alphas: 'DataVector', w1: 'DataVector', w2: 'DataVector', beta: 'double', threshold: 'double'=0.0, refinementsNum: 'size_t'=1, performUpdate: 'bool'=True):
        this = _pysgpp_swig.new_ForwardSelectorRefinementIndicator(grid, svs, alphas, w1, w2, beta, threshold, refinementsNum, performUpdate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def runOperator(self, storage: 'HashGridStorage', seq: 'size_t') -> "double":
        return _pysgpp_swig.ForwardSelectorRefinementIndicator_runOperator(self, storage, seq)

    def __call__(self, *args) -> "double":
        return _pysgpp_swig.ForwardSelectorRefinementIndicator___call__(self, *args)

    def update(self, point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.ForwardSelectorRefinementIndicator_update(self, point)
    __swig_destroy__ = _pysgpp_swig.delete_ForwardSelectorRefinementIndicator
    __del__ = lambda self: None
ForwardSelectorRefinementIndicator_swigregister = _pysgpp_swig.ForwardSelectorRefinementIndicator_swigregister
ForwardSelectorRefinementIndicator_swigregister(ForwardSelectorRefinementIndicator)

class ForwardSelectorRefinement_refinement_key(AbstractRefinement_refinement_key):
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement_refinement_key]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardSelectorRefinement_refinement_key, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement_refinement_key]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardSelectorRefinement_refinement_key, name)
    __repr__ = _swig_repr

    def __init__(self, point: 'HashGridPoint', seq: 'size_t', dim: 'size_t'):
        this = _pysgpp_swig.new_ForwardSelectorRefinement_refinement_key(point, seq, dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDim(self) -> "size_t":
        return _pysgpp_swig.ForwardSelectorRefinement_refinement_key_getDim(self)
    __swig_destroy__ = _pysgpp_swig.delete_ForwardSelectorRefinement_refinement_key
    __del__ = lambda self: None
ForwardSelectorRefinement_refinement_key_swigregister = _pysgpp_swig.ForwardSelectorRefinement_refinement_key_swigregister
ForwardSelectorRefinement_refinement_key_swigregister(ForwardSelectorRefinement_refinement_key)

class ForwardSelectorRefinement(RefinementDecorator):
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardSelectorRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardSelectorRefinement, name)
    __repr__ = _swig_repr

    def __init__(self, refinement: 'AbstractRefinement'):
        this = _pysgpp_swig.new_ForwardSelectorRefinement(refinement)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def free_refine(self, *args) -> "void":
        return _pysgpp_swig.ForwardSelectorRefinement_free_refine(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ForwardSelectorRefinement
    __del__ = lambda self: None
ForwardSelectorRefinement_swigregister = _pysgpp_swig.ForwardSelectorRefinement_swigregister
ForwardSelectorRefinement_swigregister(ForwardSelectorRefinement)

class ImpurityRefinementIndicator(RefinementFunctor):
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpurityRefinementIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpurityRefinementIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', dataset: 'DataMatrix', alphas: 'DataVector', w1: 'DataVector', w2: 'DataVector', classesComputed: 'DataVector', threshold: 'double'=0.0, refinementsNum: 'size_t'=1):
        this = _pysgpp_swig.new_ImpurityRefinementIndicator(grid, dataset, alphas, w1, w2, classesComputed, threshold, refinementsNum)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, *args) -> "double":
        return _pysgpp_swig.ImpurityRefinementIndicator___call__(self, *args)

    def update(self, point: 'HashGridPoint') -> "void":
        return _pysgpp_swig.ImpurityRefinementIndicator_update(self, point)
    __swig_setmethods__["alphas"] = _pysgpp_swig.ImpurityRefinementIndicator_alphas_set
    __swig_getmethods__["alphas"] = _pysgpp_swig.ImpurityRefinementIndicator_alphas_get
    if _newclass:
        alphas = _swig_property(_pysgpp_swig.ImpurityRefinementIndicator_alphas_get, _pysgpp_swig.ImpurityRefinementIndicator_alphas_set)
    __swig_setmethods__["w1"] = _pysgpp_swig.ImpurityRefinementIndicator_w1_set
    __swig_getmethods__["w1"] = _pysgpp_swig.ImpurityRefinementIndicator_w1_get
    if _newclass:
        w1 = _swig_property(_pysgpp_swig.ImpurityRefinementIndicator_w1_get, _pysgpp_swig.ImpurityRefinementIndicator_w1_set)
    __swig_setmethods__["w2"] = _pysgpp_swig.ImpurityRefinementIndicator_w2_set
    __swig_getmethods__["w2"] = _pysgpp_swig.ImpurityRefinementIndicator_w2_get
    if _newclass:
        w2 = _swig_property(_pysgpp_swig.ImpurityRefinementIndicator_w2_get, _pysgpp_swig.ImpurityRefinementIndicator_w2_set)
    __swig_destroy__ = _pysgpp_swig.delete_ImpurityRefinementIndicator
    __del__ = lambda self: None
ImpurityRefinementIndicator_swigregister = _pysgpp_swig.ImpurityRefinementIndicator_swigregister
ImpurityRefinementIndicator_swigregister(ImpurityRefinementIndicator)

class ImpurityRefinement_refinement_key(AbstractRefinement_refinement_key):
    __swig_setmethods__ = {}
    for _s in [AbstractRefinement_refinement_key]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpurityRefinement_refinement_key, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefinement_refinement_key]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpurityRefinement_refinement_key, name)
    __repr__ = _swig_repr

    def __init__(self, point: 'HashGridPoint', seq: 'size_t', dim: 'size_t'):
        this = _pysgpp_swig.new_ImpurityRefinement_refinement_key(point, seq, dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDim(self) -> "size_t":
        return _pysgpp_swig.ImpurityRefinement_refinement_key_getDim(self)
    __swig_destroy__ = _pysgpp_swig.delete_ImpurityRefinement_refinement_key
    __del__ = lambda self: None
ImpurityRefinement_refinement_key_swigregister = _pysgpp_swig.ImpurityRefinement_refinement_key_swigregister
ImpurityRefinement_refinement_key_swigregister(ImpurityRefinement_refinement_key)

class ImpurityRefinement(RefinementDecorator):
    __swig_setmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpurityRefinement, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementDecorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpurityRefinement, name)
    __repr__ = _swig_repr

    def __init__(self, refinement: 'AbstractRefinement'):
        this = _pysgpp_swig.new_ImpurityRefinement(refinement)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def free_refine(self, *args) -> "void":
        return _pysgpp_swig.ImpurityRefinement_free_refine(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_ImpurityRefinement
    __del__ = lambda self: None
ImpurityRefinement_swigregister = _pysgpp_swig.ImpurityRefinement_swigregister
ImpurityRefinement_swigregister(ImpurityRefinement)

class StandardGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_StandardGridGenerator(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_StandardGridGenerator
    __del__ = lambda self: None

    def regular(self, *args) -> "void":
        return _pysgpp_swig.StandardGridGenerator_regular(self, *args)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.StandardGridGenerator_cliques(self, *args)

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.StandardGridGenerator_refine(self, func, addedPoints)

    def refineInter(self, *args) -> "void":
        return _pysgpp_swig.StandardGridGenerator_refineInter(self, *args)
StandardGridGenerator_swigregister = _pysgpp_swig.StandardGridGenerator_swigregister
StandardGridGenerator_swigregister(StandardGridGenerator)

class L0BoundaryGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L0BoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L0BoundaryGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_L0BoundaryGridGenerator(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_L0BoundaryGridGenerator
    __del__ = lambda self: None

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.L0BoundaryGridGenerator_refine(self, func, addedPoints)
L0BoundaryGridGenerator_swigregister = _pysgpp_swig.L0BoundaryGridGenerator_swigregister
L0BoundaryGridGenerator_swigregister(L0BoundaryGridGenerator)

class PrewaveletGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrewaveletGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrewaveletGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage', shadowstorage: 'HashGridStorage'):
        this = _pysgpp_swig.new_PrewaveletGridGenerator(storage, shadowstorage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PrewaveletGridGenerator
    __del__ = lambda self: None

    def regular(self, *args) -> "void":
        return _pysgpp_swig.PrewaveletGridGenerator_regular(self, *args)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.PrewaveletGridGenerator_cliques(self, *args)

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.PrewaveletGridGenerator_refine(self, func, addedPoints)
PrewaveletGridGenerator_swigregister = _pysgpp_swig.PrewaveletGridGenerator_swigregister
PrewaveletGridGenerator_swigregister(PrewaveletGridGenerator)

class PeriodicGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodicGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_PeriodicGridGenerator(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_PeriodicGridGenerator
    __del__ = lambda self: None

    def regular(self, *args) -> "void":
        return _pysgpp_swig.PeriodicGridGenerator_regular(self, *args)

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.PeriodicGridGenerator_refine(self, func, addedPoints)

    def cliques(self, *args) -> "void":
        return _pysgpp_swig.PeriodicGridGenerator_cliques(self, *args)
PeriodicGridGenerator_swigregister = _pysgpp_swig.PeriodicGridGenerator_swigregister
PeriodicGridGenerator_swigregister(PeriodicGridGenerator)

class StretchedBoundaryGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StretchedBoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StretchedBoundaryGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_StretchedBoundaryGridGenerator(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_StretchedBoundaryGridGenerator
    __del__ = lambda self: None

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.StretchedBoundaryGridGenerator_refine(self, func, addedPoints)
StretchedBoundaryGridGenerator_swigregister = _pysgpp_swig.StretchedBoundaryGridGenerator_swigregister
StretchedBoundaryGridGenerator_swigregister(StretchedBoundaryGridGenerator)

class BoundaryGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage', boundaryLevel: 'sgpp::base::level_t'=1):
        this = _pysgpp_swig.new_BoundaryGridGenerator(storage, boundaryLevel)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_BoundaryGridGenerator
    __del__ = lambda self: None

    def getBoundaryLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.BoundaryGridGenerator_getBoundaryLevel(self)

    def setBoundaryLevel(self, boundaryLevel: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.BoundaryGridGenerator_setBoundaryLevel(self, boundaryLevel)

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.BoundaryGridGenerator_refine(self, func, addedPoints)
BoundaryGridGenerator_swigregister = _pysgpp_swig.BoundaryGridGenerator_swigregister
BoundaryGridGenerator_swigregister(BoundaryGridGenerator)

class SquareRootGridGenerator(GridGenerator):
    __swig_setmethods__ = {}
    for _s in [GridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquareRootGridGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquareRootGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_SquareRootGridGenerator(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SquareRootGridGenerator
    __del__ = lambda self: None

    def refine(self, func: 'RefinementFunctor', addedPoints: 'IndexVector'=None) -> "void":
        return _pysgpp_swig.SquareRootGridGenerator_refine(self, func, addedPoints)
SquareRootGridGenerator_swigregister = _pysgpp_swig.SquareRootGridGenerator_swigregister
SquareRootGridGenerator_swigregister(SquareRootGridGenerator)

class SurplusVolumeRefinementFunctor(RefinementFunctor):
    __swig_setmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurplusVolumeRefinementFunctor, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurplusVolumeRefinementFunctor, name)
    __repr__ = _swig_repr

    def __init__(self, alpha: 'DataVector', refinements_num: 'size_t'=1, threshold: 'double'=0.0):
        this = _pysgpp_swig.new_SurplusVolumeRefinementFunctor(alpha, refinements_num, threshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SurplusVolumeRefinementFunctor
    __del__ = lambda self: None
SurplusVolumeRefinementFunctor_swigregister = _pysgpp_swig.SurplusVolumeRefinementFunctor_swigregister
SurplusVolumeRefinementFunctor_swigregister(SurplusVolumeRefinementFunctor)

class GridDataBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridDataBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridDataBase, name)
    __repr__ = _swig_repr
    ascii = _pysgpp_swig.GridDataBase_ascii
    binary = _pysgpp_swig.GridDataBase_binary

    def __init__(self, *args):
        this = _pysgpp_swig.new_GridDataBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GridDataBase
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _pysgpp_swig.GridDataBase_clear(self)

    def toString(self) -> "std::string":
        return _pysgpp_swig.GridDataBase_toString(self)

    def hasKey(self, gi: 'HashGridPoint') -> "bool":
        return _pysgpp_swig.GridDataBase_hasKey(self, gi)

    def set(self, gi: 'HashGridPoint', value: 'double') -> "void":
        return _pysgpp_swig.GridDataBase_set(self, gi, value)

    def setValuesFor(self, grid: 'Grid', values: 'DataVector') -> "void":
        return _pysgpp_swig.GridDataBase_setValuesFor(self, grid, values)

    def size(self) -> "size_t":
        return _pysgpp_swig.GridDataBase_size(self)

    def dim(self) -> "size_t":
        return _pysgpp_swig.GridDataBase_dim(self)

    def get(self, gi: 'HashGridPoint') -> "double":
        return _pysgpp_swig.GridDataBase_get(self, gi)

    def remove(self, gi: 'HashGridPoint') -> "void":
        return _pysgpp_swig.GridDataBase_remove(self, gi)

    def save(self, *args) -> "void":
        return _pysgpp_swig.GridDataBase_save(self, *args)

    def load(self, filename: 'std::string const') -> "void":
        return _pysgpp_swig.GridDataBase_load(self, filename)

    def begin(self) -> "sgpp::base::GridDataBase::grid_map_iterator":
        return _pysgpp_swig.GridDataBase_begin(self)

    def end(self) -> "sgpp::base::GridDataBase::grid_map_iterator":
        return _pysgpp_swig.GridDataBase_end(self)
GridDataBase_swigregister = _pysgpp_swig.GridDataBase_swigregister
GridDataBase_swigregister(GridDataBase)

class ScreenOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_ScreenOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_ScreenOutput
    __del__ = lambda self: None

    def update(self, progress: 'size_t', status: 'std::string') -> "void":
        return _pysgpp_swig.ScreenOutput_update(self, progress, status)

    def writeTitle(self, appTitle: 'std::string', appAuthor: 'std::string') -> "void":
        return _pysgpp_swig.ScreenOutput_writeTitle(self, appTitle, appAuthor)

    def writeHelp(self, helpText: 'std::string') -> "void":
        return _pysgpp_swig.ScreenOutput_writeHelp(self, helpText)

    def writeStartSolve(self, text: 'std::string') -> "void":
        return _pysgpp_swig.ScreenOutput_writeStartSolve(self, text)

    def writeEmptyLines(self, numLines: 'size_t') -> "void":
        return _pysgpp_swig.ScreenOutput_writeEmptyLines(self, numLines)
ScreenOutput_swigregister = _pysgpp_swig.ScreenOutput_swigregister
ScreenOutput_swigregister(ScreenOutput)

class OperationEvalPeriodic(OperationEval):
    __swig_setmethods__ = {}
    for _s in [OperationEval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationEvalPeriodic, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationEval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationEvalPeriodic, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_OperationEvalPeriodic(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationEvalPeriodic
    __del__ = lambda self: None
OperationEvalPeriodic_swigregister = _pysgpp_swig.OperationEvalPeriodic_swigregister
OperationEvalPeriodic_swigregister(OperationEvalPeriodic)

class OperationMultipleEvalPeriodic(OperationMultipleEval):
    __swig_setmethods__ = {}
    for _s in [OperationMultipleEval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMultipleEvalPeriodic, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationMultipleEval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMultipleEvalPeriodic, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', dataset: 'DataMatrix'):
        this = _pysgpp_swig.new_OperationMultipleEvalPeriodic(grid, dataset)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleEvalPeriodic
    __del__ = lambda self: None
OperationMultipleEvalPeriodic_swigregister = _pysgpp_swig.OperationMultipleEvalPeriodic_swigregister
OperationMultipleEvalPeriodic_swigregister(OperationMultipleEvalPeriodic)

class QuadRule1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadRule1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadRule1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_QuadRule1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_QuadRule1D
    __del__ = lambda self: None

    def getMaxSupportedLevel(self) -> "size_t":
        return _pysgpp_swig.QuadRule1D_getMaxSupportedLevel(self)

    def getLevelPointsAndWeights(self, level: 'size_t', coordinates: 'DataVector', weights: 'DataVector') -> "void":
        return _pysgpp_swig.QuadRule1D_getLevelPointsAndWeights(self, level, coordinates, weights)
    __swig_setmethods__["coordinatesWeights"] = _pysgpp_swig.QuadRule1D_coordinatesWeights_set
    __swig_getmethods__["coordinatesWeights"] = _pysgpp_swig.QuadRule1D_coordinatesWeights_get
    if _newclass:
        coordinatesWeights = _swig_property(_pysgpp_swig.QuadRule1D_coordinatesWeights_get, _pysgpp_swig.QuadRule1D_coordinatesWeights_set)
QuadRule1D_swigregister = _pysgpp_swig.QuadRule1D_swigregister
QuadRule1D_swigregister(QuadRule1D)

class GaussLegendreQuadRule1D(QuadRule1D):
    __swig_setmethods__ = {}
    for _s in [QuadRule1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLegendreQuadRule1D, name, value)
    __swig_getmethods__ = {}
    for _s in [QuadRule1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLegendreQuadRule1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_GaussLegendreQuadRule1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GaussLegendreQuadRule1D
    __del__ = lambda self: None

    def getLevelPointsAndWeightsNormalized(self, level: 'size_t', coordinates: 'DataVector', weights: 'DataVector') -> "void":
        return _pysgpp_swig.GaussLegendreQuadRule1D_getLevelPointsAndWeightsNormalized(self, level, coordinates, weights)
    if _newclass:
        getInstance = staticmethod(_pysgpp_swig.GaussLegendreQuadRule1D_getInstance)
    else:
        getInstance = _pysgpp_swig.GaussLegendreQuadRule1D_getInstance
GaussLegendreQuadRule1D_swigregister = _pysgpp_swig.GaussLegendreQuadRule1D_swigregister
GaussLegendreQuadRule1D_swigregister(GaussLegendreQuadRule1D)

def GaussLegendreQuadRule1D_getInstance() -> "sgpp::base::GaussLegendreQuadRule1D &":
    return _pysgpp_swig.GaussLegendreQuadRule1D_getInstance()
GaussLegendreQuadRule1D_getInstance = _pysgpp_swig.GaussLegendreQuadRule1D_getInstance

class GaussHermiteQuadRule1D(QuadRule1D):
    __swig_setmethods__ = {}
    for _s in [QuadRule1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussHermiteQuadRule1D, name, value)
    __swig_getmethods__ = {}
    for _s in [QuadRule1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussHermiteQuadRule1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_GaussHermiteQuadRule1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_GaussHermiteQuadRule1D
    __del__ = lambda self: None

    def getLevelPointsAndWeightsNormalized(self, level: 'size_t', coordinates: 'DataVector', weights: 'DataVector', mean: 'double'=0.0, stdd: 'double'=1.0) -> "void":
        return _pysgpp_swig.GaussHermiteQuadRule1D_getLevelPointsAndWeightsNormalized(self, level, coordinates, weights, mean, stdd)
    if _newclass:
        getInstance = staticmethod(_pysgpp_swig.GaussHermiteQuadRule1D_getInstance)
    else:
        getInstance = _pysgpp_swig.GaussHermiteQuadRule1D_getInstance
GaussHermiteQuadRule1D_swigregister = _pysgpp_swig.GaussHermiteQuadRule1D_swigregister
GaussHermiteQuadRule1D_swigregister(GaussHermiteQuadRule1D)

def GaussHermiteQuadRule1D_getInstance() -> "sgpp::base::GaussHermiteQuadRule1D &":
    return _pysgpp_swig.GaussHermiteQuadRule1D_getInstance()
GaussHermiteQuadRule1D_getInstance = _pysgpp_swig.GaussHermiteQuadRule1D_getInstance

class OperationFirstMoment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationFirstMoment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationFirstMoment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationFirstMoment
    __del__ = lambda self: None

    def doQuadrature(self, alpha: 'DataVector', bounds: 'DataMatrix'=None) -> "double":
        return _pysgpp_swig.OperationFirstMoment_doQuadrature(self, alpha, bounds)
OperationFirstMoment_swigregister = _pysgpp_swig.OperationFirstMoment_swigregister
OperationFirstMoment_swigregister(OperationFirstMoment)

class OperationSecondMoment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationSecondMoment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationSecondMoment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationSecondMoment
    __del__ = lambda self: None

    def doQuadrature(self, alpha: 'DataVector', bounds: 'DataMatrix'=None) -> "double":
        return _pysgpp_swig.OperationSecondMoment_doQuadrature(self, alpha, bounds)
OperationSecondMoment_swigregister = _pysgpp_swig.OperationSecondMoment_swigregister
OperationSecondMoment_swigregister(OperationSecondMoment)

class SLinearBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearBase
    __del__ = lambda self: None

    def __init__(self):
        this = _pysgpp_swig.new_SLinearBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SLinearBase_swigregister = _pysgpp_swig.SLinearBase_swigregister
SLinearBase_swigregister(SLinearBase)

class SLinearBoundaryBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearBoundaryBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearBoundaryBase
    __del__ = lambda self: None

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearBoundaryBase_eval(self, *args)

    def __init__(self):
        this = _pysgpp_swig.new_SLinearBoundaryBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SLinearBoundaryBase_swigregister = _pysgpp_swig.SLinearBoundaryBase_swigregister
SLinearBoundaryBase_swigregister(SLinearBoundaryBase)

class SLinearClenshawCurtisBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearClenshawCurtisBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_SLinearClenshawCurtisBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearClenshawCurtisBase
    __del__ = lambda self: None

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearClenshawCurtisBase_eval(self, *args)
SLinearClenshawCurtisBase_swigregister = _pysgpp_swig.SLinearClenshawCurtisBase_swigregister
SLinearClenshawCurtisBase_swigregister(SLinearClenshawCurtisBase)

class SLinearClenshawCurtisBoundaryBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearClenshawCurtisBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearClenshawCurtisBoundaryBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_SLinearClenshawCurtisBoundaryBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearClenshawCurtisBoundaryBase
    __del__ = lambda self: None

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearClenshawCurtisBoundaryBase_eval(self, *args)
SLinearClenshawCurtisBoundaryBase_swigregister = _pysgpp_swig.SLinearClenshawCurtisBoundaryBase_swigregister
SLinearClenshawCurtisBoundaryBase_swigregister(SLinearClenshawCurtisBoundaryBase)

class SLinearModifiedClenshawCurtisBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearModifiedClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearModifiedClenshawCurtisBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_SLinearModifiedClenshawCurtisBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SLinearModifiedClenshawCurtisBase
    __del__ = lambda self: None

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SLinearModifiedClenshawCurtisBase_eval(self, *args)

    def evalHierToTop(self, level: 'unsigned int', index: 'unsigned int', coeffs: 'DataVector', pos: 'double') -> "double":
        return _pysgpp_swig.SLinearModifiedClenshawCurtisBase_evalHierToTop(self, level, index, coeffs, pos)
SLinearModifiedClenshawCurtisBase_swigregister = _pysgpp_swig.SLinearModifiedClenshawCurtisBase_swigregister
SLinearModifiedClenshawCurtisBase_swigregister(SLinearModifiedClenshawCurtisBase)

class SLinearStretchedBase(SLinearBase):
    __swig_setmethods__ = {}
    for _s in [SLinearBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearStretchedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SLinearBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearStretchedBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearStretchedBase
    __del__ = lambda self: None

    def stretchedEval(self, p: 'double', pos0: 'double', pos1: 'double') -> "double":
        return _pysgpp_swig.SLinearStretchedBase_stretchedEval(self, p, pos0, pos1)

    def __init__(self):
        this = _pysgpp_swig.new_SLinearStretchedBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SLinearStretchedBase_swigregister = _pysgpp_swig.SLinearStretchedBase_swigregister
SLinearStretchedBase_swigregister(SLinearStretchedBase)

class SLinearStretchedBoundaryBase(SLinearBoundaryBase):
    __swig_setmethods__ = {}
    for _s in [SLinearBoundaryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearStretchedBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SLinearBoundaryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearStretchedBoundaryBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearStretchedBoundaryBase
    __del__ = lambda self: None

    def stretchedEval(self, p: 'double', pos0: 'double', pos1: 'double') -> "double":
        return _pysgpp_swig.SLinearStretchedBoundaryBase_stretchedEval(self, p, pos0, pos1)

    def __init__(self):
        this = _pysgpp_swig.new_SLinearStretchedBoundaryBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SLinearStretchedBoundaryBase_swigregister = _pysgpp_swig.SLinearStretchedBoundaryBase_swigregister
SLinearStretchedBoundaryBase_swigregister(SLinearStretchedBoundaryBase)

class SLinearModifiedBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLinearModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLinearModifiedBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SLinearModifiedBase
    __del__ = lambda self: None

    def __init__(self):
        this = _pysgpp_swig.new_SLinearModifiedBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SLinearModifiedBase_swigregister = _pysgpp_swig.SLinearModifiedBase_swigregister
SLinearModifiedBase_swigregister(SLinearModifiedBase)

class SPolyBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyBase, name)
    __repr__ = _swig_repr

    def __init__(self, degree: 'size_t'):
        this = _pysgpp_swig.new_SPolyBase(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyBase
    __del__ = lambda self: None

    def evalHierToTop(self, level: 'unsigned int', index: 'unsigned int', coeffs: 'DataVector', pos: 'double') -> "double":
        return _pysgpp_swig.SPolyBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: 'unsigned int', index: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SPolyBase_evalDx(self, level, index, x)

    def evalBasis(self, level: 'unsigned int', index: 'unsigned int', p: 'double') -> "double":
        return _pysgpp_swig.SPolyBase_evalBasis(self, level, index, p)
SPolyBase_swigregister = _pysgpp_swig.SPolyBase_swigregister
SPolyBase_swigregister(SPolyBase)

class SPolyBoundaryBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyBoundaryBase, name)
    __repr__ = _swig_repr

    def __init__(self, degree: 'size_t'):
        this = _pysgpp_swig.new_SPolyBoundaryBase(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyBoundaryBase
    __del__ = lambda self: None

    def evalHierToTop(self, level: 'unsigned int', index: 'unsigned int', coeffs: 'DataVector', pos: 'double') -> "double":
        return _pysgpp_swig.SPolyBoundaryBase_evalHierToTop(self, level, index, coeffs, pos)

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyBoundaryBase_eval(self, *args)

    def evalDx(self, level: 'unsigned int', index: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SPolyBoundaryBase_evalDx(self, level, index, x)
SPolyBoundaryBase_swigregister = _pysgpp_swig.SPolyBoundaryBase_swigregister
SPolyBoundaryBase_swigregister(SPolyBoundaryBase)

class SPolyModifiedBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyModifiedBase, name)
    __repr__ = _swig_repr

    def __init__(self, degree: 'size_t'):
        this = _pysgpp_swig.new_SPolyModifiedBase(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyModifiedBase
    __del__ = lambda self: None

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyModifiedBase_eval(self, *args)

    def evalDx(self, level: 'unsigned int', index: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SPolyModifiedBase_evalDx(self, level, index, x)

    def evalHierToTop(self, level: 'unsigned int', index: 'unsigned int', coeffs: 'DataVector', pos: 'double') -> "double":
        return _pysgpp_swig.SPolyModifiedBase_evalHierToTop(self, level, index, coeffs, pos)
SPolyModifiedBase_swigregister = _pysgpp_swig.SPolyModifiedBase_swigregister
SPolyModifiedBase_swigregister(SPolyModifiedBase)

class SPolyClenshawCurtisBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyClenshawCurtisBase, name)
    __repr__ = _swig_repr

    def __init__(self, degree: 'size_t'):
        this = _pysgpp_swig.new_SPolyClenshawCurtisBase(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyClenshawCurtisBase
    __del__ = lambda self: None

    def evalHierToTop(self, level: 'unsigned int', index: 'unsigned int', coeffs: 'DataVector', pos: 'double') -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: 'unsigned int', index: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBase_evalDx(self, level, index, x)

    def evalBasis(self, level: 'unsigned int', index: 'unsigned int', p: 'double') -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBase_evalBasis(self, level, index, p)
SPolyClenshawCurtisBase_swigregister = _pysgpp_swig.SPolyClenshawCurtisBase_swigregister
SPolyClenshawCurtisBase_swigregister(SPolyClenshawCurtisBase)

class SPolyClenshawCurtisBoundaryBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyClenshawCurtisBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyClenshawCurtisBoundaryBase, name)
    __repr__ = _swig_repr

    def __init__(self, degree: 'size_t'):
        this = _pysgpp_swig.new_SPolyClenshawCurtisBoundaryBase(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyClenshawCurtisBoundaryBase
    __del__ = lambda self: None

    def evalHierToTop(self, level: 'unsigned int', index: 'unsigned int', coeffs: 'DataVector', pos: 'double') -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: 'unsigned int', index: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_evalDx(self, level, index, x)

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_eval(self, *args)
SPolyClenshawCurtisBoundaryBase_swigregister = _pysgpp_swig.SPolyClenshawCurtisBoundaryBase_swigregister
SPolyClenshawCurtisBoundaryBase_swigregister(SPolyClenshawCurtisBoundaryBase)

class SPolyModifiedClenshawCurtisBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPolyModifiedClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPolyModifiedClenshawCurtisBase, name)
    __repr__ = _swig_repr

    def __init__(self, degree: 'size_t'):
        this = _pysgpp_swig.new_SPolyModifiedClenshawCurtisBase(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SPolyModifiedClenshawCurtisBase
    __del__ = lambda self: None

    def eval(self, *args) -> "double":
        return _pysgpp_swig.SPolyModifiedClenshawCurtisBase_eval(self, *args)

    def evalHierToTop(self, level: 'unsigned int', index: 'unsigned int', coeffs: 'DataVector', pos: 'double') -> "double":
        return _pysgpp_swig.SPolyModifiedClenshawCurtisBase_evalHierToTop(self, level, index, coeffs, pos)

    def evalDx(self, level: 'unsigned int', index: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SPolyModifiedClenshawCurtisBase_evalDx(self, level, index, x)
SPolyModifiedClenshawCurtisBase_swigregister = _pysgpp_swig.SPolyModifiedClenshawCurtisBase_swigregister
SPolyModifiedClenshawCurtisBase_swigregister(SPolyModifiedClenshawCurtisBase)

class SWaveletBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWaveletBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWaveletBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletBase
    __del__ = lambda self: None

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SWaveletBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SWaveletBase_evalDxDx(self, l, i, x)

    def __init__(self):
        this = _pysgpp_swig.new_SWaveletBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SWaveletBase_swigregister = _pysgpp_swig.SWaveletBase_swigregister
SWaveletBase_swigregister(SWaveletBase)

class SWaveletBoundaryBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWaveletBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWaveletBoundaryBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletBoundaryBase
    __del__ = lambda self: None

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SWaveletBoundaryBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SWaveletBoundaryBase_evalDxDx(self, l, i, x)

    def __init__(self):
        this = _pysgpp_swig.new_SWaveletBoundaryBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SWaveletBoundaryBase_swigregister = _pysgpp_swig.SWaveletBoundaryBase_swigregister
SWaveletBoundaryBase_swigregister(SWaveletBoundaryBase)

class SWaveletModifiedBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWaveletModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWaveletModifiedBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SWaveletModifiedBase
    __del__ = lambda self: None

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SWaveletModifiedBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SWaveletModifiedBase_evalDxDx(self, l, i, x)

    def __init__(self):
        this = _pysgpp_swig.new_SWaveletModifiedBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SWaveletModifiedBase_swigregister = _pysgpp_swig.SWaveletModifiedBase_swigregister
SWaveletModifiedBase_swigregister(SWaveletModifiedBase)

class SBsplineBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SBsplineBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineBase
    __del__ = lambda self: None

    def uniformBSpline(self, x: 'double', p: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineBase_uniformBSpline(self, x, p)

    def uniformBSplineDx(self, x: 'double', p: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineBase_uniformBSplineDx(self, x, p)

    def uniformBSplineDxDx(self, x: 'double', p: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineBase_uniformBSplineDxDx(self, x, p)

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineBase_evalDxDx(self, l, i, x)
SBsplineBase_swigregister = _pysgpp_swig.SBsplineBase_swigregister
SBsplineBase_swigregister(SBsplineBase)

class SBsplineBoundaryBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineBoundaryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineBoundaryBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SBsplineBoundaryBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineBoundaryBase
    __del__ = lambda self: None

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineBoundaryBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineBoundaryBase_evalDxDx(self, l, i, x)
SBsplineBoundaryBase_swigregister = _pysgpp_swig.SBsplineBoundaryBase_swigregister
SBsplineBoundaryBase_swigregister(SBsplineBoundaryBase)

class SBsplineClenshawCurtisBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineClenshawCurtisBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SBsplineClenshawCurtisBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineClenshawCurtisBase
    __del__ = lambda self: None

    def nonUniformBSpline(self, x: 'double', p: 'size_t', k: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSpline(self, x, p, k)

    def nonUniformBSplineDx(self, x: 'double', p: 'size_t', k: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSplineDx(self, x, p, k)

    def nonUniformBSplineDxDx(self, x: 'double', p: 'size_t', k: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_nonUniformBSplineDxDx(self, x, p, k)

    def clenshawCurtisPoint(self, l: 'unsigned int', i: 'unsigned int') -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_clenshawCurtisPoint(self, l, i)

    def constructKnots(self, l: 'unsigned int', i: 'unsigned int') -> "void":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_constructKnots(self, l, i)

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineClenshawCurtisBase_evalDxDx(self, l, i, x)
SBsplineClenshawCurtisBase_swigregister = _pysgpp_swig.SBsplineClenshawCurtisBase_swigregister
SBsplineClenshawCurtisBase_swigregister(SBsplineClenshawCurtisBase)

class SBsplineModifiedBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineModifiedBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SBsplineModifiedBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineModifiedBase
    __del__ = lambda self: None

    def modifiedBSpline(self, x: 'double', p: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSpline(self, x, p)

    def modifiedBSplineDx(self, x: 'double', p: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSplineDx(self, x, p)

    def modifiedBSplineDxDx(self, x: 'double', p: 'size_t') -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_modifiedBSplineDxDx(self, x, p)

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineModifiedBase_evalDxDx(self, l, i, x)
SBsplineModifiedBase_swigregister = _pysgpp_swig.SBsplineModifiedBase_swigregister
SBsplineModifiedBase_swigregister(SBsplineModifiedBase)

class SBsplineModifiedClenshawCurtisBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBsplineModifiedClenshawCurtisBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBsplineModifiedClenshawCurtisBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SBsplineModifiedClenshawCurtisBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SBsplineModifiedClenshawCurtisBase
    __del__ = lambda self: None

    def clenshawCurtisPoint(self, l: 'unsigned int', i: 'unsigned int') -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_clenshawCurtisPoint(self, l, i)

    def clenshawCurtisPointNegativeIndex(self, l: 'unsigned int', ni: 'unsigned int') -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_clenshawCurtisPointNegativeIndex(self, l, ni)

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_evalDxDx(self, l, i, x)
SBsplineModifiedClenshawCurtisBase_swigregister = _pysgpp_swig.SBsplineModifiedClenshawCurtisBase_swigregister
SBsplineModifiedClenshawCurtisBase_swigregister(SBsplineModifiedClenshawCurtisBase)

class SFundamentalNotAKnotSplineBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFundamentalNotAKnotSplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SFundamentalNotAKnotSplineBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SFundamentalNotAKnotSplineBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalNotAKnotSplineBase
    __del__ = lambda self: None

    def getCoefficients(self, l: 'unsigned int', i: 'unsigned int', coefficients: 'DoubleVector') -> "int":
        return _pysgpp_swig.SFundamentalNotAKnotSplineBase_getCoefficients(self, l, i, coefficients)

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SFundamentalNotAKnotSplineBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SFundamentalNotAKnotSplineBase_evalDxDx(self, l, i, x)
SFundamentalNotAKnotSplineBase_swigregister = _pysgpp_swig.SFundamentalNotAKnotSplineBase_swigregister
SFundamentalNotAKnotSplineBase_swigregister(SFundamentalNotAKnotSplineBase)

class SFundamentalSplineBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFundamentalSplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SFundamentalSplineBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SFundamentalSplineBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalSplineBase
    __del__ = lambda self: None

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SFundamentalSplineBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SFundamentalSplineBase_evalDxDx(self, l, i, x)
SFundamentalSplineBase_swigregister = _pysgpp_swig.SFundamentalSplineBase_swigregister
SFundamentalSplineBase_swigregister(SFundamentalSplineBase)

class SFundamentalSplineModifiedBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFundamentalSplineModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SFundamentalSplineModifiedBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SFundamentalSplineModifiedBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SFundamentalSplineModifiedBase
    __del__ = lambda self: None

    def evalDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SFundamentalSplineModifiedBase_evalDx(self, l, i, x)

    def evalDxDx(self, l: 'unsigned int', i: 'unsigned int', x: 'double') -> "double":
        return _pysgpp_swig.SFundamentalSplineModifiedBase_evalDxDx(self, l, i, x)
SFundamentalSplineModifiedBase_swigregister = _pysgpp_swig.SFundamentalSplineModifiedBase_swigregister
SFundamentalSplineModifiedBase_swigregister(SFundamentalSplineModifiedBase)

class SWeaklyFundamentalSplineBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWeaklyFundamentalSplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWeaklyFundamentalSplineBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SWeaklyFundamentalSplineBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalSplineBase
    __del__ = lambda self: None
SWeaklyFundamentalSplineBase_swigregister = _pysgpp_swig.SWeaklyFundamentalSplineBase_swigregister
SWeaklyFundamentalSplineBase_swigregister(SWeaklyFundamentalSplineBase)

class SWeaklyFundamentalSplineBaseDeriv1(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWeaklyFundamentalSplineBaseDeriv1, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWeaklyFundamentalSplineBaseDeriv1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SWeaklyFundamentalSplineBaseDeriv1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalSplineBaseDeriv1
    __del__ = lambda self: None
SWeaklyFundamentalSplineBaseDeriv1_swigregister = _pysgpp_swig.SWeaklyFundamentalSplineBaseDeriv1_swigregister
SWeaklyFundamentalSplineBaseDeriv1_swigregister(SWeaklyFundamentalSplineBaseDeriv1)

class SWeaklyFundamentalSplineBaseDeriv2(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWeaklyFundamentalSplineBaseDeriv2, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWeaklyFundamentalSplineBaseDeriv2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SWeaklyFundamentalSplineBaseDeriv2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalSplineBaseDeriv2
    __del__ = lambda self: None
SWeaklyFundamentalSplineBaseDeriv2_swigregister = _pysgpp_swig.SWeaklyFundamentalSplineBaseDeriv2_swigregister
SWeaklyFundamentalSplineBaseDeriv2_swigregister(SWeaklyFundamentalSplineBaseDeriv2)

class SWeaklyFundamentalNotAKnotSplineBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWeaklyFundamentalNotAKnotSplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWeaklyFundamentalNotAKnotSplineBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SWeaklyFundamentalNotAKnotSplineBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalNotAKnotSplineBase
    __del__ = lambda self: None
SWeaklyFundamentalNotAKnotSplineBase_swigregister = _pysgpp_swig.SWeaklyFundamentalNotAKnotSplineBase_swigregister
SWeaklyFundamentalNotAKnotSplineBase_swigregister(SWeaklyFundamentalNotAKnotSplineBase)

class SWeaklyFundamentalNotAKnotSplineBaseDeriv1(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWeaklyFundamentalNotAKnotSplineBaseDeriv1, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWeaklyFundamentalNotAKnotSplineBaseDeriv1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SWeaklyFundamentalNotAKnotSplineBaseDeriv1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalNotAKnotSplineBaseDeriv1
    __del__ = lambda self: None
SWeaklyFundamentalNotAKnotSplineBaseDeriv1_swigregister = _pysgpp_swig.SWeaklyFundamentalNotAKnotSplineBaseDeriv1_swigregister
SWeaklyFundamentalNotAKnotSplineBaseDeriv1_swigregister(SWeaklyFundamentalNotAKnotSplineBaseDeriv1)

class SWeaklyFundamentalNotAKnotSplineBaseDeriv2(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SWeaklyFundamentalNotAKnotSplineBaseDeriv2, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SWeaklyFundamentalNotAKnotSplineBaseDeriv2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SWeaklyFundamentalNotAKnotSplineBaseDeriv2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SWeaklyFundamentalNotAKnotSplineBaseDeriv2
    __del__ = lambda self: None
SWeaklyFundamentalNotAKnotSplineBaseDeriv2_swigregister = _pysgpp_swig.SWeaklyFundamentalNotAKnotSplineBaseDeriv2_swigregister
SWeaklyFundamentalNotAKnotSplineBaseDeriv2_swigregister(SWeaklyFundamentalNotAKnotSplineBaseDeriv2)

class SNaturalBsplineBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNaturalBsplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNaturalBsplineBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNaturalBsplineBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNaturalBsplineBase
    __del__ = lambda self: None
SNaturalBsplineBase_swigregister = _pysgpp_swig.SNaturalBsplineBase_swigregister
SNaturalBsplineBase_swigregister(SNaturalBsplineBase)

class SNotAKnotBsplineBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNotAKnotBsplineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNotAKnotBsplineBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNotAKnotBsplineBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNotAKnotBsplineBase
    __del__ = lambda self: None
SNotAKnotBsplineBase_swigregister = _pysgpp_swig.SNotAKnotBsplineBase_swigregister
SNotAKnotBsplineBase_swigregister(SNotAKnotBsplineBase)

class SNotAKnotBsplineBaseDeriv1(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNotAKnotBsplineBaseDeriv1, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNotAKnotBsplineBaseDeriv1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNotAKnotBsplineBaseDeriv1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNotAKnotBsplineBaseDeriv1
    __del__ = lambda self: None
SNotAKnotBsplineBaseDeriv1_swigregister = _pysgpp_swig.SNotAKnotBsplineBaseDeriv1_swigregister
SNotAKnotBsplineBaseDeriv1_swigregister(SNotAKnotBsplineBaseDeriv1)

class SNotAKnotBsplineBaseDeriv2(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNotAKnotBsplineBaseDeriv2, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNotAKnotBsplineBaseDeriv2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNotAKnotBsplineBaseDeriv2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNotAKnotBsplineBaseDeriv2
    __del__ = lambda self: None
SNotAKnotBsplineBaseDeriv2_swigregister = _pysgpp_swig.SNotAKnotBsplineBaseDeriv2_swigregister
SNotAKnotBsplineBaseDeriv2_swigregister(SNotAKnotBsplineBaseDeriv2)

class SNotAKnotBsplineModifiedBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNotAKnotBsplineModifiedBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNotAKnotBsplineModifiedBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNotAKnotBsplineModifiedBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNotAKnotBsplineModifiedBase
    __del__ = lambda self: None
SNotAKnotBsplineModifiedBase_swigregister = _pysgpp_swig.SNotAKnotBsplineModifiedBase_swigregister
SNotAKnotBsplineModifiedBase_swigregister(SNotAKnotBsplineModifiedBase)

class SNotAKnotBsplineModifiedBaseDeriv1(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNotAKnotBsplineModifiedBaseDeriv1, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNotAKnotBsplineModifiedBaseDeriv1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNotAKnotBsplineModifiedBaseDeriv1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNotAKnotBsplineModifiedBaseDeriv1
    __del__ = lambda self: None
SNotAKnotBsplineModifiedBaseDeriv1_swigregister = _pysgpp_swig.SNotAKnotBsplineModifiedBaseDeriv1_swigregister
SNotAKnotBsplineModifiedBaseDeriv1_swigregister(SNotAKnotBsplineModifiedBaseDeriv1)

class SNotAKnotBsplineModifiedBaseDeriv2(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNotAKnotBsplineModifiedBaseDeriv2, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNotAKnotBsplineModifiedBaseDeriv2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNotAKnotBsplineModifiedBaseDeriv2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNotAKnotBsplineModifiedBaseDeriv2
    __del__ = lambda self: None
SNotAKnotBsplineModifiedBaseDeriv2_swigregister = _pysgpp_swig.SNotAKnotBsplineModifiedBaseDeriv2_swigregister
SNotAKnotBsplineModifiedBaseDeriv2_swigregister(SNotAKnotBsplineModifiedBaseDeriv2)

class SPrewaveletBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPrewaveletBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPrewaveletBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_SPrewaveletBase
    __del__ = lambda self: None

    def __init__(self):
        this = _pysgpp_swig.new_SPrewaveletBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SPrewaveletBase_swigregister = _pysgpp_swig.SPrewaveletBase_swigregister
SPrewaveletBase_swigregister(SPrewaveletBase)

class SNakBsplineBoundaryCombigridBase(SBasis):
    __swig_setmethods__ = {}
    for _s in [SBasis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNakBsplineBoundaryCombigridBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNakBsplineBoundaryCombigridBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_SNakBsplineBoundaryCombigridBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SNakBsplineBoundaryCombigridBase
    __del__ = lambda self: None
SNakBsplineBoundaryCombigridBase_swigregister = _pysgpp_swig.SNakBsplineBoundaryCombigridBase_swigregister
SNakBsplineBoundaryCombigridBase_swigregister(SNakBsplineBoundaryCombigridBase)

class SGetAffectedBasisFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctions, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_SGetAffectedBasisFunctions(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctions
    __del__ = lambda self: None

    def __call__(self, basis: 'SLinearBase', point: 'DataVector') -> "void":
        return _pysgpp_swig.SGetAffectedBasisFunctions___call__(self, basis, point)
SGetAffectedBasisFunctions_swigregister = _pysgpp_swig.SGetAffectedBasisFunctions_swigregister
SGetAffectedBasisFunctions_swigregister(SGetAffectedBasisFunctions)

class SAlgorithmEvaluation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SAlgorithmEvaluation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SAlgorithmEvaluation, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_SAlgorithmEvaluation(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SAlgorithmEvaluation
    __del__ = lambda self: None

    def __call__(self, basis: 'SLinearBase', point: 'DataVector', alpha: 'DataVector') -> "double":
        return _pysgpp_swig.SAlgorithmEvaluation___call__(self, basis, point, alpha)
SAlgorithmEvaluation_swigregister = _pysgpp_swig.SAlgorithmEvaluation_swigregister
SAlgorithmEvaluation_swigregister(SAlgorithmEvaluation)

class SGetAffectedBasisFunctionsBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsBoundaries, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_SGetAffectedBasisFunctionsBoundaries(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctionsBoundaries
    __del__ = lambda self: None

    def __call__(self, basis: 'SLinearBoundaryBase', point: 'DataVector') -> "void":
        return _pysgpp_swig.SGetAffectedBasisFunctionsBoundaries___call__(self, basis, point)
SGetAffectedBasisFunctionsBoundaries_swigregister = _pysgpp_swig.SGetAffectedBasisFunctionsBoundaries_swigregister
SGetAffectedBasisFunctionsBoundaries_swigregister(SGetAffectedBasisFunctionsBoundaries)

class SGetAffectedBasisFunctionsLinearStretchedBoundaries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGetAffectedBasisFunctionsLinearStretchedBoundaries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGetAffectedBasisFunctionsLinearStretchedBoundaries, name)
    __repr__ = _swig_repr

    def __init__(self, storage: 'HashGridStorage'):
        this = _pysgpp_swig.new_SGetAffectedBasisFunctionsLinearStretchedBoundaries(storage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_SGetAffectedBasisFunctionsLinearStretchedBoundaries
    __del__ = lambda self: None

    def __call__(self, basis: 'SLinearStretchedBoundaryBase', point: 'DataVector') -> "void":
        return _pysgpp_swig.SGetAffectedBasisFunctionsLinearStretchedBoundaries___call__(self, basis, point)
SGetAffectedBasisFunctionsLinearStretchedBoundaries_swigregister = _pysgpp_swig.SGetAffectedBasisFunctionsLinearStretchedBoundaries_swigregister
SGetAffectedBasisFunctionsLinearStretchedBoundaries_swigregister(SGetAffectedBasisFunctionsLinearStretchedBoundaries)

class BoundingBox1DVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox1DVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox1DVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.BoundingBox1DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.BoundingBox1DVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.BoundingBox1DVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::BoundingBox1D >::size_type":
        return _pysgpp_swig.BoundingBox1DVector___len__(self)

    def __getslice__(self, i: 'std::vector< sgpp::base::BoundingBox1D >::difference_type', j: 'std::vector< sgpp::base::BoundingBox1D >::difference_type') -> "std::vector< sgpp::base::BoundingBox1D,std::allocator< sgpp::base::BoundingBox1D > > *":
        return _pysgpp_swig.BoundingBox1DVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< sgpp::base::BoundingBox1D >::difference_type', j: 'std::vector< sgpp::base::BoundingBox1D >::difference_type') -> "void":
        return _pysgpp_swig.BoundingBox1DVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::BoundingBox1D >::value_type const &":
        return _pysgpp_swig.BoundingBox1DVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::BoundingBox1D >::value_type":
        return _pysgpp_swig.BoundingBox1DVector_pop(self)

    def append(self, x: 'BoundingBox1D') -> "void":
        return _pysgpp_swig.BoundingBox1DVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.BoundingBox1DVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::BoundingBox1D >::size_type":
        return _pysgpp_swig.BoundingBox1DVector_size(self)

    def swap(self, v: 'BoundingBox1DVector') -> "void":
        return _pysgpp_swig.BoundingBox1DVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::BoundingBox1D >::iterator":
        return _pysgpp_swig.BoundingBox1DVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::BoundingBox1D >::iterator":
        return _pysgpp_swig.BoundingBox1DVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::BoundingBox1D >::reverse_iterator":
        return _pysgpp_swig.BoundingBox1DVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::BoundingBox1D >::reverse_iterator":
        return _pysgpp_swig.BoundingBox1DVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::BoundingBox1D >::allocator_type":
        return _pysgpp_swig.BoundingBox1DVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::BoundingBox1D >::iterator":
        return _pysgpp_swig.BoundingBox1DVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_BoundingBox1DVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'BoundingBox1D') -> "void":
        return _pysgpp_swig.BoundingBox1DVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::BoundingBox1D >::value_type const &":
        return _pysgpp_swig.BoundingBox1DVector_front(self)

    def back(self) -> "std::vector< sgpp::base::BoundingBox1D >::value_type const &":
        return _pysgpp_swig.BoundingBox1DVector_back(self)

    def assign(self, n: 'std::vector< sgpp::base::BoundingBox1D >::size_type', x: 'BoundingBox1D') -> "void":
        return _pysgpp_swig.BoundingBox1DVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.BoundingBox1DVector_insert(self, *args)

    def reserve(self, n: 'std::vector< sgpp::base::BoundingBox1D >::size_type') -> "void":
        return _pysgpp_swig.BoundingBox1DVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::BoundingBox1D >::size_type":
        return _pysgpp_swig.BoundingBox1DVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_BoundingBox1DVector
    __del__ = lambda self: None
BoundingBox1DVector_swigregister = _pysgpp_swig.BoundingBox1DVector_swigregister
BoundingBox1DVector_swigregister(BoundingBox1DVector)

class Stretching1DVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stretching1DVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stretching1DVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.Stretching1DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.Stretching1DVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.Stretching1DVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::base::Stretching1D >::size_type":
        return _pysgpp_swig.Stretching1DVector___len__(self)

    def __getslice__(self, i: 'std::vector< sgpp::base::Stretching1D >::difference_type', j: 'std::vector< sgpp::base::Stretching1D >::difference_type') -> "std::vector< sgpp::base::Stretching1D,std::allocator< sgpp::base::Stretching1D > > *":
        return _pysgpp_swig.Stretching1DVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< sgpp::base::Stretching1D >::difference_type', j: 'std::vector< sgpp::base::Stretching1D >::difference_type') -> "void":
        return _pysgpp_swig.Stretching1DVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::base::Stretching1D >::value_type const &":
        return _pysgpp_swig.Stretching1DVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::base::Stretching1D >::value_type":
        return _pysgpp_swig.Stretching1DVector_pop(self)

    def append(self, x: 'Stretching1D') -> "void":
        return _pysgpp_swig.Stretching1DVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.Stretching1DVector_empty(self)

    def size(self) -> "std::vector< sgpp::base::Stretching1D >::size_type":
        return _pysgpp_swig.Stretching1DVector_size(self)

    def swap(self, v: 'Stretching1DVector') -> "void":
        return _pysgpp_swig.Stretching1DVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::base::Stretching1D >::iterator":
        return _pysgpp_swig.Stretching1DVector_begin(self)

    def end(self) -> "std::vector< sgpp::base::Stretching1D >::iterator":
        return _pysgpp_swig.Stretching1DVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::base::Stretching1D >::reverse_iterator":
        return _pysgpp_swig.Stretching1DVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::base::Stretching1D >::reverse_iterator":
        return _pysgpp_swig.Stretching1DVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.Stretching1DVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::base::Stretching1D >::allocator_type":
        return _pysgpp_swig.Stretching1DVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.Stretching1DVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::base::Stretching1D >::iterator":
        return _pysgpp_swig.Stretching1DVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_Stretching1DVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Stretching1D') -> "void":
        return _pysgpp_swig.Stretching1DVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::base::Stretching1D >::value_type const &":
        return _pysgpp_swig.Stretching1DVector_front(self)

    def back(self) -> "std::vector< sgpp::base::Stretching1D >::value_type const &":
        return _pysgpp_swig.Stretching1DVector_back(self)

    def assign(self, n: 'std::vector< sgpp::base::Stretching1D >::size_type', x: 'Stretching1D') -> "void":
        return _pysgpp_swig.Stretching1DVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.Stretching1DVector_insert(self, *args)

    def reserve(self, n: 'std::vector< sgpp::base::Stretching1D >::size_type') -> "void":
        return _pysgpp_swig.Stretching1DVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::base::Stretching1D >::size_type":
        return _pysgpp_swig.Stretching1DVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_Stretching1DVector
    __del__ = lambda self: None
Stretching1DVector_swigregister = _pysgpp_swig.Stretching1DVector_swigregister
Stretching1DVector_swigregister(Stretching1DVector)


def omp_set_num_threads(num_threads: 'int') -> "void":
    return _pysgpp_swig.omp_set_num_threads(num_threads)
omp_set_num_threads = _pysgpp_swig.omp_set_num_threads
class OptRNG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRNG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptRNG, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_pysgpp_swig.OptRNG_getInstance)
    else:
        getInstance = _pysgpp_swig.OptRNG_getInstance

    def getUniformRN(self, a: 'double'=0.0, b: 'double'=1.0) -> "double":
        return _pysgpp_swig.OptRNG_getUniformRN(self, a, b)

    def getUniformRV(self, vector: 'DataVector', a: 'double'=0.0, b: 'double'=1.0) -> "void":
        return _pysgpp_swig.OptRNG_getUniformRV(self, vector, a, b)

    def getUniformIndexRN(self, size: 'size_t') -> "size_t":
        return _pysgpp_swig.OptRNG_getUniformIndexRN(self, size)

    def getGaussianRN(self, mean: 'double'=0.0, stdDev: 'double'=1.0) -> "double":
        return _pysgpp_swig.OptRNG_getGaussianRN(self, mean, stdDev)

    def getGaussianRV(self, vector: 'DataVector', mean: 'double'=0.0, stdDev: 'double'=1.0) -> "void":
        return _pysgpp_swig.OptRNG_getGaussianRV(self, vector, mean, stdDev)

    def getSeed(self) -> "sgpp::optimization::RandomNumberGenerator::SeedType":
        return _pysgpp_swig.OptRNG_getSeed(self)

    def setSeed(self, *args) -> "void":
        return _pysgpp_swig.OptRNG_setSeed(self, *args)
    __swig_destroy__ = _pysgpp_swig.delete_OptRNG
    __del__ = lambda self: None
OptRNG_swigregister = _pysgpp_swig.OptRNG_swigregister
OptRNG_swigregister(OptRNG)
cvar = _pysgpp_swig.cvar
ARMADILLO_ENABLED = cvar.ARMADILLO_ENABLED
EIGEN_ENABLED = cvar.EIGEN_ENABLED
GMMPP_ENABLED = cvar.GMMPP_ENABLED
UMFPACK_ENABLED = cvar.UMFPACK_ENABLED

def OptRNG_getInstance() -> "sgpp::optimization::RandomNumberGenerator &":
    return _pysgpp_swig.OptRNG_getInstance()
OptRNG_getInstance = _pysgpp_swig.OptRNG_getInstance

class OptScalarFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScalarFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptScalarFunction, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        if self.__class__ == OptScalarFunction:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptScalarFunction(_self, d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScalarFunction
    __del__ = lambda self: None

    def eval(self, *args) -> "void":
        return _pysgpp_swig.OptScalarFunction_eval(self, *args)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.OptScalarFunction_getNumberOfParameters(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::ScalarFunction > &') -> "void":
        return _pysgpp_swig.OptScalarFunction_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptScalarFunction(self)
        return weakref_proxy(self)
OptScalarFunction_swigregister = _pysgpp_swig.OptScalarFunction_swigregister
OptScalarFunction_swigregister(OptScalarFunction)

class OptScalarFunctionGradient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptScalarFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        if self.__class__ == OptScalarFunctionGradient:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptScalarFunctionGradient(_self, d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScalarFunctionGradient
    __del__ = lambda self: None

    def eval(self, x: 'DataVector', gradient: 'DataVector') -> "double":
        return _pysgpp_swig.OptScalarFunctionGradient_eval(self, x, gradient)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.OptScalarFunctionGradient_getNumberOfParameters(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > &') -> "void":
        return _pysgpp_swig.OptScalarFunctionGradient_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptScalarFunctionGradient(self)
        return weakref_proxy(self)
OptScalarFunctionGradient_swigregister = _pysgpp_swig.OptScalarFunctionGradient_swigregister
OptScalarFunctionGradient_swigregister(OptScalarFunctionGradient)

class OptScalarFunctionHessian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptScalarFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        if self.__class__ == OptScalarFunctionHessian:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptScalarFunctionHessian(_self, d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScalarFunctionHessian
    __del__ = lambda self: None

    def eval(self, x: 'DataVector', gradient: 'DataVector', hessian: 'DataMatrix') -> "double":
        return _pysgpp_swig.OptScalarFunctionHessian_eval(self, x, gradient, hessian)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.OptScalarFunctionHessian_getNumberOfParameters(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > &') -> "void":
        return _pysgpp_swig.OptScalarFunctionHessian_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptScalarFunctionHessian(self)
        return weakref_proxy(self)
OptScalarFunctionHessian_swigregister = _pysgpp_swig.OptScalarFunctionHessian_swigregister
OptScalarFunctionHessian_swigregister(OptScalarFunctionHessian)

class OptInterpolantScalarFunction(OptScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantScalarFunction, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', alpha: 'DataVector'):
        this = _pysgpp_swig.new_OptInterpolantScalarFunction(grid, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantScalarFunction
    __del__ = lambda self: None

    def getAlpha(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptInterpolantScalarFunction_getAlpha(self)

    def setAlpha(self, alpha: 'DataVector') -> "void":
        return _pysgpp_swig.OptInterpolantScalarFunction_setAlpha(self, alpha)
OptInterpolantScalarFunction_swigregister = _pysgpp_swig.OptInterpolantScalarFunction_swigregister
OptInterpolantScalarFunction_swigregister(OptInterpolantScalarFunction)

class OptInterpolantScalarFunctionGradient(OptScalarFunctionGradient):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantScalarFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', alpha: 'DataVector'):
        this = _pysgpp_swig.new_OptInterpolantScalarFunctionGradient(grid, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantScalarFunctionGradient
    __del__ = lambda self: None

    def getAlpha(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptInterpolantScalarFunctionGradient_getAlpha(self)

    def setAlpha(self, alpha: 'DataVector') -> "void":
        return _pysgpp_swig.OptInterpolantScalarFunctionGradient_setAlpha(self, alpha)
OptInterpolantScalarFunctionGradient_swigregister = _pysgpp_swig.OptInterpolantScalarFunctionGradient_swigregister
OptInterpolantScalarFunctionGradient_swigregister(OptInterpolantScalarFunctionGradient)

class OptInterpolantScalarFunctionHessian(OptScalarFunctionHessian):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantScalarFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', alpha: 'DataVector'):
        this = _pysgpp_swig.new_OptInterpolantScalarFunctionHessian(grid, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantScalarFunctionHessian
    __del__ = lambda self: None

    def getAlpha(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptInterpolantScalarFunctionHessian_getAlpha(self)

    def setAlpha(self, alpha: 'DataVector') -> "void":
        return _pysgpp_swig.OptInterpolantScalarFunctionHessian_setAlpha(self, alpha)
OptInterpolantScalarFunctionHessian_swigregister = _pysgpp_swig.OptInterpolantScalarFunctionHessian_swigregister
OptInterpolantScalarFunctionHessian_swigregister(OptInterpolantScalarFunctionHessian)

class OptVectorFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptVectorFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptVectorFunction, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', m: 'size_t'):
        if self.__class__ == OptVectorFunction:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptVectorFunction(_self, d, m)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptVectorFunction
    __del__ = lambda self: None

    def eval(self, *args) -> "void":
        return _pysgpp_swig.OptVectorFunction_eval(self, *args)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.OptVectorFunction_getNumberOfParameters(self)

    def getNumberOfComponents(self) -> "size_t":
        return _pysgpp_swig.OptVectorFunction_getNumberOfComponents(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::VectorFunction > &') -> "void":
        return _pysgpp_swig.OptVectorFunction_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptVectorFunction(self)
        return weakref_proxy(self)
OptVectorFunction_swigregister = _pysgpp_swig.OptVectorFunction_swigregister
OptVectorFunction_swigregister(OptVectorFunction)

class OptVectorFunctionGradient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptVectorFunctionGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptVectorFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', m: 'size_t'):
        if self.__class__ == OptVectorFunctionGradient:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptVectorFunctionGradient(_self, d, m)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptVectorFunctionGradient
    __del__ = lambda self: None

    def eval(self, x: 'DataVector', value: 'DataVector', gradient: 'DataMatrix') -> "void":
        return _pysgpp_swig.OptVectorFunctionGradient_eval(self, x, value, gradient)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.OptVectorFunctionGradient_getNumberOfParameters(self)

    def getNumberOfComponents(self) -> "size_t":
        return _pysgpp_swig.OptVectorFunctionGradient_getNumberOfComponents(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::VectorFunctionGradient > &') -> "void":
        return _pysgpp_swig.OptVectorFunctionGradient_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptVectorFunctionGradient(self)
        return weakref_proxy(self)
OptVectorFunctionGradient_swigregister = _pysgpp_swig.OptVectorFunctionGradient_swigregister
OptVectorFunctionGradient_swigregister(OptVectorFunctionGradient)

class OptVectorFunctionHessian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptVectorFunctionHessian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptVectorFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', m: 'size_t'):
        if self.__class__ == OptVectorFunctionHessian:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptVectorFunctionHessian(_self, d, m)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptVectorFunctionHessian
    __del__ = lambda self: None

    def eval(self, x: 'DataVector', value: 'DataVector', gradient: 'DataMatrix', hessian: 'std::vector< sgpp::base::DataMatrix,std::allocator< sgpp::base::DataMatrix > > &') -> "void":
        return _pysgpp_swig.OptVectorFunctionHessian_eval(self, x, value, gradient, hessian)

    def getNumberOfParameters(self) -> "size_t":
        return _pysgpp_swig.OptVectorFunctionHessian_getNumberOfParameters(self)

    def getNumberOfComponents(self) -> "size_t":
        return _pysgpp_swig.OptVectorFunctionHessian_getNumberOfComponents(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::VectorFunctionHessian > &') -> "void":
        return _pysgpp_swig.OptVectorFunctionHessian_clone(self, clone)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptVectorFunctionHessian(self)
        return weakref_proxy(self)
OptVectorFunctionHessian_swigregister = _pysgpp_swig.OptVectorFunctionHessian_swigregister
OptVectorFunctionHessian_swigregister(OptVectorFunctionHessian)

class OptInterpolantVectorFunction(OptVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolantVectorFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolantVectorFunction, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', alpha: 'DataMatrix'):
        this = _pysgpp_swig.new_OptInterpolantVectorFunction(grid, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolantVectorFunction
    __del__ = lambda self: None

    def getAlpha(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptInterpolantVectorFunction_getAlpha(self)

    def setAlpha(self, alpha: 'DataMatrix') -> "void":
        return _pysgpp_swig.OptInterpolantVectorFunction_setAlpha(self, alpha)
OptInterpolantVectorFunction_swigregister = _pysgpp_swig.OptInterpolantVectorFunction_swigregister
OptInterpolantVectorFunction_swigregister(OptInterpolantVectorFunction)

class InterpolantVectorFunctionGradient(OptVectorFunctionGradient):
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionGradient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolantVectorFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionGradient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolantVectorFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', alpha: 'DataMatrix'):
        this = _pysgpp_swig.new_InterpolantVectorFunctionGradient(grid, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantVectorFunctionGradient
    __del__ = lambda self: None

    def getAlpha(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.InterpolantVectorFunctionGradient_getAlpha(self)

    def setAlpha(self, alpha: 'DataMatrix') -> "void":
        return _pysgpp_swig.InterpolantVectorFunctionGradient_setAlpha(self, alpha)
InterpolantVectorFunctionGradient_swigregister = _pysgpp_swig.InterpolantVectorFunctionGradient_swigregister
InterpolantVectorFunctionGradient_swigregister(InterpolantVectorFunctionGradient)

class InterpolantVectorFunctionHessian(OptVectorFunctionHessian):
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionHessian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolantVectorFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionHessian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolantVectorFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, grid: 'Grid', alpha: 'DataMatrix'):
        this = _pysgpp_swig.new_InterpolantVectorFunctionHessian(grid, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_InterpolantVectorFunctionHessian
    __del__ = lambda self: None

    def getAlpha(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.InterpolantVectorFunctionHessian_getAlpha(self)

    def setAlpha(self, alpha: 'DataMatrix') -> "void":
        return _pysgpp_swig.InterpolantVectorFunctionHessian_setAlpha(self, alpha)
InterpolantVectorFunctionHessian_swigregister = _pysgpp_swig.InterpolantVectorFunctionHessian_swigregister
InterpolantVectorFunctionHessian_swigregister(InterpolantVectorFunctionHessian)

class OptComponentScalarFunction(OptScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptComponentScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptComponentScalarFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptComponentScalarFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptComponentScalarFunction
    __del__ = lambda self: None
OptComponentScalarFunction_swigregister = _pysgpp_swig.OptComponentScalarFunction_swigregister
OptComponentScalarFunction_swigregister(OptComponentScalarFunction)

class OptComponentScalarFunctionGradient(OptScalarFunctionGradient):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptComponentScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptComponentScalarFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptComponentScalarFunctionGradient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptComponentScalarFunctionGradient
    __del__ = lambda self: None
OptComponentScalarFunctionGradient_swigregister = _pysgpp_swig.OptComponentScalarFunctionGradient_swigregister
OptComponentScalarFunctionGradient_swigregister(OptComponentScalarFunctionGradient)

class OptComponentScalarFunctionHessian(OptScalarFunctionHessian):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptComponentScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptComponentScalarFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptComponentScalarFunctionHessian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptComponentScalarFunctionHessian
    __del__ = lambda self: None
OptComponentScalarFunctionHessian_swigregister = _pysgpp_swig.OptComponentScalarFunctionHessian_swigregister
OptComponentScalarFunctionHessian_swigregister(OptComponentScalarFunctionHessian)

class OptScaledScalarFunction(OptScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScaledScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptScaledScalarFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptScaledScalarFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScaledScalarFunction
    __del__ = lambda self: None

    def getLowerBounds(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptScaledScalarFunction_getLowerBounds(self)

    def setLowerBounds(self, lowerBounds: 'DataVector') -> "void":
        return _pysgpp_swig.OptScaledScalarFunction_setLowerBounds(self, lowerBounds)

    def getUpperBounds(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptScaledScalarFunction_getUpperBounds(self)

    def setUpperBounds(self, upperBounds: 'DataVector') -> "void":
        return _pysgpp_swig.OptScaledScalarFunction_setUpperBounds(self, upperBounds)

    def getValueFactor(self, valueFactor: 'double') -> "double":
        return _pysgpp_swig.OptScaledScalarFunction_getValueFactor(self, valueFactor)

    def setValueFactor(self, valueFactor: 'double') -> "void":
        return _pysgpp_swig.OptScaledScalarFunction_setValueFactor(self, valueFactor)
OptScaledScalarFunction_swigregister = _pysgpp_swig.OptScaledScalarFunction_swigregister
OptScaledScalarFunction_swigregister(OptScaledScalarFunction)

class OptScaledScalarFunctionGradient(OptScalarFunctionGradient):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScaledScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptScaledScalarFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptScaledScalarFunctionGradient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScaledScalarFunctionGradient
    __del__ = lambda self: None

    def getLowerBounds(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptScaledScalarFunctionGradient_getLowerBounds(self)

    def setLowerBounds(self, lowerBounds: 'DataVector') -> "void":
        return _pysgpp_swig.OptScaledScalarFunctionGradient_setLowerBounds(self, lowerBounds)

    def getUpperBounds(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptScaledScalarFunctionGradient_getUpperBounds(self)

    def setUpperBounds(self, upperBounds: 'DataVector') -> "void":
        return _pysgpp_swig.OptScaledScalarFunctionGradient_setUpperBounds(self, upperBounds)

    def getValueFactor(self, valueFactor: 'double') -> "double":
        return _pysgpp_swig.OptScaledScalarFunctionGradient_getValueFactor(self, valueFactor)

    def setValueFactor(self, valueFactor: 'double') -> "void":
        return _pysgpp_swig.OptScaledScalarFunctionGradient_setValueFactor(self, valueFactor)
OptScaledScalarFunctionGradient_swigregister = _pysgpp_swig.OptScaledScalarFunctionGradient_swigregister
OptScaledScalarFunctionGradient_swigregister(OptScaledScalarFunctionGradient)

class OptScaledScalarFunctionHessian(OptScalarFunctionHessian):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptScaledScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptScaledScalarFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptScaledScalarFunctionHessian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptScaledScalarFunctionHessian
    __del__ = lambda self: None

    def getLowerBounds(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptScaledScalarFunctionHessian_getLowerBounds(self)

    def setLowerBounds(self, lowerBounds: 'DataVector') -> "void":
        return _pysgpp_swig.OptScaledScalarFunctionHessian_setLowerBounds(self, lowerBounds)

    def getUpperBounds(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptScaledScalarFunctionHessian_getUpperBounds(self)

    def setUpperBounds(self, upperBounds: 'DataVector') -> "void":
        return _pysgpp_swig.OptScaledScalarFunctionHessian_setUpperBounds(self, upperBounds)

    def getValueFactor(self, valueFactor: 'double') -> "double":
        return _pysgpp_swig.OptScaledScalarFunctionHessian_getValueFactor(self, valueFactor)

    def setValueFactor(self, valueFactor: 'double') -> "void":
        return _pysgpp_swig.OptScaledScalarFunctionHessian_setValueFactor(self, valueFactor)
OptScaledScalarFunctionHessian_swigregister = _pysgpp_swig.OptScaledScalarFunctionHessian_swigregister
OptScaledScalarFunctionHessian_swigregister(OptScaledScalarFunctionHessian)

class OptWrapperScalarFunction(OptScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperScalarFunction, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', f: 'sgpp::optimization::WrapperScalarFunction::FunctionEvalType'):
        this = _pysgpp_swig.new_OptWrapperScalarFunction(d, f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperScalarFunction
    __del__ = lambda self: None
OptWrapperScalarFunction_swigregister = _pysgpp_swig.OptWrapperScalarFunction_swigregister
OptWrapperScalarFunction_swigregister(OptWrapperScalarFunction)

class OptWrapperScalarFunctionGradient(OptScalarFunctionGradient):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperScalarFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionGradient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperScalarFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', fGradient: 'sgpp::optimization::WrapperScalarFunctionGradient::FunctionGradientEvalType'):
        this = _pysgpp_swig.new_OptWrapperScalarFunctionGradient(d, fGradient)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperScalarFunctionGradient
    __del__ = lambda self: None
OptWrapperScalarFunctionGradient_swigregister = _pysgpp_swig.OptWrapperScalarFunctionGradient_swigregister
OptWrapperScalarFunctionGradient_swigregister(OptWrapperScalarFunctionGradient)

class OptWrapperScalarFunctionHessian(OptScalarFunctionHessian):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperScalarFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunctionHessian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperScalarFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', fHessian: 'sgpp::optimization::WrapperScalarFunctionHessian::FunctionHessianEvalType'):
        this = _pysgpp_swig.new_OptWrapperScalarFunctionHessian(d, fHessian)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperScalarFunctionHessian
    __del__ = lambda self: None
OptWrapperScalarFunctionHessian_swigregister = _pysgpp_swig.OptWrapperScalarFunctionHessian_swigregister
OptWrapperScalarFunctionHessian_swigregister(OptWrapperScalarFunctionHessian)

class OptWrapperVectorFunction(OptVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperVectorFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperVectorFunction, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', m: 'size_t', f: 'sgpp::optimization::WrapperVectorFunction::FunctionEvalType'):
        this = _pysgpp_swig.new_OptWrapperVectorFunction(d, m, f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperVectorFunction
    __del__ = lambda self: None
OptWrapperVectorFunction_swigregister = _pysgpp_swig.OptWrapperVectorFunction_swigregister
OptWrapperVectorFunction_swigregister(OptWrapperVectorFunction)

class OptWrapperVectorFunctionGradient(OptVectorFunctionGradient):
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionGradient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperVectorFunctionGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionGradient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperVectorFunctionGradient, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', m: 'size_t', fGradient: 'sgpp::optimization::WrapperVectorFunctionGradient::FunctionGradientEvalType'):
        this = _pysgpp_swig.new_OptWrapperVectorFunctionGradient(d, m, fGradient)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperVectorFunctionGradient
    __del__ = lambda self: None
OptWrapperVectorFunctionGradient_swigregister = _pysgpp_swig.OptWrapperVectorFunctionGradient_swigregister
OptWrapperVectorFunctionGradient_swigregister(OptWrapperVectorFunctionGradient)

class OptWrapperVectorFunctionHessian(OptVectorFunctionHessian):
    __swig_setmethods__ = {}
    for _s in [OptVectorFunctionHessian]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptWrapperVectorFunctionHessian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunctionHessian]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptWrapperVectorFunctionHessian, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', m: 'size_t', fHessian: 'sgpp::optimization::WrapperVectorFunctionHessian::FunctionHessianEvalType'):
        this = _pysgpp_swig.new_OptWrapperVectorFunctionHessian(d, m, fHessian)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptWrapperVectorFunctionHessian
    __del__ = lambda self: None
OptWrapperVectorFunctionHessian_swigregister = _pysgpp_swig.OptWrapperVectorFunctionHessian_swigregister
OptWrapperVectorFunctionHessian_swigregister(OptWrapperVectorFunctionHessian)

class OptEmptyVectorFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEmptyVectorFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptEmptyVectorFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_pysgpp_swig.OptEmptyVectorFunction_getInstance)
    else:
        getInstance = _pysgpp_swig.OptEmptyVectorFunction_getInstance
    __swig_destroy__ = _pysgpp_swig.delete_OptEmptyVectorFunction
    __del__ = lambda self: None
OptEmptyVectorFunction_swigregister = _pysgpp_swig.OptEmptyVectorFunction_swigregister
OptEmptyVectorFunction_swigregister(OptEmptyVectorFunction)

def OptEmptyVectorFunction_getInstance() -> "sgpp::optimization::WrapperVectorFunction &":
    return _pysgpp_swig.OptEmptyVectorFunction_getInstance()
OptEmptyVectorFunction_getInstance = _pysgpp_swig.OptEmptyVectorFunction_getInstance

class OptEmptyVectorFunctionGradient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEmptyVectorFunctionGradient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptEmptyVectorFunctionGradient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_pysgpp_swig.OptEmptyVectorFunctionGradient_getInstance)
    else:
        getInstance = _pysgpp_swig.OptEmptyVectorFunctionGradient_getInstance
    __swig_destroy__ = _pysgpp_swig.delete_OptEmptyVectorFunctionGradient
    __del__ = lambda self: None
OptEmptyVectorFunctionGradient_swigregister = _pysgpp_swig.OptEmptyVectorFunctionGradient_swigregister
OptEmptyVectorFunctionGradient_swigregister(OptEmptyVectorFunctionGradient)

def OptEmptyVectorFunctionGradient_getInstance() -> "sgpp::optimization::WrapperVectorFunctionGradient &":
    return _pysgpp_swig.OptEmptyVectorFunctionGradient_getInstance()
OptEmptyVectorFunctionGradient_getInstance = _pysgpp_swig.OptEmptyVectorFunctionGradient_getInstance

class OptFuzzyInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyInterval, name)
    __repr__ = _swig_repr
    NormMode_ViaMembershipFunction = _pysgpp_swig.OptFuzzyInterval_NormMode_ViaMembershipFunction
    NormMode_ViaConfidenceInterval = _pysgpp_swig.OptFuzzyInterval_NormMode_ViaConfidenceInterval
    __swig_getmethods__["DEFAULT_NUMBER_OF_INTEGRAL_SAMPLES"] = _pysgpp_swig.OptFuzzyInterval_DEFAULT_NUMBER_OF_INTEGRAL_SAMPLES_get
    if _newclass:
        DEFAULT_NUMBER_OF_INTEGRAL_SAMPLES = _swig_property(_pysgpp_swig.OptFuzzyInterval_DEFAULT_NUMBER_OF_INTEGRAL_SAMPLES_get)

    def __init__(self, supportLowerBound: 'double', supportUpperBound: 'double'):
        if self.__class__ == OptFuzzyInterval:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptFuzzyInterval(_self, supportLowerBound, supportUpperBound)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyInterval
    __del__ = lambda self: None

    def evaluateMembershipFunction(self, x: 'double') -> "double":
        return _pysgpp_swig.OptFuzzyInterval_evaluateMembershipFunction(self, x)

    def evaluateConfidenceIntervalLowerBound(self, alpha: 'double') -> "double":
        return _pysgpp_swig.OptFuzzyInterval_evaluateConfidenceIntervalLowerBound(self, alpha)

    def evaluateConfidenceIntervalUpperBound(self, alpha: 'double') -> "double":
        return _pysgpp_swig.OptFuzzyInterval_evaluateConfidenceIntervalUpperBound(self, alpha)

    def approximateL1Norm(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateL1Norm(self, *args)

    def approximateL2Norm(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateL2Norm(self, *args)

    def approximateLinfNorm(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateLinfNorm(self, *args)

    def approximateL1Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateL1Error(self, *args)

    def approximateL2Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateL2Error(self, *args)

    def approximateLinfError(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateLinfError(self, *args)

    def approximateRelativeL1Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateRelativeL1Error(self, *args)

    def approximateRelativeL2Error(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateRelativeL2Error(self, *args)

    def approximateRelativeLinfError(self, *args) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_approximateRelativeLinfError(self, *args)

    def getSupportLowerBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_getSupportLowerBound(self)

    def getSupportUpperBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyInterval_getSupportUpperBound(self)

    def getNumberOfIntegralSamples(self) -> "size_t":
        return _pysgpp_swig.OptFuzzyInterval_getNumberOfIntegralSamples(self)

    def setNumberOfIntegralSamples(self, numberOfIntegralSamples: 'size_t') -> "void":
        return _pysgpp_swig.OptFuzzyInterval_setNumberOfIntegralSamples(self, numberOfIntegralSamples)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptFuzzyInterval(self)
        return weakref_proxy(self)
OptFuzzyInterval_swigregister = _pysgpp_swig.OptFuzzyInterval_swigregister
OptFuzzyInterval_swigregister(OptFuzzyInterval)

class OptHashRefinementMultiple(HashRefinement):
    __swig_setmethods__ = {}
    for _s in [HashRefinement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHashRefinementMultiple, name, value)
    __swig_getmethods__ = {}
    for _s in [HashRefinement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHashRefinementMultiple, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHashRefinementMultiple()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHashRefinementMultiple
    __del__ = lambda self: None
OptHashRefinementMultiple_swigregister = _pysgpp_swig.OptHashRefinementMultiple_swigregister
OptHashRefinementMultiple_swigregister(OptHashRefinementMultiple)

class OptIterativeGridGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, f: 'OptScalarFunction', grid: 'Grid', N: 'size_t'):
        if self.__class__ == OptIterativeGridGenerator:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptIterativeGridGenerator(_self, f, grid, N)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGenerator
    __del__ = lambda self: None

    def generate(self) -> "bool":
        return _pysgpp_swig.OptIterativeGridGenerator_generate(self)

    def getGrid(self) -> "sgpp::base::Grid &":
        return _pysgpp_swig.OptIterativeGridGenerator_getGrid(self)

    def getFunctionValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptIterativeGridGenerator_getFunctionValues(self)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptIterativeGridGenerator(self)
        return weakref_proxy(self)
OptIterativeGridGenerator_swigregister = _pysgpp_swig.OptIterativeGridGenerator_swigregister
OptIterativeGridGenerator_swigregister(OptIterativeGridGenerator)

class OptIterativeGridGeneratorLinearSurplus(OptIterativeGridGenerator):
    __swig_setmethods__ = {}
    for _s in [OptIterativeGridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGeneratorLinearSurplus, name, value)
    __swig_getmethods__ = {}
    for _s in [OptIterativeGridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGeneratorLinearSurplus, name)
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_DEFAULT_ADAPTIVITY
    DEFAULT_INITIAL_LEVEL = _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_DEFAULT_INITIAL_LEVEL

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptIterativeGridGeneratorLinearSurplus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorLinearSurplus
    __del__ = lambda self: None

    def getAdaptivity(self) -> "double":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_getAdaptivity(self)

    def setAdaptivity(self, adaptivity: 'double') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_setAdaptivity(self, adaptivity)

    def getInitialLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_getInitialLevel(self)

    def setInitialLevel(self, initialLevel: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_setInitialLevel(self, initialLevel)
OptIterativeGridGeneratorLinearSurplus_swigregister = _pysgpp_swig.OptIterativeGridGeneratorLinearSurplus_swigregister
OptIterativeGridGeneratorLinearSurplus_swigregister(OptIterativeGridGeneratorLinearSurplus)

class OptIterativeGridGeneratorRitterNovak(OptIterativeGridGenerator):
    __swig_setmethods__ = {}
    for _s in [OptIterativeGridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGeneratorRitterNovak, name, value)
    __swig_getmethods__ = {}
    for _s in [OptIterativeGridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGeneratorRitterNovak, name)
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_ADAPTIVITY
    DEFAULT_INITIAL_LEVEL = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_INITIAL_LEVEL
    DEFAULT_MAX_LEVEL = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_DEFAULT_MAX_LEVEL
    STD_POW = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_STD_POW
    FAST_POW = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_FAST_POW

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptIterativeGridGeneratorRitterNovak(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorRitterNovak
    __del__ = lambda self: None

    def getAdaptivity(self) -> "double":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getAdaptivity(self)

    def setAdaptivity(self, adaptivity: 'double') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setAdaptivity(self, adaptivity)

    def getInitialLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getInitialLevel(self)

    def setInitialLevel(self, initialLevel: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setInitialLevel(self, initialLevel)

    def getMaxLevel(self) -> "sgpp::base::level_t":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getMaxLevel(self)

    def setMaxLevel(self, maxLevel: 'sgpp::base::level_t') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setMaxLevel(self, maxLevel)

    def getPowMethod(self) -> "sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_getPowMethod(self)

    def setPowMethod(self, powMethod: 'sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_setPowMethod(self, powMethod)
OptIterativeGridGeneratorRitterNovak_swigregister = _pysgpp_swig.OptIterativeGridGeneratorRitterNovak_swigregister
OptIterativeGridGeneratorRitterNovak_swigregister(OptIterativeGridGeneratorRitterNovak)

class OptIterativeGridGeneratorFuzzyRitterNovak(OptIterativeGridGeneratorRitterNovak):
    __swig_setmethods__ = {}
    for _s in [OptIterativeGridGeneratorRitterNovak]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGeneratorFuzzyRitterNovak, name, value)
    __swig_getmethods__ = {}
    for _s in [OptIterativeGridGeneratorRitterNovak]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGeneratorFuzzyRitterNovak, name)
    __repr__ = _swig_repr
    DEFAULT_NUMBER_OF_ALPHA_SEGMENTS = _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_DEFAULT_NUMBER_OF_ALPHA_SEGMENTS

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptIterativeGridGeneratorFuzzyRitterNovak(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorFuzzyRitterNovak
    __del__ = lambda self: None

    def getXFuzzy(self) -> "std::vector< sgpp::optimization::FuzzyInterval const *,std::allocator< sgpp::optimization::FuzzyInterval const * > > const &":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_getXFuzzy(self)

    def setXFuzzy(self, xFuzzy: 'OptFuzzyIntervalVector') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_setXFuzzy(self, xFuzzy)

    def getNumberOfAlphaSegments(self) -> "size_t":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_getNumberOfAlphaSegments(self)

    def setNumberOfAlphaSegments(self, numberOfAlphaSegments: 'size_t') -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_setNumberOfAlphaSegments(self, numberOfAlphaSegments)
OptIterativeGridGeneratorFuzzyRitterNovak_swigregister = _pysgpp_swig.OptIterativeGridGeneratorFuzzyRitterNovak_swigregister
OptIterativeGridGeneratorFuzzyRitterNovak_swigregister(OptIterativeGridGeneratorFuzzyRitterNovak)

class OptIterativeGridGeneratorSOO(OptIterativeGridGenerator):
    __swig_setmethods__ = {}
    for _s in [OptIterativeGridGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIterativeGridGeneratorSOO, name, value)
    __swig_getmethods__ = {}
    for _s in [OptIterativeGridGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIterativeGridGeneratorSOO, name)
    __repr__ = _swig_repr
    DEFAULT_ADAPTIVITY = _pysgpp_swig.OptIterativeGridGeneratorSOO_DEFAULT_ADAPTIVITY

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptIterativeGridGeneratorSOO(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIterativeGridGeneratorSOO
    __del__ = lambda self: None

    def getAdaptivity(self) -> "sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction":
        return _pysgpp_swig.OptIterativeGridGeneratorSOO_getAdaptivity(self)

    def setAdaptivity(self, *args) -> "void":
        return _pysgpp_swig.OptIterativeGridGeneratorSOO_setAdaptivity(self, *args)
OptIterativeGridGeneratorSOO_swigregister = _pysgpp_swig.OptIterativeGridGeneratorSOO_swigregister
OptIterativeGridGeneratorSOO_swigregister(OptIterativeGridGeneratorSOO)

class OperationMultipleHierarchisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationMultipleHierarchisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationMultipleHierarchisation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OperationMultipleHierarchisation
    __del__ = lambda self: None

    def doHierarchisation(self, *args) -> "bool":
        return _pysgpp_swig.OperationMultipleHierarchisation_doHierarchisation(self, *args)

    def doDehierarchisation(self, *args) -> "void":
        return _pysgpp_swig.OperationMultipleHierarchisation_doDehierarchisation(self, *args)
OperationMultipleHierarchisation_swigregister = _pysgpp_swig.OperationMultipleHierarchisation_swigregister
OperationMultipleHierarchisation_swigregister(OperationMultipleHierarchisation)

class OptSLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptSLE, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == OptSLE:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptSLE(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSLE
    __del__ = lambda self: None

    def isMatrixEntryNonZero(self, i: 'size_t', j: 'size_t') -> "bool":
        return _pysgpp_swig.OptSLE_isMatrixEntryNonZero(self, i, j)

    def getMatrixEntry(self, i: 'size_t', j: 'size_t') -> "double":
        return _pysgpp_swig.OptSLE_getMatrixEntry(self, i, j)

    def matrixVectorMultiplication(self, x: 'DataVector', y: 'DataVector') -> "void":
        return _pysgpp_swig.OptSLE_matrixVectorMultiplication(self, x, y)

    def countNNZ(self) -> "size_t":
        return _pysgpp_swig.OptSLE_countNNZ(self)

    def getDimension(self) -> "size_t":
        return _pysgpp_swig.OptSLE_getDimension(self)

    def isCloneable(self) -> "bool":
        return _pysgpp_swig.OptSLE_isCloneable(self)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptSLE(self)
        return weakref_proxy(self)
OptSLE_swigregister = _pysgpp_swig.OptSLE_swigregister
OptSLE_swigregister(OptSLE)

class CloneableSLE(OptSLE):
    __swig_setmethods__ = {}
    for _s in [OptSLE]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CloneableSLE, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLE]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CloneableSLE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_CloneableSLE
    __del__ = lambda self: None

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::CloneableSLE > &') -> "void":
        return _pysgpp_swig.CloneableSLE_clone(self, clone)
CloneableSLE_swigregister = _pysgpp_swig.CloneableSLE_swigregister
CloneableSLE_swigregister(CloneableSLE)

class OptFullSLE(CloneableSLE):
    __swig_setmethods__ = {}
    for _s in [CloneableSLE]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFullSLE, name, value)
    __swig_getmethods__ = {}
    for _s in [CloneableSLE]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFullSLE, name)
    __repr__ = _swig_repr

    def __init__(self, A: 'DataMatrix'):
        this = _pysgpp_swig.new_OptFullSLE(A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFullSLE
    __del__ = lambda self: None

    def getA(self) -> "sgpp::base::DataMatrix &":
        return _pysgpp_swig.OptFullSLE_getA(self)
OptFullSLE_swigregister = _pysgpp_swig.OptFullSLE_swigregister
OptFullSLE_swigregister(OptFullSLE)

class OptHierarchisationSLE(CloneableSLE):
    __swig_setmethods__ = {}
    for _s in [CloneableSLE]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHierarchisationSLE, name, value)
    __swig_getmethods__ = {}
    for _s in [CloneableSLE]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHierarchisationSLE, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptHierarchisationSLE(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getGrid(self) -> "sgpp::base::Grid &":
        return _pysgpp_swig.OptHierarchisationSLE_getGrid(self)

    def getGridStorage(self) -> "sgpp::base::GridStorage &":
        return _pysgpp_swig.OptHierarchisationSLE_getGridStorage(self)
    __swig_destroy__ = _pysgpp_swig.delete_OptHierarchisationSLE
    __del__ = lambda self: None
OptHierarchisationSLE_swigregister = _pysgpp_swig.OptHierarchisationSLE_swigregister
OptHierarchisationSLE_swigregister(OptHierarchisationSLE)

class OptSLESolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSLESolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptSLESolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == OptSLESolver:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptSLESolver(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSLESolver
    __del__ = lambda self: None

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.OptSLESolver_solve(self, *args)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptSLESolver(self)
        return weakref_proxy(self)
OptSLESolver_swigregister = _pysgpp_swig.OptSLESolver_swigregister
OptSLESolver_swigregister(OptSLESolver)

class OptArmadillo(OptSLESolver):
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptArmadillo, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptArmadillo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptArmadillo
    __del__ = lambda self: None

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.OptArmadillo_solve(self, *args)

    def __init__(self):
        this = _pysgpp_swig.new_OptArmadillo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OptArmadillo_swigregister = _pysgpp_swig.OptArmadillo_swigregister
OptArmadillo_swigregister(OptArmadillo)

class OptAutoSLESolver(OptSLESolver):
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAutoSLESolver, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAutoSLESolver, name)
    __repr__ = _swig_repr
    MAX_DIM_FOR_FULL = _pysgpp_swig.OptAutoSLESolver_MAX_DIM_FOR_FULL
    MAX_DIM_FOR_GAUSSIAN = _pysgpp_swig.OptAutoSLESolver_MAX_DIM_FOR_GAUSSIAN
    MAX_NNZ_RATIO_FOR_SPARSE = _pysgpp_swig.OptAutoSLESolver_MAX_NNZ_RATIO_FOR_SPARSE
    ESTIMATE_NNZ_ROWS_SAMPLE_SIZE = _pysgpp_swig.OptAutoSLESolver_ESTIMATE_NNZ_ROWS_SAMPLE_SIZE
    __swig_destroy__ = _pysgpp_swig.delete_OptAutoSLESolver
    __del__ = lambda self: None

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.OptAutoSLESolver_solve(self, *args)

    def __init__(self):
        this = _pysgpp_swig.new_OptAutoSLESolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OptAutoSLESolver_swigregister = _pysgpp_swig.OptAutoSLESolver_swigregister
OptAutoSLESolver_swigregister(OptAutoSLESolver)

class OptBiCGStab(OptSLESolver):
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBiCGStab, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBiCGStab, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_IT_COUNT = _pysgpp_swig.OptBiCGStab_DEFAULT_MAX_IT_COUNT
    DEFAULT_TOLERANCE = _pysgpp_swig.OptBiCGStab_DEFAULT_TOLERANCE

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptBiCGStab(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBiCGStab
    __del__ = lambda self: None

    def getMaxItCount(self) -> "size_t":
        return _pysgpp_swig.OptBiCGStab_getMaxItCount(self)

    def setMaxItCount(self, maxItCount: 'size_t') -> "void":
        return _pysgpp_swig.OptBiCGStab_setMaxItCount(self, maxItCount)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptBiCGStab_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptBiCGStab_setTolerance(self, tolerance)

    def getStartingPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptBiCGStab_getStartingPoint(self)

    def setStartingPoint(self, startingPoint: 'DataVector') -> "void":
        return _pysgpp_swig.OptBiCGStab_setStartingPoint(self, startingPoint)
OptBiCGStab_swigregister = _pysgpp_swig.OptBiCGStab_swigregister
OptBiCGStab_swigregister(OptBiCGStab)

class OptEigen(OptSLESolver):
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEigen, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEigen, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptEigen
    __del__ = lambda self: None

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.OptEigen_solve(self, *args)

    def __init__(self):
        this = _pysgpp_swig.new_OptEigen()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OptEigen_swigregister = _pysgpp_swig.OptEigen_swigregister
OptEigen_swigregister(OptEigen)

class OptGaussianElimination(OptSLESolver):
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGaussianElimination, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGaussianElimination, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptGaussianElimination
    __del__ = lambda self: None

    def __init__(self):
        this = _pysgpp_swig.new_OptGaussianElimination()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OptGaussianElimination_swigregister = _pysgpp_swig.OptGaussianElimination_swigregister
OptGaussianElimination_swigregister(OptGaussianElimination)

class OptGmmpp(OptSLESolver):
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGmmpp, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGmmpp, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptGmmpp
    __del__ = lambda self: None

    def __init__(self):
        this = _pysgpp_swig.new_OptGmmpp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OptGmmpp_swigregister = _pysgpp_swig.OptGmmpp_swigregister
OptGmmpp_swigregister(OptGmmpp)

class OptUMFPACK(OptSLESolver):
    __swig_setmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptUMFPACK, name, value)
    __swig_getmethods__ = {}
    for _s in [OptSLESolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptUMFPACK, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptUMFPACK
    __del__ = lambda self: None

    def solve(self, *args) -> "bool":
        return _pysgpp_swig.OptUMFPACK_solve(self, *args)

    def __init__(self):
        this = _pysgpp_swig.new_OptUMFPACK()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OptUMFPACK_swigregister = _pysgpp_swig.OptUMFPACK_swigregister
OptUMFPACK_swigregister(OptUMFPACK)

class OptUnconstrainedOptimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptUnconstrainedOptimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptUnconstrainedOptimizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_N = _pysgpp_swig.OptUnconstrainedOptimizer_DEFAULT_N
    __swig_destroy__ = _pysgpp_swig.delete_OptUnconstrainedOptimizer
    __del__ = lambda self: None

    def optimize(self) -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_optimize(self)

    def getObjectiveFunction(self) -> "sgpp::optimization::ScalarFunction &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getObjectiveFunction(self)

    def setObjectiveFunction(self, f: 'OptScalarFunction') -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setObjectiveFunction(self, f)

    def getObjectiveGradient(self) -> "sgpp::optimization::ScalarFunctionGradient *":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getObjectiveGradient(self)

    def setObjectiveGradient(self, fGradient: 'OptScalarFunctionGradient') -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setObjectiveGradient(self, fGradient)

    def getObjectiveHessian(self) -> "sgpp::optimization::ScalarFunctionHessian *":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getObjectiveHessian(self)

    def setObjectiveHessian(self, fHessian: 'OptScalarFunctionHessian') -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setObjectiveHessian(self, fHessian)

    def getN(self) -> "size_t":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getN(self)

    def setN(self, N: 'size_t') -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setN(self, N)

    def getStartingPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getStartingPoint(self)

    def setStartingPoint(self, startingPoint: 'DataVector') -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_setStartingPoint(self, startingPoint)

    def getOptimalPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getOptimalPoint(self)

    def getOptimalValue(self) -> "double":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getOptimalValue(self)

    def getHistoryOfOptimalPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getHistoryOfOptimalPoints(self)

    def getHistoryOfOptimalValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedOptimizer_getHistoryOfOptimalValues(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > &') -> "void":
        return _pysgpp_swig.OptUnconstrainedOptimizer_clone(self, clone)
OptUnconstrainedOptimizer_swigregister = _pysgpp_swig.OptUnconstrainedOptimizer_swigregister
OptUnconstrainedOptimizer_swigregister(OptUnconstrainedOptimizer)

class OptAdaptiveGradientDescent(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAdaptiveGradientDescent, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAdaptiveGradientDescent, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptAdaptiveGradientDescent_DEFAULT_LINE_SEARCH_ACCURACY

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptAdaptiveGradientDescent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAdaptiveGradientDescent
    __del__ = lambda self: None

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setTolerance(self, tolerance)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

    def getLineSearchAccuracy(self) -> "double":
        return _pysgpp_swig.OptAdaptiveGradientDescent_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, lineSearchAccuracy: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveGradientDescent_setLineSearchAccuracy(self, lineSearchAccuracy)
OptAdaptiveGradientDescent_swigregister = _pysgpp_swig.OptAdaptiveGradientDescent_swigregister
OptAdaptiveGradientDescent_swigregister(OptAdaptiveGradientDescent)

class OptAdaptiveNewton(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAdaptiveNewton, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAdaptiveNewton, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_DAMPING_INCREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_DAMPING_INCREASE_FACTOR
    DEFAULT_DAMPING_DECREASE_FACTOR = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_DAMPING_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptAdaptiveNewton_DEFAULT_LINE_SEARCH_ACCURACY

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptAdaptiveNewton(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAdaptiveNewton
    __del__ = lambda self: None

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setTolerance(self, tolerance)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

    def getDampingIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getDampingIncreaseFactor(self)

    def setDampingIncreaseFactor(self, dampingIncreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setDampingIncreaseFactor(self, dampingIncreaseFactor)

    def getDampingDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getDampingDecreaseFactor(self)

    def setDampingDecreaseFactor(self, dampingDecreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setDampingDecreaseFactor(self, dampingDecreaseFactor)

    def getLineSearchAccuracy(self) -> "double":
        return _pysgpp_swig.OptAdaptiveNewton_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, lineSearchAccuracy: 'double') -> "void":
        return _pysgpp_swig.OptAdaptiveNewton_setLineSearchAccuracy(self, lineSearchAccuracy)
OptAdaptiveNewton_swigregister = _pysgpp_swig.OptAdaptiveNewton_swigregister
OptAdaptiveNewton_swigregister(OptAdaptiveNewton)

class OptBFGS(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBFGS, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBFGS, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptBFGS_DEFAULT_TOLERANCE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptBFGS_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptBFGS_DEFAULT_STEP_SIZE_DECREASE_FACTOR
    DEFAULT_LINE_SEARCH_ACCURACY = _pysgpp_swig.OptBFGS_DEFAULT_LINE_SEARCH_ACCURACY

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptBFGS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBFGS
    __del__ = lambda self: None

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptBFGS_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptBFGS_setTolerance(self, tolerance)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptBFGS_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptBFGS_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptBFGS_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptBFGS_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)

    def getLineSearchAccuracy(self) -> "double":
        return _pysgpp_swig.OptBFGS_getLineSearchAccuracy(self)

    def setLineSearchAccuracy(self, lineSearchAccuracy: 'double') -> "void":
        return _pysgpp_swig.OptBFGS_setLineSearchAccuracy(self, lineSearchAccuracy)
OptBFGS_swigregister = _pysgpp_swig.OptBFGS_swigregister
OptBFGS_swigregister(OptBFGS)

class OptCMAES(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptCMAES, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptCMAES, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptCMAES_DEFAULT_MAX_FCN_EVAL_COUNT

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptCMAES(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptCMAES
    __del__ = lambda self: None
OptCMAES_swigregister = _pysgpp_swig.OptCMAES_swigregister
OptCMAES_swigregister(OptCMAES)

class OptDifferentialEvolution(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptDifferentialEvolution, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptDifferentialEvolution, name)
    __repr__ = _swig_repr
    DEFAULT_CROSSOVER_PROBABILITY = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_CROSSOVER_PROBABILITY
    DEFAULT_SCALING_FACTOR = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_SCALING_FACTOR
    DEFAULT_IDLE_GENERATIONS_COUNT = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_IDLE_GENERATIONS_COUNT
    DEFAULT_AVG_IMPROVEMENT_THRESHOLD = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_AVG_IMPROVEMENT_THRESHOLD
    DEFAULT_MAX_DISTANCE_THRESHOLD = _pysgpp_swig.OptDifferentialEvolution_DEFAULT_MAX_DISTANCE_THRESHOLD

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptDifferentialEvolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptDifferentialEvolution
    __del__ = lambda self: None

    def getPopulationSize(self) -> "size_t":
        return _pysgpp_swig.OptDifferentialEvolution_getPopulationSize(self)

    def setPopulationSize(self, populationSize: 'size_t') -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setPopulationSize(self, populationSize)

    def getCrossoverProbability(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getCrossoverProbability(self)

    def setCrossoverProbability(self, crossoverProbability: 'double') -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setCrossoverProbability(self, crossoverProbability)

    def getScalingFactor(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getScalingFactor(self)

    def setScalingFactor(self, scalingFactor: 'double') -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setScalingFactor(self, scalingFactor)

    def getIdleGenerationsCount(self) -> "size_t":
        return _pysgpp_swig.OptDifferentialEvolution_getIdleGenerationsCount(self)

    def setIdleGenerationsCount(self, idleGenerationsCount: 'size_t') -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setIdleGenerationsCount(self, idleGenerationsCount)

    def getAvgImprovementThreshold(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getAvgImprovementThreshold(self)

    def setAvgImprovementThreshold(self, avgImprovementThreshold: 'double') -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setAvgImprovementThreshold(self, avgImprovementThreshold)

    def getMaxDistanceThreshold(self) -> "double":
        return _pysgpp_swig.OptDifferentialEvolution_getMaxDistanceThreshold(self)

    def setMaxDistanceThreshold(self, maxDistanceThreshold: 'double') -> "void":
        return _pysgpp_swig.OptDifferentialEvolution_setMaxDistanceThreshold(self, maxDistanceThreshold)
OptDifferentialEvolution_swigregister = _pysgpp_swig.OptDifferentialEvolution_swigregister
OptDifferentialEvolution_swigregister(OptDifferentialEvolution)

class OptGradientDescent(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGradientDescent, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGradientDescent, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_IT_COUNT = _pysgpp_swig.OptGradientDescent_DEFAULT_MAX_IT_COUNT
    DEFAULT_BETA = _pysgpp_swig.OptGradientDescent_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptGradientDescent_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptGradientDescent_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptGradientDescent_DEFAULT_EPSILON

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptGradientDescent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGradientDescent
    __del__ = lambda self: None

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getBeta(self)

    def setBeta(self, beta: 'double') -> "void":
        return _pysgpp_swig.OptGradientDescent_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getGamma(self)

    def setGamma(self, gamma: 'double') -> "void":
        return _pysgpp_swig.OptGradientDescent_setGamma(self, gamma)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptGradientDescent_setTolerance(self, tolerance)

    def getEpsilon(self) -> "double":
        return _pysgpp_swig.OptGradientDescent_getEpsilon(self)

    def setEpsilon(self, epsilon: 'double') -> "void":
        return _pysgpp_swig.OptGradientDescent_setEpsilon(self, epsilon)
OptGradientDescent_swigregister = _pysgpp_swig.OptGradientDescent_swigregister
OptGradientDescent_swigregister(OptGradientDescent)

class OptMultiStart(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMultiStart, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMultiStart, name)
    __repr__ = _swig_repr
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptMultiStart_DEFAULT_MAX_FCN_EVAL_COUNT

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptMultiStart(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMultiStart
    __del__ = lambda self: None

    def getPopulationSize(self) -> "size_t":
        return _pysgpp_swig.OptMultiStart_getPopulationSize(self)

    def setPopulationSize(self, populationSize: 'size_t') -> "void":
        return _pysgpp_swig.OptMultiStart_setPopulationSize(self, populationSize)

    def getHistoryOfInnerIterations(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptMultiStart_getHistoryOfInnerIterations(self)
OptMultiStart_swigregister = _pysgpp_swig.OptMultiStart_swigregister
OptMultiStart_swigregister(OptMultiStart)

class OptNelderMead(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptNelderMead, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptNelderMead, name)
    __repr__ = _swig_repr
    DEFAULT_ALPHA = _pysgpp_swig.OptNelderMead_DEFAULT_ALPHA
    DEFAULT_BETA = _pysgpp_swig.OptNelderMead_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNelderMead_DEFAULT_GAMMA
    DEFAULT_DELTA = _pysgpp_swig.OptNelderMead_DEFAULT_DELTA
    DEFAULT_MAX_FCN_EVAL_COUNT = _pysgpp_swig.OptNelderMead_DEFAULT_MAX_FCN_EVAL_COUNT
    STARTING_SIMPLEX_EDGE_LENGTH = _pysgpp_swig.OptNelderMead_STARTING_SIMPLEX_EDGE_LENGTH

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptNelderMead(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptNelderMead
    __del__ = lambda self: None

    def getAlpha(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getAlpha(self)

    def setAlpha(self, alpha: 'double') -> "void":
        return _pysgpp_swig.OptNelderMead_setAlpha(self, alpha)

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getBeta(self)

    def setBeta(self, beta: 'double') -> "void":
        return _pysgpp_swig.OptNelderMead_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getGamma(self)

    def setGamma(self, gamma: 'double') -> "void":
        return _pysgpp_swig.OptNelderMead_setGamma(self, gamma)

    def getDelta(self) -> "double":
        return _pysgpp_swig.OptNelderMead_getDelta(self)

    def setDelta(self, delta: 'double') -> "void":
        return _pysgpp_swig.OptNelderMead_setDelta(self, delta)
OptNelderMead_swigregister = _pysgpp_swig.OptNelderMead_swigregister
OptNelderMead_swigregister(OptNelderMead)

class OptNewton(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptNewton, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptNewton, name)
    __repr__ = _swig_repr
    DEFAULT_BETA = _pysgpp_swig.OptNewton_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNewton_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptNewton_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptNewton_DEFAULT_EPSILON
    DEFAULT_ALPHA1 = _pysgpp_swig.OptNewton_DEFAULT_ALPHA1
    DEFAULT_ALPHA2 = _pysgpp_swig.OptNewton_DEFAULT_ALPHA2
    DEFAULT_P = _pysgpp_swig.OptNewton_DEFAULT_P

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptNewton(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptNewton
    __del__ = lambda self: None

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptNewton_getBeta(self)

    def setBeta(self, beta: 'double') -> "void":
        return _pysgpp_swig.OptNewton_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptNewton_getGamma(self)

    def setGamma(self, gamma: 'double') -> "void":
        return _pysgpp_swig.OptNewton_setGamma(self, gamma)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptNewton_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptNewton_setTolerance(self, tolerance)

    def getEpsilon(self) -> "double":
        return _pysgpp_swig.OptNewton_getEpsilon(self)

    def setEpsilon(self, epsilon: 'double') -> "void":
        return _pysgpp_swig.OptNewton_setEpsilon(self, epsilon)

    def getAlpha1(self) -> "double":
        return _pysgpp_swig.OptNewton_getAlpha1(self)

    def setAlpha1(self, alpha1: 'double') -> "void":
        return _pysgpp_swig.OptNewton_setAlpha1(self, alpha1)

    def getAlpha2(self) -> "double":
        return _pysgpp_swig.OptNewton_getAlpha2(self)

    def setAlpha2(self, alpha2: 'double') -> "void":
        return _pysgpp_swig.OptNewton_setAlpha2(self, alpha2)

    def getP(self) -> "double":
        return _pysgpp_swig.OptNewton_getP(self)

    def setP(self, p: 'double') -> "void":
        return _pysgpp_swig.OptNewton_setP(self, p)
OptNewton_swigregister = _pysgpp_swig.OptNewton_swigregister
OptNewton_swigregister(OptNewton)

class OptNLCG(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptNLCG, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptNLCG, name)
    __repr__ = _swig_repr
    DEFAULT_BETA = _pysgpp_swig.OptNLCG_DEFAULT_BETA
    DEFAULT_GAMMA = _pysgpp_swig.OptNLCG_DEFAULT_GAMMA
    DEFAULT_TOLERANCE = _pysgpp_swig.OptNLCG_DEFAULT_TOLERANCE
    DEFAULT_EPSILON = _pysgpp_swig.OptNLCG_DEFAULT_EPSILON
    DEFAULT_RESTART_THRESHOLD = _pysgpp_swig.OptNLCG_DEFAULT_RESTART_THRESHOLD

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptNLCG(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptNLCG
    __del__ = lambda self: None

    def getBeta(self) -> "double":
        return _pysgpp_swig.OptNLCG_getBeta(self)

    def setBeta(self, beta: 'double') -> "void":
        return _pysgpp_swig.OptNLCG_setBeta(self, beta)

    def getGamma(self) -> "double":
        return _pysgpp_swig.OptNLCG_getGamma(self)

    def setGamma(self, gamma: 'double') -> "void":
        return _pysgpp_swig.OptNLCG_setGamma(self, gamma)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptNLCG_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptNLCG_setTolerance(self, tolerance)

    def getEpsilon(self) -> "double":
        return _pysgpp_swig.OptNLCG_getEpsilon(self)

    def setEpsilon(self, epsilon: 'double') -> "void":
        return _pysgpp_swig.OptNLCG_setEpsilon(self, epsilon)

    def getRestartThreshold(self) -> "double":
        return _pysgpp_swig.OptNLCG_getRestartThreshold(self)

    def setRestartThreshold(self, restartThreshold: 'double') -> "void":
        return _pysgpp_swig.OptNLCG_setRestartThreshold(self, restartThreshold)
OptNLCG_swigregister = _pysgpp_swig.OptNLCG_swigregister
OptNLCG_swigregister(OptNLCG)

class OptRprop(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRprop, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRprop, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptRprop_DEFAULT_TOLERANCE
    DEFAULT_INITIAL_STEP_SIZE = _pysgpp_swig.OptRprop_DEFAULT_INITIAL_STEP_SIZE
    DEFAULT_STEP_SIZE_INCREASE_FACTOR = _pysgpp_swig.OptRprop_DEFAULT_STEP_SIZE_INCREASE_FACTOR
    DEFAULT_STEP_SIZE_DECREASE_FACTOR = _pysgpp_swig.OptRprop_DEFAULT_STEP_SIZE_DECREASE_FACTOR

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptRprop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptRprop
    __del__ = lambda self: None

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptRprop_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptRprop_setTolerance(self, tolerance)

    def getInitialStepSize(self) -> "double":
        return _pysgpp_swig.OptRprop_getInitialStepSize(self)

    def setInitialStepSize(self, initialStepSize: 'double') -> "void":
        return _pysgpp_swig.OptRprop_setInitialStepSize(self, initialStepSize)

    def getStepSizeIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptRprop_getStepSizeIncreaseFactor(self)

    def setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptRprop_setStepSizeIncreaseFactor(self, stepSizeIncreaseFactor)

    def getStepSizeDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptRprop_getStepSizeDecreaseFactor(self)

    def setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptRprop_setStepSizeDecreaseFactor(self, stepSizeDecreaseFactor)
OptRprop_swigregister = _pysgpp_swig.OptRprop_swigregister
OptRprop_swigregister(OptRprop)

class OptLeastSquaresOptimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptLeastSquaresOptimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptLeastSquaresOptimizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_N = _pysgpp_swig.OptLeastSquaresOptimizer_DEFAULT_N
    __swig_destroy__ = _pysgpp_swig.delete_OptLeastSquaresOptimizer
    __del__ = lambda self: None

    def optimize(self) -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_optimize(self)

    def getPhiFunction(self) -> "sgpp::optimization::VectorFunction &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getPhiFunction(self)

    def setPhiFunction(self, phi: 'OptVectorFunction') -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_setPhiFunction(self, phi)

    def getN(self) -> "size_t":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getN(self)

    def setN(self, N: 'size_t') -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_setN(self, N)

    def getStartingPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getStartingPoint(self)

    def setStartingPoint(self, startingPoint: 'DataVector') -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_setStartingPoint(self, startingPoint)

    def getOptimalPoint(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getOptimalPoint(self)

    def getOptimalValue(self) -> "double":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getOptimalValue(self)

    def getHistoryOfOptimalPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getHistoryOfOptimalPoints(self)

    def getHistoryOfOptimalValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptLeastSquaresOptimizer_getHistoryOfOptimalValues(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > &') -> "void":
        return _pysgpp_swig.OptLeastSquaresOptimizer_clone(self, clone)
OptLeastSquaresOptimizer_swigregister = _pysgpp_swig.OptLeastSquaresOptimizer_swigregister
OptLeastSquaresOptimizer_swigregister(OptLeastSquaresOptimizer)

class OptLevenbergMarquardt(OptLeastSquaresOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptLeastSquaresOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptLevenbergMarquardt, name, value)
    __swig_getmethods__ = {}
    for _s in [OptLeastSquaresOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptLevenbergMarquardt, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_TOLERANCE
    DEFAULT_INITIAL_DAMPING = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_INITIAL_DAMPING
    DEFAULT_ACCEPTANCE_THRESHOLD = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_ACCEPTANCE_THRESHOLD
    DEFAULT_EFFECTIVENESS_THRESHOLD = _pysgpp_swig.OptLevenbergMarquardt_DEFAULT_EFFECTIVENESS_THRESHOLD

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptLevenbergMarquardt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptLevenbergMarquardt
    __del__ = lambda self: None

    def getPhiGradient(self) -> "sgpp::optimization::VectorFunctionGradient &":
        return _pysgpp_swig.OptLevenbergMarquardt_getPhiGradient(self)

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setTolerance(self, tolerance)

    def getInitialDamping(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getInitialDamping(self)

    def setInitialDamping(self, initialDamping: 'double') -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setInitialDamping(self, initialDamping)

    def getAcceptanceThreshold(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getAcceptanceThreshold(self)

    def setAcceptanceThreshold(self, acceptanceThreshold: 'double') -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setAcceptanceThreshold(self, acceptanceThreshold)

    def getEffectivenessThreshold(self) -> "double":
        return _pysgpp_swig.OptLevenbergMarquardt_getEffectivenessThreshold(self)

    def setEffectivenessThreshold(self, effectivenessThreshold: 'double') -> "void":
        return _pysgpp_swig.OptLevenbergMarquardt_setEffectivenessThreshold(self, effectivenessThreshold)
OptLevenbergMarquardt_swigregister = _pysgpp_swig.OptLevenbergMarquardt_swigregister
OptLevenbergMarquardt_swigregister(OptLevenbergMarquardt)

class OptConstrainedOptimizer(OptUnconstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptConstrainedOptimizer, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptConstrainedOptimizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptConstrainedOptimizer
    __del__ = lambda self: None

    def getInequalityConstraintFunction(self) -> "sgpp::optimization::VectorFunction &":
        return _pysgpp_swig.OptConstrainedOptimizer_getInequalityConstraintFunction(self)

    def setInequalityConstraintFunction(self, g: 'OptVectorFunction') -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setInequalityConstraintFunction(self, g)

    def getInequalityConstraintGradient(self) -> "sgpp::optimization::VectorFunctionGradient *":
        return _pysgpp_swig.OptConstrainedOptimizer_getInequalityConstraintGradient(self)

    def setInequalityConstraintGradient(self, gGradient: 'OptVectorFunctionGradient') -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setInequalityConstraintGradient(self, gGradient)

    def getEqualityConstraintFunction(self) -> "sgpp::optimization::VectorFunction &":
        return _pysgpp_swig.OptConstrainedOptimizer_getEqualityConstraintFunction(self)

    def setEqualityConstraintFunction(self, h: 'OptVectorFunction') -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setEqualityConstraintFunction(self, h)

    def getEqualityConstraintGradient(self) -> "sgpp::optimization::VectorFunctionGradient *":
        return _pysgpp_swig.OptConstrainedOptimizer_getEqualityConstraintGradient(self)

    def setEqualityConstraintGradient(self, hGradient: 'OptVectorFunctionGradient') -> "void":
        return _pysgpp_swig.OptConstrainedOptimizer_setEqualityConstraintGradient(self, hGradient)
OptConstrainedOptimizer_swigregister = _pysgpp_swig.OptConstrainedOptimizer_swigregister
OptConstrainedOptimizer_swigregister(OptConstrainedOptimizer)

class OptAugmentedLagrangian(OptConstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAugmentedLagrangian, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAugmentedLagrangian, name)
    __repr__ = _swig_repr
    DEFAULT_X_TOLERANCE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_X_TOLERANCE
    DEFAULT_CONSTRAINT_TOLERANCE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_CONSTRAINT_TOLERANCE
    DEFAULT_PENALTY_START_VALUE = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_PENALTY_START_VALUE
    DEFAULT_PENALTY_INCREASE_FACTOR = _pysgpp_swig.OptAugmentedLagrangian_DEFAULT_PENALTY_INCREASE_FACTOR

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptAugmentedLagrangian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAugmentedLagrangian
    __del__ = lambda self: None

    def findFeasiblePoint(self) -> "sgpp::base::DataVector":
        return _pysgpp_swig.OptAugmentedLagrangian_findFeasiblePoint(self)

    def getXTolerance(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getXTolerance(self)

    def setXTolerance(self, xTolerance: 'double') -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setXTolerance(self, xTolerance)

    def getConstraintTolerance(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getConstraintTolerance(self)

    def setConstraintTolerance(self, constraintTolerance: 'double') -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setConstraintTolerance(self, constraintTolerance)

    def getPenaltyStartValue(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getPenaltyStartValue(self)

    def setPenaltyStartValue(self, penaltyStartValue: 'double') -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setPenaltyStartValue(self, penaltyStartValue)

    def getPenaltyIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptAugmentedLagrangian_getPenaltyIncreaseFactor(self)

    def setPenaltyIncreaseFactor(self, penaltyIncreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptAugmentedLagrangian_setPenaltyIncreaseFactor(self, penaltyIncreaseFactor)

    def getHistoryOfInnerIterationPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptAugmentedLagrangian_getHistoryOfInnerIterationPoints(self)

    def getHistoryOfInnerIterationNumbers(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptAugmentedLagrangian_getHistoryOfInnerIterationNumbers(self)
OptAugmentedLagrangian_swigregister = _pysgpp_swig.OptAugmentedLagrangian_swigregister
OptAugmentedLagrangian_swigregister(OptAugmentedLagrangian)

class OptLogBarrier(OptConstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptLogBarrier, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptLogBarrier, name)
    __repr__ = _swig_repr
    DEFAULT_TOLERANCE = _pysgpp_swig.OptLogBarrier_DEFAULT_TOLERANCE
    DEFAULT_BARRIER_START_VALUE = _pysgpp_swig.OptLogBarrier_DEFAULT_BARRIER_START_VALUE
    DEFAULT_BARRIER_DECREASE_FACTOR = _pysgpp_swig.OptLogBarrier_DEFAULT_BARRIER_DECREASE_FACTOR

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptLogBarrier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptLogBarrier
    __del__ = lambda self: None

    def getTolerance(self) -> "double":
        return _pysgpp_swig.OptLogBarrier_getTolerance(self)

    def setTolerance(self, tolerance: 'double') -> "void":
        return _pysgpp_swig.OptLogBarrier_setTolerance(self, tolerance)

    def getBarrierStartValue(self) -> "double":
        return _pysgpp_swig.OptLogBarrier_getBarrierStartValue(self)

    def setBarrierStartValue(self, barrierStartValue: 'double') -> "void":
        return _pysgpp_swig.OptLogBarrier_setBarrierStartValue(self, barrierStartValue)

    def getBarrierDecreaseFactor(self) -> "double":
        return _pysgpp_swig.OptLogBarrier_getBarrierDecreaseFactor(self)

    def setBarrierDecreaseFactor(self, barrierDecreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptLogBarrier_setBarrierDecreaseFactor(self, barrierDecreaseFactor)

    def getHistoryOfInnerIterationPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptLogBarrier_getHistoryOfInnerIterationPoints(self)

    def getHistoryOfInnerIterationNumbers(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptLogBarrier_getHistoryOfInnerIterationNumbers(self)
OptLogBarrier_swigregister = _pysgpp_swig.OptLogBarrier_swigregister
OptLogBarrier_swigregister(OptLogBarrier)

class OptSquaredPenalty(OptConstrainedOptimizer):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedOptimizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSquaredPenalty, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedOptimizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSquaredPenalty, name)
    __repr__ = _swig_repr
    DEFAULT_X_TOLERANCE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_X_TOLERANCE
    DEFAULT_CONSTRAINT_TOLERANCE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_CONSTRAINT_TOLERANCE
    DEFAULT_PENALTY_START_VALUE = _pysgpp_swig.OptSquaredPenalty_DEFAULT_PENALTY_START_VALUE
    DEFAULT_PENALTY_INCREASE_FACTOR = _pysgpp_swig.OptSquaredPenalty_DEFAULT_PENALTY_INCREASE_FACTOR

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptSquaredPenalty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSquaredPenalty
    __del__ = lambda self: None

    def getXTolerance(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getXTolerance(self)

    def setXTolerance(self, xTolerance: 'double') -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setXTolerance(self, xTolerance)

    def getConstraintTolerance(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getConstraintTolerance(self)

    def setConstraintTolerance(self, constraintTolerance: 'double') -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setConstraintTolerance(self, constraintTolerance)

    def getPenaltyStartValue(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getPenaltyStartValue(self)

    def setPenaltyStartValue(self, penaltyStartValue: 'double') -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setPenaltyStartValue(self, penaltyStartValue)

    def getPenaltyIncreaseFactor(self) -> "double":
        return _pysgpp_swig.OptSquaredPenalty_getPenaltyIncreaseFactor(self)

    def setPenaltyIncreaseFactor(self, penaltyIncreaseFactor: 'double') -> "void":
        return _pysgpp_swig.OptSquaredPenalty_setPenaltyIncreaseFactor(self, penaltyIncreaseFactor)

    def getHistoryOfInnerIterationPoints(self) -> "sgpp::base::DataMatrix const &":
        return _pysgpp_swig.OptSquaredPenalty_getHistoryOfInnerIterationPoints(self)

    def getHistoryOfInnerIterationNumbers(self) -> "std::vector< size_t,std::allocator< size_t > > const &":
        return _pysgpp_swig.OptSquaredPenalty_getHistoryOfInnerIterationNumbers(self)
OptSquaredPenalty_swigregister = _pysgpp_swig.OptSquaredPenalty_swigregister
OptSquaredPenalty_swigregister(OptSquaredPenalty)

class OptFuzzyExtensionPrinciple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyExtensionPrinciple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyExtensionPrinciple, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_NUMBER_OF_ALPHA_SEGMENTS = _pysgpp_swig.OptFuzzyExtensionPrinciple_DEFAULT_NUMBER_OF_ALPHA_SEGMENTS
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrinciple
    __del__ = lambda self: None

    def apply(self, xFuzzy: 'OptFuzzyIntervalVector') -> "sgpp::optimization::FuzzyInterval *":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_apply(self, xFuzzy)

    def getNumberOfAlphaSegments(self) -> "size_t":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getNumberOfAlphaSegments(self)

    def setNumberOfAlphaSegments(self, numberOfAlphaSegments: 'size_t') -> "void":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_setNumberOfAlphaSegments(self, numberOfAlphaSegments)

    def getAlphaLevels(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getAlphaLevels(self)

    def getOptimizationDomainsLowerBounds(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getOptimizationDomainsLowerBounds(self)

    def getOptimizationDomainsUpperBounds(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getOptimizationDomainsUpperBounds(self)

    def getMinimumPoints(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMinimumPoints(self)

    def getMinimumValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMinimumValues(self)

    def getMaximumPoints(self) -> "std::vector< sgpp::base::DataVector,std::allocator< sgpp::base::DataVector > > const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMaximumPoints(self)

    def getMaximumValues(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_getMaximumValues(self)

    def clone(self, clone: 'std::unique_ptr< sgpp::optimization::FuzzyExtensionPrinciple > &') -> "void":
        return _pysgpp_swig.OptFuzzyExtensionPrinciple_clone(self, clone)
OptFuzzyExtensionPrinciple_swigregister = _pysgpp_swig.OptFuzzyExtensionPrinciple_swigregister
OptFuzzyExtensionPrinciple_swigregister(OptFuzzyExtensionPrinciple)

class OptFuzzyExtensionPrincipleViaOptimization(OptFuzzyExtensionPrinciple):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyExtensionPrinciple]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyExtensionPrincipleViaOptimization, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyExtensionPrinciple]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyExtensionPrincipleViaOptimization, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptFuzzyExtensionPrincipleViaOptimization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrincipleViaOptimization
    __del__ = lambda self: None
OptFuzzyExtensionPrincipleViaOptimization_swigregister = _pysgpp_swig.OptFuzzyExtensionPrincipleViaOptimization_swigregister
OptFuzzyExtensionPrincipleViaOptimization_swigregister(OptFuzzyExtensionPrincipleViaOptimization)

class OptFuzzyExtensionPrincipleViaTransformation(OptFuzzyExtensionPrincipleViaOptimization):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyExtensionPrincipleViaOptimization]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyExtensionPrincipleViaTransformation, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyExtensionPrincipleViaOptimization]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyExtensionPrincipleViaTransformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptFuzzyExtensionPrincipleViaTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrincipleViaTransformation
    __del__ = lambda self: None
OptFuzzyExtensionPrincipleViaTransformation_swigregister = _pysgpp_swig.OptFuzzyExtensionPrincipleViaTransformation_swigregister
OptFuzzyExtensionPrincipleViaTransformation_swigregister(OptFuzzyExtensionPrincipleViaTransformation)

class OptFuzzyExtensionPrincipleViaVertexMethod(OptFuzzyExtensionPrincipleViaOptimization):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyExtensionPrincipleViaOptimization]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyExtensionPrincipleViaVertexMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyExtensionPrincipleViaOptimization]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyExtensionPrincipleViaVertexMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptFuzzyExtensionPrincipleViaVertexMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyExtensionPrincipleViaVertexMethod
    __del__ = lambda self: None
OptFuzzyExtensionPrincipleViaVertexMethod_swigregister = _pysgpp_swig.OptFuzzyExtensionPrincipleViaVertexMethod_swigregister
OptFuzzyExtensionPrincipleViaVertexMethod_swigregister(OptFuzzyExtensionPrincipleViaVertexMethod)

class OptFuzzyIntervalViaConfidenceInterval(OptFuzzyInterval):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyIntervalViaConfidenceInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyIntervalViaConfidenceInterval, name)
    __repr__ = _swig_repr

    def __init__(self, supportLowerBound: 'double', supportUpperBound: 'double'):
        if self.__class__ == OptFuzzyIntervalViaConfidenceInterval:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptFuzzyIntervalViaConfidenceInterval(_self, supportLowerBound, supportUpperBound)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyIntervalViaConfidenceInterval
    __del__ = lambda self: None

    def evaluateMembershipFunction(self, x: 'double') -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_evaluateMembershipFunction(self, x)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptFuzzyIntervalViaConfidenceInterval(self)
        return weakref_proxy(self)
OptFuzzyIntervalViaConfidenceInterval_swigregister = _pysgpp_swig.OptFuzzyIntervalViaConfidenceInterval_swigregister
OptFuzzyIntervalViaConfidenceInterval_swigregister(OptFuzzyIntervalViaConfidenceInterval)

class OptFuzzyIntervalViaMembershipFunction(OptFuzzyInterval):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyIntervalViaMembershipFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyIntervalViaMembershipFunction, name)
    __repr__ = _swig_repr

    def __init__(self, supportLowerBound: 'double', supportUpperBound: 'double', coreLowerBound: 'double', coreUpperBound: 'double'):
        if self.__class__ == OptFuzzyIntervalViaMembershipFunction:
            _self = None
        else:
            _self = self
        this = _pysgpp_swig.new_OptFuzzyIntervalViaMembershipFunction(_self, supportLowerBound, supportUpperBound, coreLowerBound, coreUpperBound)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyIntervalViaMembershipFunction
    __del__ = lambda self: None

    def evaluateConfidenceIntervalLowerBound(self, alpha: 'double') -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_evaluateConfidenceIntervalLowerBound(self, alpha)

    def evaluateConfidenceIntervalUpperBound(self, alpha: 'double') -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_evaluateConfidenceIntervalUpperBound(self, alpha)

    def getCoreLowerBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_getCoreLowerBound(self)

    def getCoreUpperBound(self) -> "double":
        return _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_getCoreUpperBound(self)
    def __disown__(self):
        self.this.disown()
        _pysgpp_swig.disown_OptFuzzyIntervalViaMembershipFunction(self)
        return weakref_proxy(self)
OptFuzzyIntervalViaMembershipFunction_swigregister = _pysgpp_swig.OptFuzzyIntervalViaMembershipFunction_swigregister
OptFuzzyIntervalViaMembershipFunction_swigregister(OptFuzzyIntervalViaMembershipFunction)

class OptInterpolatedFuzzyInterval(OptFuzzyIntervalViaMembershipFunction):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyIntervalViaMembershipFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptInterpolatedFuzzyInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyIntervalViaMembershipFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptInterpolatedFuzzyInterval, name)
    __repr__ = _swig_repr
    if _newclass:
        getCoreLowerBound = staticmethod(_pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreLowerBound)
    else:
        getCoreLowerBound = _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreLowerBound
    if _newclass:
        getCoreUpperBound = staticmethod(_pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreUpperBound)
    else:
        getCoreUpperBound = _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreUpperBound
    if _newclass:
        tryDowncast = staticmethod(_pysgpp_swig.OptInterpolatedFuzzyInterval_tryDowncast)
    else:
        tryDowncast = _pysgpp_swig.OptInterpolatedFuzzyInterval_tryDowncast

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptInterpolatedFuzzyInterval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptInterpolatedFuzzyInterval
    __del__ = lambda self: None

    def getXData(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptInterpolatedFuzzyInterval_getXData(self)

    def getAlphaData(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptInterpolatedFuzzyInterval_getAlphaData(self)
OptInterpolatedFuzzyInterval_swigregister = _pysgpp_swig.OptInterpolatedFuzzyInterval_swigregister
OptInterpolatedFuzzyInterval_swigregister(OptInterpolatedFuzzyInterval)

def OptInterpolatedFuzzyInterval_getCoreLowerBound(xData: 'DataVector', alphaData: 'DataVector') -> "double":
    return _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreLowerBound(xData, alphaData)
OptInterpolatedFuzzyInterval_getCoreLowerBound = _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreLowerBound

def OptInterpolatedFuzzyInterval_getCoreUpperBound(xData: 'DataVector', alphaData: 'DataVector') -> "double":
    return _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreUpperBound(xData, alphaData)
OptInterpolatedFuzzyInterval_getCoreUpperBound = _pysgpp_swig.OptInterpolatedFuzzyInterval_getCoreUpperBound

def OptInterpolatedFuzzyInterval_tryDowncast(fuzzyInterval: 'OptFuzzyInterval') -> "sgpp::optimization::InterpolatedFuzzyInterval *":
    return _pysgpp_swig.OptInterpolatedFuzzyInterval_tryDowncast(fuzzyInterval)
OptInterpolatedFuzzyInterval_tryDowncast = _pysgpp_swig.OptInterpolatedFuzzyInterval_tryDowncast

class OptQuasiGaussianFuzzyNumber(OptFuzzyIntervalViaMembershipFunction):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyIntervalViaMembershipFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptQuasiGaussianFuzzyNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyIntervalViaMembershipFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptQuasiGaussianFuzzyNumber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptQuasiGaussianFuzzyNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptQuasiGaussianFuzzyNumber
    __del__ = lambda self: None

    def getMean(self) -> "double":
        return _pysgpp_swig.OptQuasiGaussianFuzzyNumber_getMean(self)

    def getStdev(self) -> "double":
        return _pysgpp_swig.OptQuasiGaussianFuzzyNumber_getStdev(self)

    def getCutoff(self) -> "double":
        return _pysgpp_swig.OptQuasiGaussianFuzzyNumber_getCutoff(self)
OptQuasiGaussianFuzzyNumber_swigregister = _pysgpp_swig.OptQuasiGaussianFuzzyNumber_swigregister
OptQuasiGaussianFuzzyNumber_swigregister(OptQuasiGaussianFuzzyNumber)

class OptTriangularFuzzyInterval(OptFuzzyInterval):
    __swig_setmethods__ = {}
    for _s in [OptFuzzyInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptTriangularFuzzyInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [OptFuzzyInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptTriangularFuzzyInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptTriangularFuzzyInterval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptTriangularFuzzyInterval
    __del__ = lambda self: None

    def getLeftMean(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getLeftMean(self)

    def getRightMean(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getRightMean(self)

    def getLeftSpread(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getLeftSpread(self)

    def getRightSpread(self) -> "double":
        return _pysgpp_swig.OptTriangularFuzzyInterval_getRightSpread(self)
OptTriangularFuzzyInterval_swigregister = _pysgpp_swig.OptTriangularFuzzyInterval_swigregister
OptTriangularFuzzyInterval_swigregister(OptTriangularFuzzyInterval)

class OptTestScalarFunction(OptScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptTestScalarFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptTestScalarFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptTestScalarFunction
    __del__ = lambda self: None

    def evalUndisplaced(self, x: 'DataVector') -> "double":
        return _pysgpp_swig.OptTestScalarFunction_evalUndisplaced(self, x)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptTestScalarFunction_getDisplacement(self)

    def setDisplacement(self, displacement: 'DataVector') -> "void":
        return _pysgpp_swig.OptTestScalarFunction_setDisplacement(self, displacement)
OptTestScalarFunction_swigregister = _pysgpp_swig.OptTestScalarFunction_swigregister
OptTestScalarFunction_swigregister(OptTestScalarFunction)

class OptTestVectorFunction(OptVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptTestVectorFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OptVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptTestVectorFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysgpp_swig.delete_OptTestVectorFunction
    __del__ = lambda self: None

    def evalUndisplaced(self, x: 'DataVector', value: 'DataVector') -> "void":
        return _pysgpp_swig.OptTestVectorFunction_evalUndisplaced(self, x, value)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptTestVectorFunction_getDisplacement(self)

    def setDisplacement(self, displacement: 'DataVector') -> "void":
        return _pysgpp_swig.OptTestVectorFunction_setDisplacement(self, displacement)
OptTestVectorFunction_swigregister = _pysgpp_swig.OptTestVectorFunction_swigregister
OptTestVectorFunction_swigregister(OptTestVectorFunction)

class OptUnconstrainedTestProblem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptUnconstrainedTestProblem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptUnconstrainedTestProblem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_STANDARD_DEVIATION = _pysgpp_swig.OptUnconstrainedTestProblem_DEFAULT_STANDARD_DEVIATION
    __swig_destroy__ = _pysgpp_swig.delete_OptUnconstrainedTestProblem
    __del__ = lambda self: None

    def getObjectiveFunction(self) -> "sgpp::optimization::test_problems::TestScalarFunction &":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getObjectiveFunction(self)

    def getOptimalPoint(self, x: 'DataVector') -> "double":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getOptimalPoint(self, x)

    def getOptimalPointUndisplaced(self, x: 'DataVector') -> "double":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getOptimalPointUndisplaced(self, x)

    def generateDisplacement(self, *args) -> "void":
        return _pysgpp_swig.OptUnconstrainedTestProblem_generateDisplacement(self, *args)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptUnconstrainedTestProblem_getDisplacement(self)

    def setDisplacement(self, displacement: 'DataVector') -> "void":
        return _pysgpp_swig.OptUnconstrainedTestProblem_setDisplacement(self, displacement)
OptUnconstrainedTestProblem_swigregister = _pysgpp_swig.OptUnconstrainedTestProblem_swigregister
OptUnconstrainedTestProblem_swigregister(OptUnconstrainedTestProblem)

class AbsoluteValueObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsoluteValueObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbsoluteValueObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_AbsoluteValueObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_AbsoluteValueObjective
    __del__ = lambda self: None
AbsoluteValueObjective_swigregister = _pysgpp_swig.AbsoluteValueObjective_swigregister
AbsoluteValueObjective_swigregister(AbsoluteValueObjective)

class OptAbsoluteValueObjective(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAbsoluteValueObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAbsoluteValueObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptAbsoluteValueObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAbsoluteValueObjective
    __del__ = lambda self: None
OptAbsoluteValueObjective_swigregister = _pysgpp_swig.OptAbsoluteValueObjective_swigregister
OptAbsoluteValueObjective_swigregister(OptAbsoluteValueObjective)

class OptAckleyObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAckleyObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAckleyObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptAckleyObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAckleyObjective
    __del__ = lambda self: None
OptAckleyObjective_swigregister = _pysgpp_swig.OptAckleyObjective_swigregister
OptAckleyObjective_swigregister(OptAckleyObjective)

class OptAckley(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAckley, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAckley, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptAckley(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAckley
    __del__ = lambda self: None
OptAckley_swigregister = _pysgpp_swig.OptAckley_swigregister
OptAckley_swigregister(OptAckley)

class OptAlpine02Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAlpine02Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAlpine02Objective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptAlpine02Objective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAlpine02Objective
    __del__ = lambda self: None
OptAlpine02Objective_swigregister = _pysgpp_swig.OptAlpine02Objective_swigregister
OptAlpine02Objective_swigregister(OptAlpine02Objective)

class OptAlpine02(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAlpine02, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAlpine02, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptAlpine02(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptAlpine02
    __del__ = lambda self: None
OptAlpine02_swigregister = _pysgpp_swig.OptAlpine02_swigregister
OptAlpine02_swigregister(OptAlpine02)

class OptBealeObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBealeObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBealeObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptBealeObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBealeObjective
    __del__ = lambda self: None
OptBealeObjective_swigregister = _pysgpp_swig.OptBealeObjective_swigregister
OptBealeObjective_swigregister(OptBealeObjective)

class OptBeale(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBeale, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBeale, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptBeale()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBeale
    __del__ = lambda self: None
OptBeale_swigregister = _pysgpp_swig.OptBeale_swigregister
OptBeale_swigregister(OptBeale)

class OptBranin01Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBranin01Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBranin01Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptBranin01Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin01Objective
    __del__ = lambda self: None
OptBranin01Objective_swigregister = _pysgpp_swig.OptBranin01Objective_swigregister
OptBranin01Objective_swigregister(OptBranin01Objective)

class OptBranin01(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBranin01, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBranin01, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptBranin01()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin01
    __del__ = lambda self: None
OptBranin01_swigregister = _pysgpp_swig.OptBranin01_swigregister
OptBranin01_swigregister(OptBranin01)

class OptBranin02Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBranin02Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBranin02Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptBranin02Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin02Objective
    __del__ = lambda self: None
OptBranin02Objective_swigregister = _pysgpp_swig.OptBranin02Objective_swigregister
OptBranin02Objective_swigregister(OptBranin02Objective)

class OptBranin02(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBranin02, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBranin02, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptBranin02()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBranin02
    __del__ = lambda self: None
OptBranin02_swigregister = _pysgpp_swig.OptBranin02_swigregister
OptBranin02_swigregister(OptBranin02)

class OptBubbleWrapObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBubbleWrapObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBubbleWrapObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptBubbleWrapObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBubbleWrapObjective
    __del__ = lambda self: None
OptBubbleWrapObjective_swigregister = _pysgpp_swig.OptBubbleWrapObjective_swigregister
OptBubbleWrapObjective_swigregister(OptBubbleWrapObjective)

class OptBubbleWrap(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptBubbleWrap, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptBubbleWrap, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptBubbleWrap(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptBubbleWrap
    __del__ = lambda self: None
OptBubbleWrap_swigregister = _pysgpp_swig.OptBubbleWrap_swigregister
OptBubbleWrap_swigregister(OptBubbleWrap)

class OptEasomYangObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEasomYangObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEasomYangObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptEasomYangObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptEasomYangObjective
    __del__ = lambda self: None
OptEasomYangObjective_swigregister = _pysgpp_swig.OptEasomYangObjective_swigregister
OptEasomYangObjective_swigregister(OptEasomYangObjective)

class OptEasomYang(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEasomYang, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEasomYang, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptEasomYang(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptEasomYang
    __del__ = lambda self: None
OptEasomYang_swigregister = _pysgpp_swig.OptEasomYang_swigregister
OptEasomYang_swigregister(OptEasomYang)

class OptEggholderObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEggholderObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEggholderObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptEggholderObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptEggholderObjective
    __del__ = lambda self: None
OptEggholderObjective_swigregister = _pysgpp_swig.OptEggholderObjective_swigregister
OptEggholderObjective_swigregister(OptEggholderObjective)

class OptEggholder(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptEggholder, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptEggholder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptEggholder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptEggholder
    __del__ = lambda self: None
OptEggholder_swigregister = _pysgpp_swig.OptEggholder_swigregister
OptEggholder_swigregister(OptEggholder)

class OptGoldsteinPriceObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGoldsteinPriceObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGoldsteinPriceObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptGoldsteinPriceObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGoldsteinPriceObjective
    __del__ = lambda self: None
OptGoldsteinPriceObjective_swigregister = _pysgpp_swig.OptGoldsteinPriceObjective_swigregister
OptGoldsteinPriceObjective_swigregister(OptGoldsteinPriceObjective)

class OptGoldsteinPrice(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGoldsteinPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGoldsteinPrice, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptGoldsteinPrice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGoldsteinPrice
    __del__ = lambda self: None
OptGoldsteinPrice_swigregister = _pysgpp_swig.OptGoldsteinPrice_swigregister
OptGoldsteinPrice_swigregister(OptGoldsteinPrice)

class OptGriewankObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGriewankObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGriewankObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptGriewankObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGriewankObjective
    __del__ = lambda self: None
OptGriewankObjective_swigregister = _pysgpp_swig.OptGriewankObjective_swigregister
OptGriewankObjective_swigregister(OptGriewankObjective)

class OptGriewank(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptGriewank, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptGriewank, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptGriewank(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptGriewank
    __del__ = lambda self: None
OptGriewank_swigregister = _pysgpp_swig.OptGriewank_swigregister
OptGriewank_swigregister(OptGriewank)

class OptHartman3Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHartman3Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHartman3Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHartman3Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman3Objective
    __del__ = lambda self: None
OptHartman3Objective_swigregister = _pysgpp_swig.OptHartman3Objective_swigregister
OptHartman3Objective_swigregister(OptHartman3Objective)

class OptHartman3(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHartman3, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHartman3, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHartman3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman3
    __del__ = lambda self: None
OptHartman3_swigregister = _pysgpp_swig.OptHartman3_swigregister
OptHartman3_swigregister(OptHartman3)

class OptHartman6Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHartman6Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHartman6Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHartman6Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman6Objective
    __del__ = lambda self: None
OptHartman6Objective_swigregister = _pysgpp_swig.OptHartman6Objective_swigregister
OptHartman6Objective_swigregister(OptHartman6Objective)

class OptHartman6(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHartman6, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHartman6, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHartman6()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHartman6
    __del__ = lambda self: None
OptHartman6_swigregister = _pysgpp_swig.OptHartman6_swigregister
OptHartman6_swigregister(OptHartman6)

class OptHimmelblauObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHimmelblauObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHimmelblauObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHimmelblauObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHimmelblauObjective
    __del__ = lambda self: None
OptHimmelblauObjective_swigregister = _pysgpp_swig.OptHimmelblauObjective_swigregister
OptHimmelblauObjective_swigregister(OptHimmelblauObjective)

class OptHimmelblau(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHimmelblau, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHimmelblau, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHimmelblau()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHimmelblau
    __del__ = lambda self: None
OptHimmelblau_swigregister = _pysgpp_swig.OptHimmelblau_swigregister
OptHimmelblau_swigregister(OptHimmelblau)

class OptHoelderTableObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHoelderTableObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHoelderTableObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHoelderTableObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHoelderTableObjective
    __del__ = lambda self: None
OptHoelderTableObjective_swigregister = _pysgpp_swig.OptHoelderTableObjective_swigregister
OptHoelderTableObjective_swigregister(OptHoelderTableObjective)

class OptHoelderTable(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptHoelderTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptHoelderTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptHoelderTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptHoelderTable
    __del__ = lambda self: None
OptHoelderTable_swigregister = _pysgpp_swig.OptHoelderTable_swigregister
OptHoelderTable_swigregister(OptHoelderTable)

class OptIncreasingPowerObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIncreasingPowerObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIncreasingPowerObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptIncreasingPowerObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIncreasingPowerObjective
    __del__ = lambda self: None
OptIncreasingPowerObjective_swigregister = _pysgpp_swig.OptIncreasingPowerObjective_swigregister
OptIncreasingPowerObjective_swigregister(OptIncreasingPowerObjective)

class OptIncreasingPower(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptIncreasingPower, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptIncreasingPower, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptIncreasingPower(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptIncreasingPower
    __del__ = lambda self: None
OptIncreasingPower_swigregister = _pysgpp_swig.OptIncreasingPower_swigregister
OptIncreasingPower_swigregister(OptIncreasingPower)

class OptMichalewiczObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMichalewiczObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMichalewiczObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptMichalewiczObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMichalewiczObjective
    __del__ = lambda self: None
OptMichalewiczObjective_swigregister = _pysgpp_swig.OptMichalewiczObjective_swigregister
OptMichalewiczObjective_swigregister(OptMichalewiczObjective)

class OptMichalewicz(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMichalewicz, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMichalewicz, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptMichalewicz()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMichalewicz
    __del__ = lambda self: None
OptMichalewicz_swigregister = _pysgpp_swig.OptMichalewicz_swigregister
OptMichalewicz_swigregister(OptMichalewicz)

class OptMladineoObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMladineoObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMladineoObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptMladineoObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMladineoObjective
    __del__ = lambda self: None
OptMladineoObjective_swigregister = _pysgpp_swig.OptMladineoObjective_swigregister
OptMladineoObjective_swigregister(OptMladineoObjective)

class OptMladineo(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMladineo, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptMladineo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptMladineo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMladineo
    __del__ = lambda self: None
OptMladineo_swigregister = _pysgpp_swig.OptMladineo_swigregister
OptMladineo_swigregister(OptMladineo)

class OptPermObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptPermObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptPermObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptPermObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptPermObjective
    __del__ = lambda self: None
OptPermObjective_swigregister = _pysgpp_swig.OptPermObjective_swigregister
OptPermObjective_swigregister(OptPermObjective)

class OptPerm(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptPerm, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptPerm, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptPerm(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptPerm
    __del__ = lambda self: None
OptPerm_swigregister = _pysgpp_swig.OptPerm_swigregister
OptPerm_swigregister(OptPerm)

class OptRastriginObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRastriginObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRastriginObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptRastriginObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptRastriginObjective
    __del__ = lambda self: None
OptRastriginObjective_swigregister = _pysgpp_swig.OptRastriginObjective_swigregister
OptRastriginObjective_swigregister(OptRastriginObjective)

class OptRastrigin(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRastrigin, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRastrigin, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptRastrigin(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptRastrigin
    __del__ = lambda self: None
OptRastrigin_swigregister = _pysgpp_swig.OptRastrigin_swigregister
OptRastrigin_swigregister(OptRastrigin)

class OptRosenbrockObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRosenbrockObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRosenbrockObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptRosenbrockObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptRosenbrockObjective
    __del__ = lambda self: None
OptRosenbrockObjective_swigregister = _pysgpp_swig.OptRosenbrockObjective_swigregister
OptRosenbrockObjective_swigregister(OptRosenbrockObjective)

class OptRosenbrock(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptRosenbrock, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptRosenbrock, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptRosenbrock(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptRosenbrock
    __del__ = lambda self: None
OptRosenbrock_swigregister = _pysgpp_swig.OptRosenbrock_swigregister
OptRosenbrock_swigregister(OptRosenbrock)

class OptSHCBObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSHCBObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSHCBObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSHCBObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSHCBObjective
    __del__ = lambda self: None
OptSHCBObjective_swigregister = _pysgpp_swig.OptSHCBObjective_swigregister
OptSHCBObjective_swigregister(OptSHCBObjective)

class OptSHCB(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSHCB, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSHCB, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSHCB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSHCB
    __del__ = lambda self: None
OptSHCB_swigregister = _pysgpp_swig.OptSHCB_swigregister
OptSHCB_swigregister(OptSHCB)

class OptSchwefel06Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSchwefel06Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSchwefel06Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSchwefel06Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel06Objective
    __del__ = lambda self: None
OptSchwefel06Objective_swigregister = _pysgpp_swig.OptSchwefel06Objective_swigregister
OptSchwefel06Objective_swigregister(OptSchwefel06Objective)

class OptSchwefel06(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSchwefel06, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSchwefel06, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSchwefel06()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel06
    __del__ = lambda self: None
OptSchwefel06_swigregister = _pysgpp_swig.OptSchwefel06_swigregister
OptSchwefel06_swigregister(OptSchwefel06)

class OptSchwefel22Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSchwefel22Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSchwefel22Objective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptSchwefel22Objective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel22Objective
    __del__ = lambda self: None
OptSchwefel22Objective_swigregister = _pysgpp_swig.OptSchwefel22Objective_swigregister
OptSchwefel22Objective_swigregister(OptSchwefel22Objective)

class OptSchwefel22(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSchwefel22, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSchwefel22, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptSchwefel22(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel22
    __del__ = lambda self: None
OptSchwefel22_swigregister = _pysgpp_swig.OptSchwefel22_swigregister
OptSchwefel22_swigregister(OptSchwefel22)

class OptSchwefel26Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSchwefel26Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSchwefel26Objective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptSchwefel26Objective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel26Objective
    __del__ = lambda self: None
OptSchwefel26Objective_swigregister = _pysgpp_swig.OptSchwefel26Objective_swigregister
OptSchwefel26Objective_swigregister(OptSchwefel26Objective)

class OptSchwefel26(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSchwefel26, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSchwefel26, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptSchwefel26(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSchwefel26
    __del__ = lambda self: None
OptSchwefel26_swigregister = _pysgpp_swig.OptSchwefel26_swigregister
OptSchwefel26_swigregister(OptSchwefel26)

class OptSphereObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSphereObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSphereObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptSphereObjective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSphereObjective
    __del__ = lambda self: None
OptSphereObjective_swigregister = _pysgpp_swig.OptSphereObjective_swigregister
OptSphereObjective_swigregister(OptSphereObjective)

class OptSphere(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSphere, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptSphere(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSphere
    __del__ = lambda self: None
OptSphere_swigregister = _pysgpp_swig.OptSphere_swigregister
OptSphere_swigregister(OptSphere)

class OptTremblingParabolaObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptTremblingParabolaObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptTremblingParabolaObjective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', p: 'size_t'):
        this = _pysgpp_swig.new_OptTremblingParabolaObjective(d, p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptTremblingParabolaObjective
    __del__ = lambda self: None
OptTremblingParabolaObjective_swigregister = _pysgpp_swig.OptTremblingParabolaObjective_swigregister
OptTremblingParabolaObjective_swigregister(OptTremblingParabolaObjective)

class OptTremblingParabola(OptUnconstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptTremblingParabola, name, value)
    __swig_getmethods__ = {}
    for _s in [OptUnconstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptTremblingParabola, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t', p: 'size_t'):
        this = _pysgpp_swig.new_OptTremblingParabola(d, p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptTremblingParabola
    __del__ = lambda self: None
OptTremblingParabola_swigregister = _pysgpp_swig.OptTremblingParabola_swigregister
OptTremblingParabola_swigregister(OptTremblingParabola)

class OptConstrainedTestProblem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptConstrainedTestProblem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptConstrainedTestProblem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_STANDARD_DEVIATION = _pysgpp_swig.OptConstrainedTestProblem_DEFAULT_STANDARD_DEVIATION
    __swig_destroy__ = _pysgpp_swig.delete_OptConstrainedTestProblem
    __del__ = lambda self: None

    def getObjectiveFunction(self) -> "sgpp::optimization::test_problems::TestScalarFunction &":
        return _pysgpp_swig.OptConstrainedTestProblem_getObjectiveFunction(self)

    def getInequalityConstraintFunction(self) -> "sgpp::optimization::test_problems::TestVectorFunction &":
        return _pysgpp_swig.OptConstrainedTestProblem_getInequalityConstraintFunction(self)

    def getEqualityConstraintFunction(self) -> "sgpp::optimization::test_problems::TestVectorFunction &":
        return _pysgpp_swig.OptConstrainedTestProblem_getEqualityConstraintFunction(self)

    def getOptimalPoint(self, x: 'DataVector') -> "double":
        return _pysgpp_swig.OptConstrainedTestProblem_getOptimalPoint(self, x)

    def getOptimalPointUndisplaced(self, x: 'DataVector') -> "double":
        return _pysgpp_swig.OptConstrainedTestProblem_getOptimalPointUndisplaced(self, x)

    def generateDisplacement(self, *args) -> "void":
        return _pysgpp_swig.OptConstrainedTestProblem_generateDisplacement(self, *args)

    def getDisplacement(self) -> "sgpp::base::DataVector const &":
        return _pysgpp_swig.OptConstrainedTestProblem_getDisplacement(self)

    def setDisplacement(self, displacement: 'DataVector') -> "void":
        return _pysgpp_swig.OptConstrainedTestProblem_setDisplacement(self, displacement)
OptConstrainedTestProblem_swigregister = _pysgpp_swig.OptConstrainedTestProblem_swigregister
OptConstrainedTestProblem_swigregister(OptConstrainedTestProblem)

class OptFloudasObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFloudasObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFloudasObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptFloudasObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudasObjective
    __del__ = lambda self: None
OptFloudasObjective_swigregister = _pysgpp_swig.OptFloudasObjective_swigregister
OptFloudasObjective_swigregister(OptFloudasObjective)

class OptFloudasInequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFloudasInequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFloudasInequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptFloudasInequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudasInequalityConstraint
    __del__ = lambda self: None
OptFloudasInequalityConstraint_swigregister = _pysgpp_swig.OptFloudasInequalityConstraint_swigregister
OptFloudasInequalityConstraint_swigregister(OptFloudasInequalityConstraint)

class OptFloudasEqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFloudasEqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFloudasEqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptFloudasEqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudasEqualityConstraint
    __del__ = lambda self: None
OptFloudasEqualityConstraint_swigregister = _pysgpp_swig.OptFloudasEqualityConstraint_swigregister
OptFloudasEqualityConstraint_swigregister(OptFloudasEqualityConstraint)

class OptFloudas(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFloudas, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFloudas, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptFloudas()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptFloudas
    __del__ = lambda self: None
OptFloudas_swigregister = _pysgpp_swig.OptFloudas_swigregister
OptFloudas_swigregister(OptFloudas)

class OptG03Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG03Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG03Objective, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptG03Objective(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG03Objective
    __del__ = lambda self: None
OptG03Objective_swigregister = _pysgpp_swig.OptG03Objective_swigregister
OptG03Objective_swigregister(OptG03Objective)

class OptG03InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG03InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG03InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptG03InequalityConstraint(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG03InequalityConstraint
    __del__ = lambda self: None
OptG03InequalityConstraint_swigregister = _pysgpp_swig.OptG03InequalityConstraint_swigregister
OptG03InequalityConstraint_swigregister(OptG03InequalityConstraint)

class OptG03EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG03EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG03EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptG03EqualityConstraint(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG03EqualityConstraint
    __del__ = lambda self: None
OptG03EqualityConstraint_swigregister = _pysgpp_swig.OptG03EqualityConstraint_swigregister
OptG03EqualityConstraint_swigregister(OptG03EqualityConstraint)

class OptG03(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG03, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG03, name)
    __repr__ = _swig_repr

    def __init__(self, d: 'size_t'):
        this = _pysgpp_swig.new_OptG03(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG03
    __del__ = lambda self: None
OptG03_swigregister = _pysgpp_swig.OptG03_swigregister
OptG03_swigregister(OptG03)

class OptG04Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04Objective
    __del__ = lambda self: None
OptG04Objective_swigregister = _pysgpp_swig.OptG04Objective_swigregister
OptG04Objective_swigregister(OptG04Objective)

class OptG04InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04InequalityConstraint
    __del__ = lambda self: None
OptG04InequalityConstraint_swigregister = _pysgpp_swig.OptG04InequalityConstraint_swigregister
OptG04InequalityConstraint_swigregister(OptG04InequalityConstraint)

class OptG04EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04EqualityConstraint
    __del__ = lambda self: None
OptG04EqualityConstraint_swigregister = _pysgpp_swig.OptG04EqualityConstraint_swigregister
OptG04EqualityConstraint_swigregister(OptG04EqualityConstraint)

class OptG04(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04
    __del__ = lambda self: None
OptG04_swigregister = _pysgpp_swig.OptG04_swigregister
OptG04_swigregister(OptG04)

class OptG04SquaredObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04SquaredObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04SquaredObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04SquaredObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04SquaredObjective
    __del__ = lambda self: None
OptG04SquaredObjective_swigregister = _pysgpp_swig.OptG04SquaredObjective_swigregister
OptG04SquaredObjective_swigregister(OptG04SquaredObjective)

class OptG04SquaredInequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04SquaredInequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04SquaredInequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04SquaredInequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04SquaredInequalityConstraint
    __del__ = lambda self: None
OptG04SquaredInequalityConstraint_swigregister = _pysgpp_swig.OptG04SquaredInequalityConstraint_swigregister
OptG04SquaredInequalityConstraint_swigregister(OptG04SquaredInequalityConstraint)

class OptG04SquaredEqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04SquaredEqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04SquaredEqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04SquaredEqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04SquaredEqualityConstraint
    __del__ = lambda self: None
OptG04SquaredEqualityConstraint_swigregister = _pysgpp_swig.OptG04SquaredEqualityConstraint_swigregister
OptG04SquaredEqualityConstraint_swigregister(OptG04SquaredEqualityConstraint)

class OptG04Squared(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG04Squared, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG04Squared, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG04Squared()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG04Squared
    __del__ = lambda self: None
OptG04Squared_swigregister = _pysgpp_swig.OptG04Squared_swigregister
OptG04Squared_swigregister(OptG04Squared)

class OptG05Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG05Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG05Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG05Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG05Objective
    __del__ = lambda self: None
OptG05Objective_swigregister = _pysgpp_swig.OptG05Objective_swigregister
OptG05Objective_swigregister(OptG05Objective)

class OptG05InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG05InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG05InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG05InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG05InequalityConstraint
    __del__ = lambda self: None
OptG05InequalityConstraint_swigregister = _pysgpp_swig.OptG05InequalityConstraint_swigregister
OptG05InequalityConstraint_swigregister(OptG05InequalityConstraint)

class OptG05EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG05EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG05EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG05EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG05EqualityConstraint
    __del__ = lambda self: None
OptG05EqualityConstraint_swigregister = _pysgpp_swig.OptG05EqualityConstraint_swigregister
OptG05EqualityConstraint_swigregister(OptG05EqualityConstraint)

class OptG05(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG05, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG05, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG05()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG05
    __del__ = lambda self: None
OptG05_swigregister = _pysgpp_swig.OptG05_swigregister
OptG05_swigregister(OptG05)

class OptG06Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG06Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG06Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG06Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG06Objective
    __del__ = lambda self: None
OptG06Objective_swigregister = _pysgpp_swig.OptG06Objective_swigregister
OptG06Objective_swigregister(OptG06Objective)

class OptG06InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG06InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG06InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG06InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG06InequalityConstraint
    __del__ = lambda self: None
OptG06InequalityConstraint_swigregister = _pysgpp_swig.OptG06InequalityConstraint_swigregister
OptG06InequalityConstraint_swigregister(OptG06InequalityConstraint)

class OptG06EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG06EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG06EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG06EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG06EqualityConstraint
    __del__ = lambda self: None
OptG06EqualityConstraint_swigregister = _pysgpp_swig.OptG06EqualityConstraint_swigregister
OptG06EqualityConstraint_swigregister(OptG06EqualityConstraint)

class OptG06(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG06, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG06, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG06()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG06
    __del__ = lambda self: None
OptG06_swigregister = _pysgpp_swig.OptG06_swigregister
OptG06_swigregister(OptG06)

class OptG08Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG08Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG08Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG08Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG08Objective
    __del__ = lambda self: None
OptG08Objective_swigregister = _pysgpp_swig.OptG08Objective_swigregister
OptG08Objective_swigregister(OptG08Objective)

class OptG08InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG08InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG08InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG08InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG08InequalityConstraint
    __del__ = lambda self: None
OptG08InequalityConstraint_swigregister = _pysgpp_swig.OptG08InequalityConstraint_swigregister
OptG08InequalityConstraint_swigregister(OptG08InequalityConstraint)

class OptG08EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG08EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG08EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG08EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG08EqualityConstraint
    __del__ = lambda self: None
OptG08EqualityConstraint_swigregister = _pysgpp_swig.OptG08EqualityConstraint_swigregister
OptG08EqualityConstraint_swigregister(OptG08EqualityConstraint)

class OptG08(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG08, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG08, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG08()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG08
    __del__ = lambda self: None
OptG08_swigregister = _pysgpp_swig.OptG08_swigregister
OptG08_swigregister(OptG08)

class OptG09Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG09Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG09Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG09Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG09Objective
    __del__ = lambda self: None
OptG09Objective_swigregister = _pysgpp_swig.OptG09Objective_swigregister
OptG09Objective_swigregister(OptG09Objective)

class OptG09InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG09InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG09InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG09InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG09InequalityConstraint
    __del__ = lambda self: None
OptG09InequalityConstraint_swigregister = _pysgpp_swig.OptG09InequalityConstraint_swigregister
OptG09InequalityConstraint_swigregister(OptG09InequalityConstraint)

class OptG09EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG09EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG09EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG09EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG09EqualityConstraint
    __del__ = lambda self: None
OptG09EqualityConstraint_swigregister = _pysgpp_swig.OptG09EqualityConstraint_swigregister
OptG09EqualityConstraint_swigregister(OptG09EqualityConstraint)

class OptG09(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG09, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG09, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG09()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG09
    __del__ = lambda self: None
OptG09_swigregister = _pysgpp_swig.OptG09_swigregister
OptG09_swigregister(OptG09)

class OptG10Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG10Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG10Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG10Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG10Objective
    __del__ = lambda self: None
OptG10Objective_swigregister = _pysgpp_swig.OptG10Objective_swigregister
OptG10Objective_swigregister(OptG10Objective)

class OptG10InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG10InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG10InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG10InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG10InequalityConstraint
    __del__ = lambda self: None
OptG10InequalityConstraint_swigregister = _pysgpp_swig.OptG10InequalityConstraint_swigregister
OptG10InequalityConstraint_swigregister(OptG10InequalityConstraint)

class OptG10EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG10EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG10EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG10EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG10EqualityConstraint
    __del__ = lambda self: None
OptG10EqualityConstraint_swigregister = _pysgpp_swig.OptG10EqualityConstraint_swigregister
OptG10EqualityConstraint_swigregister(OptG10EqualityConstraint)

class OptG10(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG10, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG10, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG10()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG10
    __del__ = lambda self: None
OptG10_swigregister = _pysgpp_swig.OptG10_swigregister
OptG10_swigregister(OptG10)

class OptG11Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG11Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG11Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG11Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG11Objective
    __del__ = lambda self: None
OptG11Objective_swigregister = _pysgpp_swig.OptG11Objective_swigregister
OptG11Objective_swigregister(OptG11Objective)

class OptG11InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG11InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG11InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG11InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG11InequalityConstraint
    __del__ = lambda self: None
OptG11InequalityConstraint_swigregister = _pysgpp_swig.OptG11InequalityConstraint_swigregister
OptG11InequalityConstraint_swigregister(OptG11InequalityConstraint)

class OptG11EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG11EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG11EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG11EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG11EqualityConstraint
    __del__ = lambda self: None
OptG11EqualityConstraint_swigregister = _pysgpp_swig.OptG11EqualityConstraint_swigregister
OptG11EqualityConstraint_swigregister(OptG11EqualityConstraint)

class OptG11(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG11, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG11, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG11()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG11
    __del__ = lambda self: None
OptG11_swigregister = _pysgpp_swig.OptG11_swigregister
OptG11_swigregister(OptG11)

class OptG12Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG12Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG12Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG12Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG12Objective
    __del__ = lambda self: None
OptG12Objective_swigregister = _pysgpp_swig.OptG12Objective_swigregister
OptG12Objective_swigregister(OptG12Objective)

class OptG12InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG12InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG12InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG12InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG12InequalityConstraint
    __del__ = lambda self: None
OptG12InequalityConstraint_swigregister = _pysgpp_swig.OptG12InequalityConstraint_swigregister
OptG12InequalityConstraint_swigregister(OptG12InequalityConstraint)

class OptG12EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG12EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG12EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG12EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG12EqualityConstraint
    __del__ = lambda self: None
OptG12EqualityConstraint_swigregister = _pysgpp_swig.OptG12EqualityConstraint_swigregister
OptG12EqualityConstraint_swigregister(OptG12EqualityConstraint)

class OptG12(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG12, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG12, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG12()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG12
    __del__ = lambda self: None
OptG12_swigregister = _pysgpp_swig.OptG12_swigregister
OptG12_swigregister(OptG12)

class OptG13Objective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG13Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG13Objective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG13Objective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG13Objective
    __del__ = lambda self: None
OptG13Objective_swigregister = _pysgpp_swig.OptG13Objective_swigregister
OptG13Objective_swigregister(OptG13Objective)

class OptG13InequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG13InequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG13InequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG13InequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG13InequalityConstraint
    __del__ = lambda self: None
OptG13InequalityConstraint_swigregister = _pysgpp_swig.OptG13InequalityConstraint_swigregister
OptG13InequalityConstraint_swigregister(OptG13InequalityConstraint)

class OptG13EqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG13EqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG13EqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG13EqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG13EqualityConstraint
    __del__ = lambda self: None
OptG13EqualityConstraint_swigregister = _pysgpp_swig.OptG13EqualityConstraint_swigregister
OptG13EqualityConstraint_swigregister(OptG13EqualityConstraint)

class OptG13(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptG13, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptG13, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptG13()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptG13
    __del__ = lambda self: None
OptG13_swigregister = _pysgpp_swig.OptG13_swigregister
OptG13_swigregister(OptG13)

class OptSimionescuObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSimionescuObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSimionescuObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSimionescuObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescuObjective
    __del__ = lambda self: None
OptSimionescuObjective_swigregister = _pysgpp_swig.OptSimionescuObjective_swigregister
OptSimionescuObjective_swigregister(OptSimionescuObjective)

class OptSimionescuInequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSimionescuInequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSimionescuInequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSimionescuInequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescuInequalityConstraint
    __del__ = lambda self: None
OptSimionescuInequalityConstraint_swigregister = _pysgpp_swig.OptSimionescuInequalityConstraint_swigregister
OptSimionescuInequalityConstraint_swigregister(OptSimionescuInequalityConstraint)

class OptSimionescuEqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSimionescuEqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSimionescuEqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSimionescuEqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescuEqualityConstraint
    __del__ = lambda self: None
OptSimionescuEqualityConstraint_swigregister = _pysgpp_swig.OptSimionescuEqualityConstraint_swigregister
OptSimionescuEqualityConstraint_swigregister(OptSimionescuEqualityConstraint)

class OptSimionescu(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSimionescu, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSimionescu, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSimionescu()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSimionescu
    __del__ = lambda self: None
OptSimionescu_swigregister = _pysgpp_swig.OptSimionescu_swigregister
OptSimionescu_swigregister(OptSimionescu)

class OptSolandObjective(OptTestScalarFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSolandObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestScalarFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSolandObjective, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSolandObjective()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSolandObjective
    __del__ = lambda self: None
OptSolandObjective_swigregister = _pysgpp_swig.OptSolandObjective_swigregister
OptSolandObjective_swigregister(OptSolandObjective)

class OptSolandInequalityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSolandInequalityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSolandInequalityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSolandInequalityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSolandInequalityConstraint
    __del__ = lambda self: None
OptSolandInequalityConstraint_swigregister = _pysgpp_swig.OptSolandInequalityConstraint_swigregister
OptSolandInequalityConstraint_swigregister(OptSolandInequalityConstraint)

class OptSolandEqualityConstraint(OptTestVectorFunction):
    __swig_setmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSolandEqualityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OptTestVectorFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSolandEqualityConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSolandEqualityConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSolandEqualityConstraint
    __del__ = lambda self: None
OptSolandEqualityConstraint_swigregister = _pysgpp_swig.OptSolandEqualityConstraint_swigregister
OptSolandEqualityConstraint_swigregister(OptSolandEqualityConstraint)

class OptSoland(OptConstrainedTestProblem):
    __swig_setmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptSoland, name, value)
    __swig_getmethods__ = {}
    for _s in [OptConstrainedTestProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptSoland, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pysgpp_swig.new_OptSoland()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptSoland
    __del__ = lambda self: None
OptSoland_swigregister = _pysgpp_swig.OptSoland_swigregister
OptSoland_swigregister(OptSoland)


def OptFileIOWriteGrid(*args) -> "void":
    return _pysgpp_swig.OptFileIOWriteGrid(*args)
OptFileIOWriteGrid = _pysgpp_swig.OptFileIOWriteGrid

def OptFileIOReadGrid(*args) -> "void":
    return _pysgpp_swig.OptFileIOReadGrid(*args)
OptFileIOReadGrid = _pysgpp_swig.OptFileIOReadGrid

def OptMathSchurDecomposition(A: 'DataMatrix', V: 'DataMatrix') -> "void":
    return _pysgpp_swig.OptMathSchurDecomposition(A, V)
OptMathSchurDecomposition = _pysgpp_swig.OptMathSchurDecomposition

def OptMathQRDecomposition(A: 'DataMatrix', Q: 'DataMatrix') -> "void":
    return _pysgpp_swig.OptMathQRDecomposition(A, Q)
OptMathQRDecomposition = _pysgpp_swig.OptMathQRDecomposition

def OptMathHessenbergForm(A: 'DataMatrix', V: 'DataMatrix') -> "void":
    return _pysgpp_swig.OptMathHessenbergForm(A, V)
OptMathHessenbergForm = _pysgpp_swig.OptMathHessenbergForm

def OptMathHouseholderTransformation(A: 'DataMatrix', i: 'size_t', j: 'size_t', Q: 'DataMatrix') -> "void":
    return _pysgpp_swig.OptMathHouseholderTransformation(A, i, j, Q)
OptMathHouseholderTransformation = _pysgpp_swig.OptMathHouseholderTransformation
class OptMutexType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptMutexType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptMutexType, name)
    __repr__ = _swig_repr

    def lock(self) -> "void":
        return _pysgpp_swig.OptMutexType_lock(self)

    def unlock(self) -> "void":
        return _pysgpp_swig.OptMutexType_unlock(self)

    def __init__(self):
        this = _pysgpp_swig.new_OptMutexType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pysgpp_swig.delete_OptMutexType
    __del__ = lambda self: None
OptMutexType_swigregister = _pysgpp_swig.OptMutexType_swigregister
OptMutexType_swigregister(OptMutexType)


def __lshift__(*args) -> "std::ostream &":
    return _pysgpp_swig.__lshift__(*args)
__lshift__ = _pysgpp_swig.__lshift__
class OptPrinter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptPrinter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptPrinter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DEFAULT_VERBOSITY = _pysgpp_swig.OptPrinter_DEFAULT_VERBOSITY
    if _newclass:
        getInstance = staticmethod(_pysgpp_swig.OptPrinter_getInstance)
    else:
        getInstance = _pysgpp_swig.OptPrinter_getInstance

    def printStatusBegin(self, msg: 'std::string const &') -> "void":
        return _pysgpp_swig.OptPrinter_printStatusBegin(self, msg)

    def printStatusUpdate(self, msg: 'std::string const &') -> "void":
        return _pysgpp_swig.OptPrinter_printStatusUpdate(self, msg)

    def printStatusNewLine(self) -> "void":
        return _pysgpp_swig.OptPrinter_printStatusNewLine(self)

    def printStatusIdentation(self) -> "void":
        return _pysgpp_swig.OptPrinter_printStatusIdentation(self)

    def printStatusEnd(self, *args) -> "void":
        return _pysgpp_swig.OptPrinter_printStatusEnd(self, *args)

    def enableStatusPrinting(self) -> "void":
        return _pysgpp_swig.OptPrinter_enableStatusPrinting(self)

    def disableStatusPrinting(self) -> "void":
        return _pysgpp_swig.OptPrinter_disableStatusPrinting(self)

    def isStatusPrintingEnabled(self) -> "bool":
        return _pysgpp_swig.OptPrinter_isStatusPrintingEnabled(self)

    def getVerbosity(self) -> "int":
        return _pysgpp_swig.OptPrinter_getVerbosity(self)

    def setVerbosity(self, level: 'int') -> "void":
        return _pysgpp_swig.OptPrinter_setVerbosity(self, level)

    def getLastDurationSecs(self) -> "double":
        return _pysgpp_swig.OptPrinter_getLastDurationSecs(self)

    def getMutex(self) -> "sgpp::optimization::MutexType &":
        return _pysgpp_swig.OptPrinter_getMutex(self)

    def getStream(self) -> "std::ostream *":
        return _pysgpp_swig.OptPrinter_getStream(self)

    def setStream(self, stream: 'std::ostream *') -> "void":
        return _pysgpp_swig.OptPrinter_setStream(self, stream)

    def getLineLengthLimit(self) -> "size_t":
        return _pysgpp_swig.OptPrinter_getLineLengthLimit(self)

    def setLineLengthLimit(self, lineLengthLimit: 'size_t') -> "void":
        return _pysgpp_swig.OptPrinter_setLineLengthLimit(self, lineLengthLimit)

    def printIterativeGridGenerator(self, gridGen: 'OptIterativeGridGenerator') -> "void":
        return _pysgpp_swig.OptPrinter_printIterativeGridGenerator(self, gridGen)

    def printSLE(self, system: 'OptSLE') -> "void":
        return _pysgpp_swig.OptPrinter_printSLE(self, system)
    __swig_destroy__ = _pysgpp_swig.delete_OptPrinter
    __del__ = lambda self: None
OptPrinter_swigregister = _pysgpp_swig.OptPrinter_swigregister
OptPrinter_swigregister(OptPrinter)

def OptPrinter_getInstance() -> "sgpp::optimization::Printer &":
    return _pysgpp_swig.OptPrinter_getInstance()
OptPrinter_getInstance = _pysgpp_swig.OptPrinter_getInstance


def createOperationMultipleHierarchisation(grid: 'Grid') -> "sgpp::optimization::OperationMultipleHierarchisation *":
    return _pysgpp_swig.createOperationMultipleHierarchisation(grid)
createOperationMultipleHierarchisation = _pysgpp_swig.createOperationMultipleHierarchisation

def OptFileIOWriteMatrix(*args) -> "void":
    return _pysgpp_swig.OptFileIOWriteMatrix(*args)
OptFileIOWriteMatrix = _pysgpp_swig.OptFileIOWriteMatrix

def OptFileIOReadMatrix(*args) -> "size_t &, size_t &":
    return _pysgpp_swig.OptFileIOReadMatrix(*args)
OptFileIOReadMatrix = _pysgpp_swig.OptFileIOReadMatrix

def OptFileIOWriteVector(*args) -> "void":
    return _pysgpp_swig.OptFileIOWriteVector(*args)
OptFileIOWriteVector = _pysgpp_swig.OptFileIOWriteVector

def OptFileIOReadVector(*args) -> "void":
    return _pysgpp_swig.OptFileIOReadVector(*args)
OptFileIOReadVector = _pysgpp_swig.OptFileIOReadVector
class OptFuzzyIntervalVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFuzzyIntervalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptFuzzyIntervalVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pysgpp_swig.OptFuzzyIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pysgpp_swig.OptFuzzyIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pysgpp_swig.OptFuzzyIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type":
        return _pysgpp_swig.OptFuzzyIntervalVector___len__(self)

    def __getslice__(self, i: 'std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type', j: 'std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type') -> "std::vector< sgpp::optimization::FuzzyInterval const *,std::allocator< sgpp::optimization::FuzzyInterval const * > > *":
        return _pysgpp_swig.OptFuzzyIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type', j: 'std::vector< sgpp::optimization::FuzzyInterval const * >::difference_type') -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_pop(self)

    def append(self, x: 'OptFuzzyInterval') -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _pysgpp_swig.OptFuzzyIntervalVector_empty(self)

    def size(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_size(self)

    def swap(self, v: 'OptFuzzyIntervalVector') -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_swap(self, v)

    def begin(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_begin(self)

    def end(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_end(self)

    def rbegin(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::reverse_iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::reverse_iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_rend(self)

    def clear(self) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_clear(self)

    def get_allocator(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::allocator_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::iterator":
        return _pysgpp_swig.OptFuzzyIntervalVector_erase(self, *args)

    def __init__(self, *args):
        this = _pysgpp_swig.new_OptFuzzyIntervalVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'OptFuzzyInterval') -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_front(self)

    def back(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::value_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_back(self)

    def assign(self, n: 'std::vector< sgpp::optimization::FuzzyInterval const * >::size_type', x: 'OptFuzzyInterval') -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_insert(self, *args)

    def reserve(self, n: 'std::vector< sgpp::optimization::FuzzyInterval const * >::size_type') -> "void":
        return _pysgpp_swig.OptFuzzyIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< sgpp::optimization::FuzzyInterval const * >::size_type":
        return _pysgpp_swig.OptFuzzyIntervalVector_capacity(self)
    __swig_destroy__ = _pysgpp_swig.delete_OptFuzzyIntervalVector
    __del__ = lambda self: None
OptFuzzyIntervalVector_swigregister = _pysgpp_swig.OptFuzzyIntervalVector_swigregister
OptFuzzyIntervalVector_swigregister(OptFuzzyIntervalVector)

# This file is compatible with both classic and new-style classes.


