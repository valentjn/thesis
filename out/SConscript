import os
import subprocess
import warnings

# paper size of manuscript version (here A4),
# additional page margins for each side
manuscriptPaperWidth   = 210
manuscriptPaperHeight  = 297
manuscriptMarginLeft   = 3
manuscriptMarginBottom = 3
manuscriptMarginRight  = 3
manuscriptMarginTop    = 3

# paper size of published version (here A5),
# additional page margins for each side
publishedPaperWidth   = 148
publishedPaperHeight  = 210
publishedMarginLeft   = 3
publishedMarginBottom = 3
publishedMarginRight  = 3
publishedMarginTop    = 3



Import("env")
Import("Helper")
env = env.Clone()

# check for pdfjam
hasPDFJam = Helper.checkProgramInstalled(env, "pdfjam")
if not hasPDFJam:
  warnings.warn("pdfjam required for producing print versions. "
                "Skipping generation of print versions.")

pdfsPrint  = []
pdfsScreen = []

# install cover PDFs (generated by gfx/SConscript) in out/
coverPrintPDF  = env.Install(
    ".", os.path.join(env["BUILD_DIR"].abspath,
                      "..", "gfx", "coverPrint.pdf"))
coverScreenPDF = env.Install(
    ".", os.path.join(env["BUILD_DIR"].abspath,
                      "..", "gfx", "coverScreen.pdf"))
pdfsPrint.append(coverPrintPDF)
pdfsScreen.append(coverScreenPDF)

# install PDF generated by LuaLaTeX as manuscript screen version
thesisManuscriptScreen = env.InstallAs(
    "thesisManuscriptScreen.pdf", env["BUILD_PDF"])
env.AddPostAction(thesisManuscriptScreen, Helper.compressPDFs)
pdfsScreen.append(thesisManuscriptScreen)

if hasPDFJam:
  # generate manuscript print version
  thesisManuscriptPrint = env.Command(
      "thesisManuscriptPrint.pdf", env["BUILD_PDF"],
      "pdfjam --quiet --keepinfo --papersize '{{{}mm,{}mm}}' "
      "--trim '{}mm {}mm {}mm {}mm' --clip true "
      "--outfile $TARGET $SOURCE '3-'".format(
        manuscriptPaperWidth + manuscriptMarginLeft + manuscriptMarginRight,
        manuscriptPaperHeight + manuscriptMarginTop + manuscriptMarginBottom,
        -manuscriptMarginLeft, -manuscriptMarginBottom,
        -manuscriptMarginRight, -manuscriptMarginTop))
  env.AddPostAction(thesisManuscriptPrint, Helper.compressPDFs)
  pdfsPrint.append(thesisManuscriptPrint)
  
  # generate published print version
  thesisPublishedPrintA5 = env.Command(
      "thesisPublishedPrintA5.pdf", env["BUILD_PDF"],
      "pdfjam --quiet --keepinfo --paper a5paper --papersize '{{{}mm,{}mm}}' "
      "--trim '{}mm {}mm {}mm {}mm' --clip true "
      "--outfile $TARGET $SOURCE '3-'".format(
        publishedPaperWidth + publishedMarginLeft + publishedMarginRight,
        publishedPaperHeight + publishedMarginTop + publishedMarginBottom,
        -publishedMarginLeft, -publishedMarginBottom,
        -publishedMarginRight, -publishedMarginTop))
  env.AddPostAction(thesisPublishedPrintA5, Helper.compressPDFs)
  pdfsPrint.append(thesisPublishedPrintA5)
  
  # generate published 2-up version
  thesisNupRotated = os.path.join(env["BUILD_DIR"].abspath,
                                  "thesisNupRotated.pdf")
  thesisNupWithoutCover = os.path.join(env["BUILD_DIR"].abspath,
                                       "thesisNupWithoutCover.pdf")
  env.Command(thesisNupRotated, env["BUILD_PDF"],
      "pdfjam --quiet --keepinfo --nup 2x1 --landscape --outfile $TARGET "
      "$SOURCE '2-'")
  thesisPublishedPrintA4Nup = env.Command(
      "thesisPublishedPrintA4Nup.pdf", thesisNupRotated,
      "pdfjam --quiet --keepinfo --angle 90 --outfile $TARGET $SOURCE")
  env.AddPostAction(thesisPublishedPrintA4Nup, Helper.compressPDFs)
  pdfsPrint.append(thesisPublishedPrintA4Nup)

# don't clean PDFs in out directory
env.NoClean(pdfsPrint + pdfsScreen)

# create aliases for generating print, screen, or all versions
env.Alias("all", ".")
env.Alias("print", pdfsPrint)
env.Alias("screen", pdfsScreen)

# generate by default (if invoked with just `scons`) only the screen version
env.Default("screen")
